
Personcounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004324  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d868  0800d868  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d868  0800d868  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d868  0800d868  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d868  0800d868  0001d868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d86c  0800d86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0800d870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a8  2**0
                  CONTENTS
 10 .bss          0000025c  200001a8  200001a8  000201a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  000201a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003eef3  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008c14  00000000  00000000  0005f0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  00067ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003da8  00000000  00000000  000694b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226d1  00000000  00000000  0006d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e0b9  00000000  00000000  0008f931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd42f  00000000  00000000  000ad9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000009c  00000000  00000000  0017ae19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bf0  00000000  00000000  0017aeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00011796  00000000  00000000  00180aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a8 	.word	0x200001a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800952c 	.word	0x0800952c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ac 	.word	0x200001ac
 80001dc:	0800952c 	.word	0x0800952c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000284:	b672      	cpsid	i
}
 8000286:	bf00      	nop
	__disable_irq();
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000296:	b662      	cpsie	i
}
 8000298:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800029a:	f3bf 8f6f 	isb	sy
}
 800029e:	bf00      	nop
	__enable_irq();
	__ISB();
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
	...

080002ac <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af02      	add	r7, sp, #8
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	uint32_t     sensor_cs_pin;
	GPIO_TypeDef *sensor_cs_port;

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d031      	beq.n	8000322 <acc_hal_integration_sensor_transfer+0x76>
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d82e      	bhi.n	8000322 <acc_hal_integration_sensor_transfer+0x76>
	{
		return;
	}

	switch (sensor_id)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d003      	beq.n	80002d2 <acc_hal_integration_sensor_transfer+0x26>
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d006      	beq.n	80002de <acc_hal_integration_sensor_transfer+0x32>
		case 2:
			sensor_cs_pin  = A111_CS_N2_Pin;
			sensor_cs_port = A111_CS_N2_GPIO_Port;
			break;
		default:
			return;
 80002d0:	e028      	b.n	8000324 <acc_hal_integration_sensor_transfer+0x78>
			sensor_cs_pin  = A111_CS_N1_Pin;
 80002d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002d6:	61fb      	str	r3, [r7, #28]
			sensor_cs_port = A111_CS_N1_GPIO_Port;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <acc_hal_integration_sensor_transfer+0x80>)
 80002da:	61bb      	str	r3, [r7, #24]
			break;
 80002dc:	e005      	b.n	80002ea <acc_hal_integration_sensor_transfer+0x3e>
			sensor_cs_pin  = A111_CS_N2_Pin;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	61fb      	str	r3, [r7, #28]
			sensor_cs_port = A111_CS_N2_GPIO_Port;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <acc_hal_integration_sensor_transfer+0x80>)
 80002e6:	61bb      	str	r3, [r7, #24]
			break;
 80002e8:	bf00      	nop
	}

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 80002ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80002ee:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(sensor_cs_port, sensor_cs_pin, GPIO_PIN_RESET);
 80002f0:	69fb      	ldr	r3, [r7, #28]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	2200      	movs	r2, #0
 80002f6:	4619      	mov	r1, r3
 80002f8:	69b8      	ldr	r0, [r7, #24]
 80002fa:	f001 f929 	bl	8001550 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	b29a      	uxth	r2, r3
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	4613      	mov	r3, r2
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	68b9      	ldr	r1, [r7, #8]
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <acc_hal_integration_sensor_transfer+0x84>)
 800030e:	f002 feae 	bl	800306e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(sensor_cs_port, sensor_cs_pin, GPIO_PIN_SET);
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	b29b      	uxth	r3, r3
 8000316:	2201      	movs	r2, #1
 8000318:	4619      	mov	r1, r3
 800031a:	69b8      	ldr	r0, [r7, #24]
 800031c:	f001 f918 	bl	8001550 <HAL_GPIO_WritePin>
 8000320:	e000      	b.n	8000324 <acc_hal_integration_sensor_transfer+0x78>
		return;
 8000322:	bf00      	nop
}
 8000324:	3720      	adds	r7, #32
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	48000400 	.word	0x48000400
 8000330:	200001c4 	.word	0x200001c4

08000334 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d027      	beq.n	8000392 <acc_hal_integration_sensor_power_on+0x5e>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d824      	bhi.n	8000392 <acc_hal_integration_sensor_power_on+0x5e>
	{
		return;
	}

	switch (sensor_id)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d003      	beq.n	8000356 <acc_hal_integration_sensor_power_on+0x22>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b02      	cmp	r3, #2
 8000352:	d00d      	beq.n	8000370 <acc_hal_integration_sensor_power_on+0x3c>
		case 2:
			HAL_GPIO_WritePin(A111_CS_N2_GPIO_Port, A111_CS_N2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(A111_ENABLE2_GPIO_Port, A111_ENABLE2_Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 8000354:	e019      	b.n	800038a <acc_hal_integration_sensor_power_on+0x56>
			HAL_GPIO_WritePin(A111_CS_N1_GPIO_Port, A111_CS_N1_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035c:	480f      	ldr	r0, [pc, #60]	; (800039c <acc_hal_integration_sensor_power_on+0x68>)
 800035e:	f001 f8f7 	bl	8001550 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A111_ENABLE1_GPIO_Port, A111_ENABLE1_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <acc_hal_integration_sensor_power_on+0x6c>)
 800036a:	f001 f8f1 	bl	8001550 <HAL_GPIO_WritePin>
			break;
 800036e:	e00c      	b.n	800038a <acc_hal_integration_sensor_power_on+0x56>
			HAL_GPIO_WritePin(A111_CS_N2_GPIO_Port, A111_CS_N2_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000376:	4809      	ldr	r0, [pc, #36]	; (800039c <acc_hal_integration_sensor_power_on+0x68>)
 8000378:	f001 f8ea 	bl	8001550 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A111_ENABLE2_GPIO_Port, A111_ENABLE2_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <acc_hal_integration_sensor_power_on+0x6c>)
 8000384:	f001 f8e4 	bl	8001550 <HAL_GPIO_WritePin>
			break;
 8000388:	bf00      	nop
	}

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 800038a:	2002      	movs	r0, #2
 800038c:	f000 fe08 	bl	8000fa0 <HAL_Delay>
 8000390:	e000      	b.n	8000394 <acc_hal_integration_sensor_power_on+0x60>
		return;
 8000392:	bf00      	nop
}
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	48000400 	.word	0x48000400
 80003a0:	48000800 	.word	0x48000800

080003a4 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d01b      	beq.n	80003ea <acc_hal_integration_sensor_power_off+0x46>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d818      	bhi.n	80003ea <acc_hal_integration_sensor_power_off+0x46>
	{
		return;
	}

	switch (sensor_id)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d003      	beq.n	80003c6 <acc_hal_integration_sensor_power_off+0x22>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d007      	beq.n	80003d4 <acc_hal_integration_sensor_power_off+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(A111_ENABLE2_GPIO_Port, A111_ENABLE2_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 80003c4:	e00d      	b.n	80003e2 <acc_hal_integration_sensor_power_off+0x3e>
			HAL_GPIO_WritePin(A111_ENABLE1_GPIO_Port, A111_ENABLE1_Pin, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <acc_hal_integration_sensor_power_off+0x50>)
 80003ce:	f001 f8bf 	bl	8001550 <HAL_GPIO_WritePin>
			break;
 80003d2:	e006      	b.n	80003e2 <acc_hal_integration_sensor_power_off+0x3e>
			HAL_GPIO_WritePin(A111_ENABLE2_GPIO_Port, A111_ENABLE2_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <acc_hal_integration_sensor_power_off+0x50>)
 80003dc:	f001 f8b8 	bl	8001550 <HAL_GPIO_WritePin>
			break;
 80003e0:	bf00      	nop
	}

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 80003e2:	2002      	movs	r0, #2
 80003e4:	f000 fddc 	bl	8000fa0 <HAL_Delay>
 80003e8:	e000      	b.n	80003ec <acc_hal_integration_sensor_power_off+0x48>
		return;
 80003ea:	bf00      	nop
}
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	48000800 	.word	0x48000800

080003f8 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	uint32_t     sensor_interrupt_pin;
	GPIO_TypeDef *sensor_interrupt_port;

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d002      	beq.n	800040e <acc_hal_integration_wait_for_sensor_interrupt+0x16>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b02      	cmp	r3, #2
 800040c:	d901      	bls.n	8000412 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
	{
		return false;
 800040e:	2300      	movs	r3, #0
 8000410:	e041      	b.n	8000496 <acc_hal_integration_wait_for_sensor_interrupt+0x9e>
	}

	switch (sensor_id)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d003      	beq.n	8000420 <acc_hal_integration_wait_for_sensor_interrupt+0x28>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d005      	beq.n	800042a <acc_hal_integration_wait_for_sensor_interrupt+0x32>
 800041e:	e009      	b.n	8000434 <acc_hal_integration_wait_for_sensor_interrupt+0x3c>
	{
		case 1:
			sensor_interrupt_pin  = A111_SENSOR_INTERRUPT1_Pin;
 8000420:	2304      	movs	r3, #4
 8000422:	617b      	str	r3, [r7, #20]
			sensor_interrupt_port = A111_SENSOR_INTERRUPT1_GPIO_Port;
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <acc_hal_integration_wait_for_sensor_interrupt+0xa8>)
 8000426:	613b      	str	r3, [r7, #16]
			break;
 8000428:	e006      	b.n	8000438 <acc_hal_integration_wait_for_sensor_interrupt+0x40>
		case 2:
			sensor_interrupt_pin  = A111_SENSOR_INTERRUPT2_Pin;
 800042a:	2302      	movs	r3, #2
 800042c:	617b      	str	r3, [r7, #20]
			sensor_interrupt_port = A111_SENSOR_INTERRUPT2_GPIO_Port;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <acc_hal_integration_wait_for_sensor_interrupt+0xa8>)
 8000430:	613b      	str	r3, [r7, #16]
			break;
 8000432:	e001      	b.n	8000438 <acc_hal_integration_wait_for_sensor_interrupt+0x40>
		default:
			return false;
 8000434:	2300      	movs	r3, #0
 8000436:	e02e      	b.n	8000496 <acc_hal_integration_wait_for_sensor_interrupt+0x9e>
	}

	const uint32_t wait_begin_ms = HAL_GetTick();
 8000438:	f000 fda6 	bl	8000f88 <HAL_GetTick>
 800043c:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(sensor_interrupt_port, sensor_interrupt_pin) != GPIO_PIN_SET) &&
 800043e:	e00d      	b.n	800045c <acc_hal_integration_wait_for_sensor_interrupt+0x64>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000440:	f7ff ff1e 	bl	8000280 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(sensor_interrupt_port, sensor_interrupt_pin) != GPIO_PIN_SET)
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	b29b      	uxth	r3, r3
 8000448:	4619      	mov	r1, r3
 800044a:	6938      	ldr	r0, [r7, #16]
 800044c:	f001 f868 	bl	8001520 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b01      	cmp	r3, #1
 8000454:	d000      	beq.n	8000458 <acc_hal_integration_wait_for_sensor_interrupt+0x60>
		{
			__WFI();
 8000456:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8000458:	f7ff ff1b 	bl	8000292 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(sensor_interrupt_port, sensor_interrupt_pin) != GPIO_PIN_SET) &&
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	b29b      	uxth	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	6938      	ldr	r0, [r7, #16]
 8000464:	f001 f85c 	bl	8001520 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b01      	cmp	r3, #1
 800046c:	d007      	beq.n	800047e <acc_hal_integration_wait_for_sensor_interrupt+0x86>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 800046e:	f000 fd8b 	bl	8000f88 <HAL_GetTick>
 8000472:	4602      	mov	r2, r0
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(sensor_interrupt_port, sensor_interrupt_pin) != GPIO_PIN_SET) &&
 8000478:	683a      	ldr	r2, [r7, #0]
 800047a:	429a      	cmp	r2, r3
 800047c:	d8e0      	bhi.n	8000440 <acc_hal_integration_wait_for_sensor_interrupt+0x48>
	}

	return HAL_GPIO_ReadPin(sensor_interrupt_port, sensor_interrupt_pin) == GPIO_PIN_SET;
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	b29b      	uxth	r3, r3
 8000482:	4619      	mov	r1, r3
 8000484:	6938      	ldr	r0, [r7, #16]
 8000486:	f001 f84b 	bl	8001520 <HAL_GPIO_ReadPin>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	bf0c      	ite	eq
 8000490:	2301      	moveq	r3, #1
 8000492:	2300      	movne	r3, #0
 8000494:	b2db      	uxtb	r3, r3
}
 8000496:	4618      	mov	r0, r3
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	48000400 	.word	0x48000400

080004a4 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <acc_hal_integration_get_reference_frequency+0x18>)
 80004aa:	ee07 3a90 	vmov	s15, r3
}
 80004ae:	eeb0 0a67 	vmov.f32	s0, s15
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	4bc65d40 	.word	0x4bc65d40

080004c0 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	return &hal;
 80004c4:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <acc_hal_integration_get_implementation+0x10>)
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	0800ad10 	.word	0x0800ad10

080004d4 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80004d4:	b40c      	push	{r2, r3}
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b0b4      	sub	sp, #208	; 0xd0
 80004da:	af04      	add	r7, sp, #16
 80004dc:	4603      	mov	r3, r0
 80004de:	6039      	str	r1, [r7, #0]
 80004e0:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 80004e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80004e6:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80004e8:	f107 000c 	add.w	r0, r7, #12
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80004f2:	2196      	movs	r1, #150	; 0x96
 80004f4:	f008 f9f0 	bl	80088d8 <vsniprintf>
 80004f8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 80004fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000500:	2b95      	cmp	r3, #149	; 0x95
 8000502:	dd0b      	ble.n	800051c <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8000504:	232e      	movs	r3, #46	; 0x2e
 8000506:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 800050a:	232e      	movs	r3, #46	; 0x2e
 800050c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8000510:	232e      	movs	r3, #46	; 0x2e
 8000512:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 800051c:	f000 f876 	bl	800060c <acc_integration_get_time>
 8000520:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8000524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 800052c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000530:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <acc_integration_log+0x11c>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	0d5b      	lsrs	r3, r3, #21
 8000538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 800053c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000540:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <acc_integration_log+0x120>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0b9a      	lsrs	r2, r3, #14
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <acc_integration_log+0x124>)
 800054a:	fba3 1302 	umull	r1, r3, r3, r2
 800054e:	0959      	lsrs	r1, r3, #5
 8000550:	460b      	mov	r3, r1
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800055e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000562:	4a26      	ldr	r2, [pc, #152]	; (80005fc <acc_integration_log+0x128>)
 8000564:	fba2 2303 	umull	r2, r3, r2, r3
 8000568:	099a      	lsrs	r2, r3, #6
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <acc_integration_log+0x124>)
 800056c:	fba3 1302 	umull	r1, r3, r3, r2
 8000570:	0959      	lsrs	r1, r3, #5
 8000572:	460b      	mov	r3, r1
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	1a5b      	subs	r3, r3, r1
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8000580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <acc_integration_log+0x128>)
 8000586:	fba2 1203 	umull	r1, r2, r2, r3
 800058a:	0992      	lsrs	r2, r2, #6
 800058c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000590:	fb01 f202 	mul.w	r2, r1, r2
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b04      	cmp	r3, #4
 800059e:	d803      	bhi.n	80005a8 <acc_integration_log+0xd4>
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <acc_integration_log+0x12c>)
 80005a4:	5cd3      	ldrb	r3, [r2, r3]
 80005a6:	e000      	b.n	80005aa <acc_integration_log+0xd6>
 80005a8:	233f      	movs	r3, #63	; 0x3f
 80005aa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80005ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80005b2:	f107 020c 	add.w	r2, r7, #12
 80005b6:	9203      	str	r2, [sp, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	9202      	str	r2, [sp, #8]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80005cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <acc_integration_log+0x130>)
 80005d2:	f008 f875 	bl	80086c0 <iprintf>

	fflush(stdout);
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <acc_integration_log+0x134>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	4618      	mov	r0, r3
 80005de:	f007 fe1f 	bl	8008220 <fflush>

	va_end(ap);
}
 80005e2:	bf00      	nop
 80005e4:	37c0      	adds	r7, #192	; 0xc0
 80005e6:	46bd      	mov	sp, r7
 80005e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ec:	b002      	add	sp, #8
 80005ee:	4770      	bx	lr
 80005f0:	95217cb1 	.word	0x95217cb1
 80005f4:	45e7b273 	.word	0x45e7b273
 80005f8:	88888889 	.word	0x88888889
 80005fc:	10624dd3 	.word	0x10624dd3
 8000600:	08009568 	.word	0x08009568
 8000604:	08009544 	.word	0x08009544
 8000608:	20000144 	.word	0x20000144

0800060c <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000610:	f000 fcba 	bl	8000f88 <HAL_GetTick>
 8000614:	4603      	mov	r3, r0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <acc_example_assembly_test>:

#define DEFAULT_SENSOR_ID 1


int acc_example_assembly_test(int argc, char *argv[])
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0b0      	sub	sp, #192	; 0xc0
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	printf("Deprecated: This example is replaced with example_bring_up.c");
 8000626:	4847      	ldr	r0, [pc, #284]	; (8000744 <acc_example_assembly_test+0x128>)
 8000628:	f008 f84a 	bl	80086c0 <iprintf>

	printf("Acconeer software version %s\n", acc_version_get());
 800062c:	f003 ff7e 	bl	800452c <acc_version_get>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	4844      	ldr	r0, [pc, #272]	; (8000748 <acc_example_assembly_test+0x12c>)
 8000636:	f008 f843 	bl	80086c0 <iprintf>

	acc_rss_assembly_test_result_t test_results[ACC_RSS_ASSEMBLY_TEST_MAX_NUMBER_OF_TESTS];
	uint16_t                       nr_of_test_results = ACC_RSS_ASSEMBLY_TEST_MAX_NUMBER_OF_TESTS;
 800063a:	2314      	movs	r3, #20
 800063c:	827b      	strh	r3, [r7, #18]
	bool                           success;

	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 800063e:	f7ff ff3f 	bl	80004c0 <acc_hal_integration_get_implementation>
 8000642:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	if (!acc_rss_activate(hal))
 8000646:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800064a:	f003 fd59 	bl	8004100 <acc_rss_activate>
 800064e:	4603      	mov	r3, r0
 8000650:	f083 0301 	eor.w	r3, r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <acc_example_assembly_test+0x42>
	{
		return EXIT_FAILURE;
 800065a:	2301      	movs	r3, #1
 800065c:	e06e      	b.n	800073c <acc_example_assembly_test+0x120>
	}

	acc_rss_assembly_test_configuration_t configuration = acc_rss_assembly_test_configuration_create();
 800065e:	f003 fdbf 	bl	80041e0 <acc_rss_assembly_test_configuration_create>
 8000662:	4603      	mov	r3, r0
 8000664:	60fb      	str	r3, [r7, #12]

	acc_rss_assembly_test_configuration_sensor_set(configuration, DEFAULT_SENSOR_ID);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fdd0 	bl	8004210 <acc_rss_assembly_test_configuration_sensor_set>

	success = acc_rss_assembly_test(configuration, test_results, &nr_of_test_results);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f107 0212 	add.w	r2, r7, #18
 8000676:	f107 0114 	add.w	r1, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fdd4 	bl	8004228 <acc_rss_assembly_test>
 8000680:	4603      	mov	r3, r0
 8000682:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	if (success)
 8000686:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800068a:	2b00      	cmp	r3, #0
 800068c:	d047      	beq.n	800071e <acc_example_assembly_test+0x102>
	{
		bool all_passed = true;
 800068e:	2301      	movs	r3, #1
 8000690:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe

		for (uint16_t i = 0; i < nr_of_test_results; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800069a:	e02c      	b.n	80006f6 <acc_example_assembly_test+0xda>
		{
			const bool test_passed = test_results[i].test_passed;
 800069c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	33c0      	adds	r3, #192	; 0xc0
 80006a4:	443b      	add	r3, r7
 80006a6:	f813 3ca8 	ldrb.w	r3, [r3, #-168]
 80006aa:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			printf("Name: %s, result: %s\n", test_results[i].test_name, test_passed ? "Pass" : "Fail");
 80006ae:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	33c0      	adds	r3, #192	; 0xc0
 80006b6:	443b      	add	r3, r7
 80006b8:	f853 1cac 	ldr.w	r1, [r3, #-172]
 80006bc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <acc_example_assembly_test+0xac>
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <acc_example_assembly_test+0x130>)
 80006c6:	e000      	b.n	80006ca <acc_example_assembly_test+0xae>
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <acc_example_assembly_test+0x134>)
 80006ca:	461a      	mov	r2, r3
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <acc_example_assembly_test+0x138>)
 80006ce:	f007 fff7 	bl	80086c0 <iprintf>
			all_passed = test_passed ? all_passed : false;
 80006d2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d005      	beq.n	80006e6 <acc_example_assembly_test+0xca>
 80006da:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <acc_example_assembly_test+0xca>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <acc_example_assembly_test+0xcc>
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
		for (uint16_t i = 0; i < nr_of_test_results; i++)
 80006ec:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80006f0:	3301      	adds	r3, #1
 80006f2:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80006f6:	8a7b      	ldrh	r3, [r7, #18]
 80006f8:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d3cd      	bcc.n	800069c <acc_example_assembly_test+0x80>
		}

		if (all_passed)
 8000700:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <acc_example_assembly_test+0xf4>
		{
			printf("Assembly test: All tests passed\n");
 8000708:	4813      	ldr	r0, [pc, #76]	; (8000758 <acc_example_assembly_test+0x13c>)
 800070a:	f008 f85f 	bl	80087cc <puts>
 800070e:	e009      	b.n	8000724 <acc_example_assembly_test+0x108>
		}
		else
		{
			printf("Assembly test: There are failed tests\n");
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <acc_example_assembly_test+0x140>)
 8000712:	f008 f85b 	bl	80087cc <puts>
			success = false;
 8000716:	2300      	movs	r3, #0
 8000718:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800071c:	e002      	b.n	8000724 <acc_example_assembly_test+0x108>
		}
	}
	else
	{
		printf("Assembly test: Failed to complete\n");
 800071e:	4810      	ldr	r0, [pc, #64]	; (8000760 <acc_example_assembly_test+0x144>)
 8000720:	f008 f854 	bl	80087cc <puts>
	}

	acc_rss_assembly_test_configuration_destroy(&configuration);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fd67 	bl	80041fc <acc_rss_assembly_test_configuration_destroy>

	acc_rss_deactivate();
 800072e:	f003 fd25 	bl	800417c <acc_rss_deactivate>

	return success ? EXIT_SUCCESS : EXIT_FAILURE;
 8000732:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	37c0      	adds	r7, #192	; 0xc0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	08009570 	.word	0x08009570
 8000748:	080095b0 	.word	0x080095b0
 800074c:	080095d0 	.word	0x080095d0
 8000750:	080095d8 	.word	0x080095d8
 8000754:	080095e0 	.word	0x080095e0
 8000758:	080095f8 	.word	0x080095f8
 800075c:	08009618 	.word	0x08009618
 8000760:	08009640 	.word	0x08009640

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 fbb4 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f80d 	bl	800078a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 f90a 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000774:	f000 f8d8 	bl	8000928 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000778:	f000 f868 	bl	800084c <MX_SPI2_Init>
  MX_UART4_Init();
 800077c:	f000 f8a4 	bl	80008c8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  acc_example_assembly_test(0, NULL);
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ff4a 	bl	800061c <acc_example_assembly_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x24>

0800078a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b0a6      	sub	sp, #152	; 0x98
 800078e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000790:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000794:	2228      	movs	r2, #40	; 0x28
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f007 fea9 	bl	80084f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2258      	movs	r2, #88	; 0x58
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f007 fe9b 	bl	80084f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ba:	2302      	movs	r3, #2
 80007bc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007be:	2301      	movs	r3, #1
 80007c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c2:	2310      	movs	r3, #16
 80007c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 feed 	bl	80015c8 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007f4:	f000 f98e 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000812:	2102      	movs	r1, #2
 8000814:	4618      	mov	r0, r3
 8000816:	f001 ff2b 	bl	8002670 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000820:	f000 f978 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 8000824:	230a      	movs	r3, #10
 8000826:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f002 f952 	bl	8002adc <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800083e:	f000 f969 	bl	8000b14 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3798      	adds	r7, #152	; 0x98
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_SPI2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000866:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800086a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI2_Init+0x74>)
 800087a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000882:	2220      	movs	r2, #32
 8000884:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI2_Init+0x74>)
 800089a:	2207      	movs	r2, #7
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008ac:	f002 fb34 	bl	8002f18 <HAL_SPI_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f92d 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001c4 	.word	0x200001c4
 80008c4:	40003800 	.word	0x40003800

080008c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_UART4_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_UART4_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_UART4_Init+0x58>)
 80008d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_UART4_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_UART4_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_UART4_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_UART4_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_UART4_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_UART4_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_UART4_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_UART4_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_UART4_Init+0x58>)
 800090c:	f002 ff36 	bl	800377c <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f8fd 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000228 	.word	0x20000228
 8000924:	40004c00 	.word	0x40004c00

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	f002 ff06 	bl	800377c <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f8cd 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200002b0 	.word	0x200002b0
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b4f      	ldr	r3, [pc, #316]	; (8000adc <MX_GPIO_Init+0x154>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a4e      	ldr	r2, [pc, #312]	; (8000adc <MX_GPIO_Init+0x154>)
 80009a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <MX_GPIO_Init+0x154>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b6:	4b49      	ldr	r3, [pc, #292]	; (8000adc <MX_GPIO_Init+0x154>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a48      	ldr	r2, [pc, #288]	; (8000adc <MX_GPIO_Init+0x154>)
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b46      	ldr	r3, [pc, #280]	; (8000adc <MX_GPIO_Init+0x154>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <MX_GPIO_Init+0x154>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a42      	ldr	r2, [pc, #264]	; (8000adc <MX_GPIO_Init+0x154>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <MX_GPIO_Init+0x154>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <MX_GPIO_Init+0x154>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <MX_GPIO_Init+0x154>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <MX_GPIO_Init+0x154>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 fda3 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_CS_N2_Pin|A111_CS_N1_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000a10:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <MX_GPIO_Init+0x158>)
 8000a12:	f000 fd9d 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A111_ENABLE1_Pin|A111_ENABLE2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a1c:	4831      	ldr	r0, [pc, #196]	; (8000ae4 <MX_GPIO_Init+0x15c>)
 8000a1e:	f000 fd97 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	482a      	ldr	r0, [pc, #168]	; (8000ae4 <MX_GPIO_Init+0x15c>)
 8000a3a:	f000 fbe7 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fbd8 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_SENSOR_INTERRUPT2_Pin A111_SENSOR_INTERRUPT1_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT2_Pin|A111_SENSOR_INTERRUPT1_Pin;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <MX_GPIO_Init+0x158>)
 8000a72:	f000 fbcb 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_CS_N2_Pin A111_CS_N1_Pin */
  GPIO_InitStruct.Pin = A111_CS_N2_Pin|A111_CS_N1_Pin;
 8000a76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_GPIO_Init+0x158>)
 8000a90:	f000 fbbc 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_ENABLE1_Pin A111_ENABLE2_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE1_Pin|A111_ENABLE2_Pin;
 8000a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_GPIO_Init+0x15c>)
 8000aae:	f000 fbad 	bl	800120c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fb71 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000abc:	2007      	movs	r0, #7
 8000abe:	f000 fb8a 	bl	80011d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2008      	movs	r0, #8
 8000ac8:	f000 fb69 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000acc:	2008      	movs	r0, #8
 8000ace:	f000 fb82 	bl	80011d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	48000800 	.word	0x48000800

08000ae8 <_write>:
	acc_service_envelope_downsampling_factor_set(envelope_configuration, DOWNSAMPLING_FACTOR);

}

int _write(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <_write+0x28>)
 8000b00:	f002 fe8a 	bl	8003818 <HAL_UART_Transmit>
	return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200002b0 	.word	0x200002b0

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x44>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x44>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x44>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b56:	2007      	movs	r0, #7
 8000b58:	f000 fb16 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_SPI_MspInit+0x7c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d128      	bne.n	8000bdc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x80>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <HAL_SPI_MspInit+0x80>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_SPI_MspInit+0x80>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x80>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_SPI_MspInit+0x80>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_SPI_MspInit+0x80>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8000bba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bcc:	2305      	movs	r3, #5
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_SPI_MspInit+0x84>)
 8000bd8:	f000 fb18 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40003800 	.word	0x40003800
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000400 	.word	0x48000400

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <HAL_UART_MspInit+0xdc>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d129      	bne.n	8000c66 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000c54:	2305      	movs	r3, #5
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481d      	ldr	r0, [pc, #116]	; (8000cd4 <HAL_UART_MspInit+0xe4>)
 8000c60:	f000 fad4 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c64:	e02d      	b.n	8000cc2 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_UART_MspInit+0xe8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d128      	bne.n	8000cc2 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7a:	61d3      	str	r3, [r2, #28]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c92:	6153      	str	r3, [r2, #20]
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_UART_MspInit+0xe0>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 faa5 	bl	800120c <HAL_GPIO_Init>
}
 8000cc2:	bf00      	nop
 8000cc4:	3730      	adds	r7, #48	; 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40004c00 	.word	0x40004c00
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	40004400 	.word	0x40004400

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f91a 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT2_Pin);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f000 fc23 	bl	8001580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT1_Pin);
 8000d42:	2004      	movs	r0, #4
 8000d44:	f000 fc1c 	bl	8001580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e00a      	b.n	8000d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5e:	f3af 8000 	nop.w
 8000d62:	4601      	mov	r1, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf0      	blt.n	8000d5e <_read+0x12>
  }

  return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dae:	605a      	str	r2, [r3, #4]
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_isatty>:

int _isatty(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f007 f936 	bl	8008090 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20010000 	.word	0x20010000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	20000338 	.word	0x20000338
 8000e58:	20000408 	.word	0x20000408

08000e5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e84:	f7ff ffea 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	; (8000ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <LoopForever+0xe>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	; (8000ecc <LoopForever+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eae:	f007 fabf 	bl	8008430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb2:	f7ff fc57 	bl	8000764 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8000ec4:	0800d870 	.word	0x0800d870
  ldr r2, =_sbss
 8000ec8:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000ecc:	20000404 	.word	0x20000404

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x28>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x28>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f94f 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fe16 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f967 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f92f 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	2000033c 	.word	0x2000033c

08000f88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000033c 	.word	0x2000033c

08000fa0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e160      	b.n	80014de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8152 	beq.w	80014d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 0201 	and.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d017      	beq.n	80012ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d123      	bne.n	800133e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	6939      	ldr	r1, [r7, #16]
 800133a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0203 	and.w	r2, r3, #3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80ac 	beq.w	80014d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001380:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <HAL_GPIO_Init+0x2f0>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a5d      	ldr	r2, [pc, #372]	; (80014fc <HAL_GPIO_Init+0x2f0>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HAL_GPIO_Init+0x2f0>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001398:	4a59      	ldr	r2, [pc, #356]	; (8001500 <HAL_GPIO_Init+0x2f4>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013c2:	d025      	beq.n	8001410 <HAL_GPIO_Init+0x204>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x2f8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d01f      	beq.n	800140c <HAL_GPIO_Init+0x200>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <HAL_GPIO_Init+0x2fc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d019      	beq.n	8001408 <HAL_GPIO_Init+0x1fc>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_GPIO_Init+0x300>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1f8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x304>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1f4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_GPIO_Init+0x308>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1f0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a4a      	ldr	r2, [pc, #296]	; (8001518 <HAL_GPIO_Init+0x30c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1ec>
 80013f4:	2306      	movs	r3, #6
 80013f6:	e00c      	b.n	8001412 <HAL_GPIO_Init+0x206>
 80013f8:	2307      	movs	r3, #7
 80013fa:	e00a      	b.n	8001412 <HAL_GPIO_Init+0x206>
 80013fc:	2305      	movs	r3, #5
 80013fe:	e008      	b.n	8001412 <HAL_GPIO_Init+0x206>
 8001400:	2304      	movs	r3, #4
 8001402:	e006      	b.n	8001412 <HAL_GPIO_Init+0x206>
 8001404:	2303      	movs	r3, #3
 8001406:	e004      	b.n	8001412 <HAL_GPIO_Init+0x206>
 8001408:	2302      	movs	r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x206>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_GPIO_Init+0x206>
 8001410:	2300      	movs	r3, #0
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	f002 0203 	and.w	r2, r2, #3
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	4093      	lsls	r3, r2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001422:	4937      	ldr	r1, [pc, #220]	; (8001500 <HAL_GPIO_Init+0x2f4>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_GPIO_Init+0x310>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001454:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_GPIO_Init+0x310>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_GPIO_Init+0x310>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800147e:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_GPIO_Init+0x310>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_GPIO_Init+0x310>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a8:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_GPIO_Init+0x310>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_GPIO_Init+0x310>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <HAL_GPIO_Init+0x310>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f ae97 	bne.w	800121c <HAL_GPIO_Init+0x10>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	48000400 	.word	0x48000400
 8001508:	48000800 	.word	0x48000800
 800150c:	48000c00 	.word	0x48000c00
 8001510:	48001000 	.word	0x48001000
 8001514:	48001400 	.word	0x48001400
 8001518:	48001800 	.word	0x48001800
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800156c:	e002      	b.n	8001574 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f806 	bl	80015b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f001 b83a 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 816f 	beq.w	80018e2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001604:	4bb5      	ldr	r3, [pc, #724]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001610:	4bb2      	ldr	r3, [pc, #712]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d15c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x10e>
 800161c:	4baf      	ldr	r3, [pc, #700]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d155      	bne.n	80016d6 <HAL_RCC_OscConfig+0x10e>
 800162a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800163e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x94>
 8001656:	4ba1      	ldr	r3, [pc, #644]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	e015      	b.n	8001688 <HAL_RCC_OscConfig+0xc0>
 800165c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001660:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001674:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001678:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001684:	4b95      	ldr	r3, [pc, #596]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800168c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001690:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001694:	fa92 f2a2 	rbit	r2, r2
 8001698:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800169c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	f042 0220 	orr.w	r2, r2, #32
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f002 021f 	and.w	r2, r2, #31
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8111 	beq.w	80018e0 <HAL_RCC_OscConfig+0x318>
 80016be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8108 	bne.w	80018e0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	f000 bfc6 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12e>
 80016e8:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7b      	ldr	r2, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e036      	b.n	8001764 <HAL_RCC_OscConfig+0x19c>
 80016f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x158>
 8001706:	4b75      	ldr	r3, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a74      	ldr	r2, [pc, #464]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800170c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a71      	ldr	r2, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e021      	b.n	8001764 <HAL_RCC_OscConfig+0x19c>
 8001720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001724:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x184>
 8001732:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a66      	ldr	r2, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x19c>
 800174c:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a62      	ldr	r2, [pc, #392]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a5f      	ldr	r2, [pc, #380]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001768:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d059      	beq.n	8001828 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fc08 	bl	8000f88 <HAL_GetTick>
 8001778:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177e:	f7ff fc03 	bl	8000f88 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d902      	bls.n	8001794 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	f000 bf67 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001798:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80017a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d102      	bne.n	80017c6 <HAL_RCC_OscConfig+0x1fe>
 80017c0:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x22a>
 80017c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80017da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80017fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80017fe:	fa92 f2a2 	rbit	r2, r2
 8001802:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001806:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800180a:	fab2 f282 	clz	r2, r2
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	f042 0220 	orr.w	r2, r2, #32
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	f002 021f 	and.w	r2, r2, #31
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ab      	beq.n	800177e <HAL_RCC_OscConfig+0x1b6>
 8001826:	e05c      	b.n	80018e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fbae 	bl	8000f88 <HAL_GetTick>
 800182c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001832:	f7ff fba9 	bl	8000f88 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d902      	bls.n	8001848 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	f000 bf0d 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800185c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d102      	bne.n	800187a <HAL_RCC_OscConfig+0x2b2>
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e015      	b.n	80018a6 <HAL_RCC_OscConfig+0x2de>
 800187a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800188e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001892:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001896:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_RCC_OscConfig+0x314>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80018ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80018b2:	fa92 f2a2 	rbit	r2, r2
 80018b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80018ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018be:	fab2 f282 	clz	r2, r2
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f042 0220 	orr.w	r2, r2, #32
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f002 021f 	and.w	r2, r2, #31
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ab      	bne.n	8001832 <HAL_RCC_OscConfig+0x26a>
 80018da:	e002      	b.n	80018e2 <HAL_RCC_OscConfig+0x31a>
 80018dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 817f 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018f8:	4ba7      	ldr	r3, [pc, #668]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001904:	4ba4      	ldr	r3, [pc, #656]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d173      	bne.n	80019f8 <HAL_RCC_OscConfig+0x430>
 8001910:	4ba1      	ldr	r3, [pc, #644]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800191c:	d16c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x430>
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001930:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x386>
 8001948:	4b93      	ldr	r3, [pc, #588]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e013      	b.n	8001976 <HAL_RCC_OscConfig+0x3ae>
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001966:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001972:	4b89      	ldr	r3, [pc, #548]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2202      	movs	r2, #2
 8001978:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800197c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001980:	fa92 f2a2 	rbit	r2, r2
 8001984:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001988:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800198c:	fab2 f282 	clz	r2, r2
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f002 021f 	and.w	r2, r2, #31
 800199c:	2101      	movs	r1, #1
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00a      	beq.n	80019be <HAL_RCC_OscConfig+0x3f6>
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d002      	beq.n	80019be <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f000 be52 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	21f8      	movs	r1, #248	; 0xf8
 80019d4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80019dc:	fa91 f1a1 	rbit	r1, r1
 80019e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80019e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019e8:	fab1 f181 	clz	r1, r1
 80019ec:	b2c9      	uxtb	r1, r1
 80019ee:	408b      	lsls	r3, r1
 80019f0:	4969      	ldr	r1, [pc, #420]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e0fe      	b.n	8001bf6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8088 	beq.w	8001b1a <HAL_RCC_OscConfig+0x552>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a1c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	461a      	mov	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff faa7 	bl	8000f88 <HAL_GetTick>
 8001a3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff faa2 	bl	8000f88 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d902      	bls.n	8001a56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f000 be06 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001a68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4be>
 8001a80:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e013      	b.n	8001aae <HAL_RCC_OscConfig+0x4e6>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001ab4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001ac0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0af      	beq.n	8001a40 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	21f8      	movs	r1, #248	; 0xf8
 8001af6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001afe:	fa91 f1a1 	rbit	r1, r1
 8001b02:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b06:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b0a:	fab1 f181 	clz	r1, r1
 8001b0e:	b2c9      	uxtb	r1, r1
 8001b10:	408b      	lsls	r3, r1
 8001b12:	4921      	ldr	r1, [pc, #132]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e06d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x62e>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fa1f 	bl	8000f88 <HAL_GetTick>
 8001b4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fa1a 	bl	8000f88 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d902      	bls.n	8001b66 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f000 bd7e 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5d4>
 8001b90:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <HAL_RCC_OscConfig+0x5d0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e016      	b.n	8001bc4 <HAL_RCC_OscConfig+0x5fc>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bc0:	4bbf      	ldr	r3, [pc, #764]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001bca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bce:	fa92 f2a2 	rbit	r2, r2
 8001bd2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001bd6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f042 0220 	orr.w	r2, r2, #32
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ac      	bne.n	8001b50 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8113 	beq.w	8001e32 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d07c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x74e>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4ba2      	ldr	r3, [pc, #648]	; (8001ec4 <HAL_RCC_OscConfig+0x8fc>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	461a      	mov	r2, r3
 8001c42:	2301      	movs	r3, #1
 8001c44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff f99f 	bl	8000f88 <HAL_GetTick>
 8001c4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff f99a 	bl	8000f88 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d902      	bls.n	8001c66 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	f000 bcfe 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c86:	2202      	movs	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001caa:	2202      	movs	r2, #2
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	4b7e      	ldr	r3, [pc, #504]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	6019      	str	r1, [r3, #0]
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f1a3 	rbit	r1, r3
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cec:	6019      	str	r1, [r3, #0]
  return result;
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d09d      	beq.n	8001c50 <HAL_RCC_OscConfig+0x688>
 8001d14:	e08d      	b.n	8001e32 <HAL_RCC_OscConfig+0x86a>
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d38:	601a      	str	r2, [r3, #0]
  return result;
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x8fc>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	461a      	mov	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff f916 	bl	8000f88 <HAL_GetTick>
 8001d5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff f911 	bl	8000f88 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d902      	bls.n	8001d78 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f000 bc75 	b.w	8002662 <HAL_RCC_OscConfig+0x109a>
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d80:	2202      	movs	r2, #2
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001da4:	2202      	movs	r2, #2
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dc8:	2202      	movs	r2, #2
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001de2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001df0:	2102      	movs	r1, #2
 8001df2:	6019      	str	r1, [r3, #0]
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f1a3 	rbit	r1, r3
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e0a:	6019      	str	r1, [r3, #0]
  return result;
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d197      	bne.n	8001d62 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 81a5 	beq.w	8002192 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_RCC_OscConfig+0x8f8>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e80:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_RCC_OscConfig+0x900>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d121      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_RCC_OscConfig+0x900>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x900>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f872 	bl	8000f88 <HAL_GetTick>
 8001ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e010      	b.n	8001ecc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff f86d 	bl	8000f88 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d908      	bls.n	8001ecc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e3d1      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	10908120 	.word	0x10908120
 8001ec8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <HAL_RCC_OscConfig+0xb3c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0e8      	beq.n	8001eaa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x92e>
 8001ee8:	4b87      	ldr	r3, [pc, #540]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a86      	ldr	r2, [pc, #536]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e035      	b.n	8001f62 <HAL_RCC_OscConfig+0x99a>
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x958>
 8001f06:	4b80      	ldr	r3, [pc, #512]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a7f      	ldr	r2, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a7c      	ldr	r2, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	e020      	b.n	8001f62 <HAL_RCC_OscConfig+0x99a>
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_OscConfig+0x982>
 8001f30:	4b75      	ldr	r3, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a74      	ldr	r2, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	4b72      	ldr	r3, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a71      	ldr	r2, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	e00b      	b.n	8001f62 <HAL_RCC_OscConfig+0x99a>
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a6b      	ldr	r2, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8081 	beq.w	8002076 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff f808 	bl	8000f88 <HAL_GetTick>
 8001f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff f803 	bl	8000f88 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e365      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fdc:	601a      	str	r2, [r3, #0]
  return result;
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001fe6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_OscConfig+0xa3a>
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	e013      	b.n	800202a <HAL_RCC_OscConfig+0xa62>
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800200a:	2202      	movs	r2, #2
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800202e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002032:	2102      	movs	r1, #2
 8002034:	6011      	str	r1, [r2, #0]
 8002036:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800203a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	fa92 f1a2 	rbit	r1, r2
 8002044:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002048:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800204c:	6011      	str	r1, [r2, #0]
  return result;
 800204e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002052:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f002 021f 	and.w	r2, r2, #31
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f202 	lsl.w	r2, r1, r2
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d084      	beq.n	8001f7e <HAL_RCC_OscConfig+0x9b6>
 8002074:	e083      	b.n	800217e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe ff87 	bl	8000f88 <HAL_GetTick>
 800207a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7fe ff82 	bl	8000f88 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e2e4      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020a0:	2202      	movs	r2, #2
 80020a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020de:	601a      	str	r2, [r3, #0]
  return result;
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0xb44>
 80020fe:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_RCC_OscConfig+0xb40>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	e017      	b.n	8002134 <HAL_RCC_OscConfig+0xb6c>
 8002104:	40007000 	.word	0x40007000
 8002108:	40021000 	.word	0x40021000
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	4bb3      	ldr	r3, [pc, #716]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002138:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800213c:	2102      	movs	r1, #2
 800213e:	6011      	str	r1, [r2, #0]
 8002140:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002144:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	fa92 f1a2 	rbit	r1, r2
 800214e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002152:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002156:	6011      	str	r1, [r2, #0]
  return result;
 8002158:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800215c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d180      	bne.n	8002080 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800217e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b9e      	ldr	r3, [pc, #632]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a9d      	ldr	r2, [pc, #628]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 825e 	beq.w	8002660 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a4:	4b96      	ldr	r3, [pc, #600]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	f000 821f 	beq.w	80025f0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	f040 8170 	bne.w	80024a4 <HAL_RCC_OscConfig+0xedc>
 80021c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021f2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	461a      	mov	r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe febd 	bl	8000f88 <HAL_GetTick>
 800220e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe feb8 	bl	8000f88 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e21c      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800224c:	601a      	str	r2, [r3, #0]
  return result;
 800224e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002252:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002256:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0xcaa>
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	e027      	b.n	80022c2 <HAL_RCC_OscConfig+0xcfa>
 8002272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002276:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800227a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002284:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f2a3 	rbit	r2, r3
 800228e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002292:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fa92 f1a2 	rbit	r1, r2
 80022de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022e2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022e6:	6011      	str	r1, [r2, #0]
  return result;
 80022e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ec:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0220 	orr.w	r2, r2, #32
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d182      	bne.n	8002214 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	4937      	ldr	r1, [pc, #220]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 8002324:	4313      	orrs	r3, r2
 8002326:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a19      	ldr	r1, [r3, #32]
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	430b      	orrs	r3, r1
 800234a:	492d      	ldr	r1, [pc, #180]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800235c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002362:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002374:	601a      	str	r2, [r3, #0]
  return result;
 8002376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800237e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800238a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	461a      	mov	r2, r3
 8002392:	2301      	movs	r3, #1
 8002394:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fdf7 	bl	8000f88 <HAL_GetTick>
 800239a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239e:	e009      	b.n	80023b4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fdf2 	bl	8000f88 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e156      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023d8:	601a      	str	r2, [r3, #0]
  return result;
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0xe3c>
 80023f8:	4b01      	ldr	r3, [pc, #4]	; (8002400 <HAL_RCC_OscConfig+0xe38>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	e02a      	b.n	8002454 <HAL_RCC_OscConfig+0xe8c>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002408:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800240c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002416:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002424:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	4b86      	ldr	r3, [pc, #536]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002458:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800245c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002460:	6011      	str	r1, [r2, #0]
 8002462:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002466:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	fa92 f1a2 	rbit	r1, r2
 8002470:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002474:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002478:	6011      	str	r1, [r2, #0]
  return result;
 800247a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800247e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f43f af7f 	beq.w	80023a0 <HAL_RCC_OscConfig+0xdd8>
 80024a2:	e0dd      	b.n	8002660 <HAL_RCC_OscConfig+0x1098>
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024d2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	461a      	mov	r2, r3
 80024e6:	2300      	movs	r3, #0
 80024e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fd4d 	bl	8000f88 <HAL_GetTick>
 80024ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	e009      	b.n	8002508 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fd48 	bl	8000f88 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0ac      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
 8002508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002528:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800252c:	601a      	str	r2, [r3, #0]
  return result;
 800252e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002532:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002536:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0xf8a>
 800254c:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e027      	b.n	80025a2 <HAL_RCC_OscConfig+0xfda>
 8002552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002556:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800255a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002564:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002572:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025ae:	6011      	str	r1, [r2, #0]
 80025b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	fa92 f1a2 	rbit	r1, r2
 80025be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025c6:	6011      	str	r1, [r2, #0]
  return result;
 80025c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025cc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f042 0220 	orr.w	r2, r2, #32
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f002 021f 	and.w	r2, r2, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d182      	bne.n	80024f4 <HAL_RCC_OscConfig+0xf2c>
 80025ee:	e037      	b.n	8002660 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e02e      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_RCC_OscConfig+0x10a4>)
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002618:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	429a      	cmp	r2, r3
 800262a:	d117      	bne.n	800265c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800262c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002630:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002640:	429a      	cmp	r2, r3
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002650:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b09e      	sub	sp, #120	; 0x78
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e162      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b90      	ldr	r3, [pc, #576]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d910      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b8d      	ldr	r3, [pc, #564]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	498b      	ldr	r1, [pc, #556]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e14a      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	497f      	ldr	r1, [pc, #508]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80dc 	beq.w	800289c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d13c      	bne.n	8002766 <HAL_RCC_ClockConfig+0xf6>
 80026ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d102      	bne.n	8002716 <HAL_RCC_ClockConfig+0xa6>
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	e00f      	b.n	8002736 <HAL_RCC_ClockConfig+0xc6>
 8002716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
 8002724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002728:	663b      	str	r3, [r7, #96]	; 0x60
 800272a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800273a:	65ba      	str	r2, [r7, #88]	; 0x58
 800273c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800273e:	fa92 f2a2 	rbit	r2, r2
 8002742:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f042 0220 	orr.w	r2, r2, #32
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d17b      	bne.n	800285a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0f3      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d13c      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x178>
 800276e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002772:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d102      	bne.n	8002798 <HAL_RCC_ClockConfig+0x128>
 8002792:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_ClockConfig+0x148>
 8002798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
 80027a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80027be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c8:	fab2 f282 	clz	r2, r2
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f042 0220 	orr.w	r2, r2, #32
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f002 021f 	and.w	r2, r2, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d13a      	bne.n	800285a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b2      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
 80027e8:	2302      	movs	r3, #2
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1a0>
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e00d      	b.n	800282c <HAL_RCC_ClockConfig+0x1bc>
 8002810:	2302      	movs	r3, #2
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
 800281c:	2302      	movs	r3, #2
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2202      	movs	r2, #2
 800282e:	61ba      	str	r2, [r7, #24]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	fa92 f2a2 	rbit	r2, r2
 8002836:	617a      	str	r2, [r7, #20]
  return result;
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	fab2 f282 	clz	r2, r2
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f002 021f 	and.w	r2, r2, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e079      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	491a      	ldr	r1, [pc, #104]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800286c:	f7fe fb8c 	bl	8000f88 <HAL_GetTick>
 8002870:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7fe fb88 	bl	8000f88 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e061      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 020c 	and.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d1eb      	bne.n	8002874 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d214      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	4906      	ldr	r1, [pc, #24]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e040      	b.n	800294e <HAL_RCC_ClockConfig+0x2de>
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	491a      	ldr	r1, [pc, #104]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4912      	ldr	r1, [pc, #72]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002912:	f000 f829 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002916:	4601      	mov	r1, r0
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_RCC_ClockConfig+0x2e8>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002920:	22f0      	movs	r2, #240	; 0xf0
 8002922:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	fa92 f2a2 	rbit	r2, r2
 800292a:	60fa      	str	r2, [r7, #12]
  return result;
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	40d3      	lsrs	r3, r2
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x2ec>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	fa21 f303 	lsr.w	r3, r1, r3
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_RCC_ClockConfig+0x2f0>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_RCC_ClockConfig+0x2f4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fada 	bl	8000f00 <HAL_InitTick>
  
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3778      	adds	r7, #120	; 0x78
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	0800ad4c 	.word	0x0800ad4c
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b08b      	sub	sp, #44	; 0x2c
 800296c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x30>
 8002992:	2b08      	cmp	r3, #8
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x36>
 8002996:	e03f      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 800299a:	623b      	str	r3, [r7, #32]
      break;
 800299c:	e03f      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	fa92 f2a2 	rbit	r2, r2
 80029b0:	607a      	str	r2, [r7, #4]
  return result;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	40d3      	lsrs	r3, r2
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	220f      	movs	r2, #15
 80029cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	fa92 f2a2 	rbit	r2, r2
 80029d4:	60fa      	str	r2, [r7, #12]
  return result;
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	fab2 f282 	clz	r2, r2
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	40d3      	lsrs	r3, r2
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029f0:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002a00:	e007      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	623b      	str	r3, [r7, #32]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a1a:	623b      	str	r3, [r7, #32]
      break;
 8002a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	372c      	adds	r7, #44	; 0x2c
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	007a1200 	.word	0x007a1200
 8002a34:	0800ad64 	.word	0x0800ad64
 8002a38:	0800ad74 	.word	0x0800ad74

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a5a:	f7ff ffef 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a5e:	4601      	mov	r1, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	603a      	str	r2, [r7, #0]
  return result;
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	40d3      	lsrs	r3, r2
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	0800ad5c 	.word	0x0800ad5c

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a9e:	f7ff ffcd 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002aac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ab0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	603a      	str	r2, [r7, #0]
  return result;
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	40d3      	lsrs	r3, r2
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	0800ad5c 	.word	0x0800ad5c

08002adc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b092      	sub	sp, #72	; 0x48
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80d4 	beq.w	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b00:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10e      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b16:	61d3      	str	r3, [r2, #28]
 8002b18:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a41      	ldr	r2, [pc, #260]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7fe fa21 	bl	8000f88 <HAL_GetTick>
 8002b46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe fa1d 	bl	8000f88 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1d6      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b68:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8084 	beq.w	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d07c      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b88:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d04b      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7fe f9cd 	bl	8000f88 <HAL_GetTick>
 8002bee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe f9c9 	bl	8000f88 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e180      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
 8002c14:	2302      	movs	r3, #2
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d108      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c36:	4b01      	ldr	r3, [pc, #4]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	e00d      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	10908100 	.word	0x10908100
 8002c48:	2302      	movs	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2202      	movs	r2, #2
 8002c5a:	613a      	str	r2, [r7, #16]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	60fa      	str	r2, [r7, #12]
  return result;
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f002 021f 	and.w	r2, r2, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0b7      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c82:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	498c      	ldr	r1, [pc, #560]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4a87      	ldr	r2, [pc, #540]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb4:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	497f      	ldr	r1, [pc, #508]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4978      	ldr	r1, [pc, #480]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf0:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4970      	ldr	r1, [pc, #448]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d0e:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f023 0210 	bic.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4969      	ldr	r1, [pc, #420]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	4961      	ldr	r1, [pc, #388]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f023 0220 	bic.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	495a      	ldr	r1, [pc, #360]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	4952      	ldr	r1, [pc, #328]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d86:	4b4e      	ldr	r3, [pc, #312]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	494b      	ldr	r1, [pc, #300]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4943      	ldr	r1, [pc, #268]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	493c      	ldr	r1, [pc, #240]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002de0:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	4934      	ldr	r1, [pc, #208]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	492d      	ldr	r1, [pc, #180]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	491e      	ldr	r1, [pc, #120]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	490f      	ldr	r1, [pc, #60]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002eb2:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	4913      	ldr	r1, [pc, #76]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee4:	490b      	ldr	r1, [pc, #44]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3748      	adds	r7, #72	; 0x48
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e09d      	b.n	8003066 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3a:	d009      	beq.n	8002f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
 8002f42:	e005      	b.n	8002f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fdfc 	bl	8000b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f90:	d902      	bls.n	8002f98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e002      	b.n	8002f9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fa6:	d007      	beq.n	8002fb8 <HAL_SPI_Init+0xa0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb0:	d002      	beq.n	8002fb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	ea42 0103 	orr.w	r1, r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	f003 0204 	and.w	r2, r3, #4
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003034:	ea42 0103 	orr.w	r1, r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003054:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b08a      	sub	sp, #40	; 0x28
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800307c:	2301      	movs	r3, #1
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x26>
 8003090:	2302      	movs	r3, #2
 8003092:	e20a      	b.n	80034aa <HAL_SPI_TransmitReceive+0x43c>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800309c:	f7fd ff74 	bl	8000f88 <HAL_GetTick>
 80030a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80030b4:	887b      	ldrh	r3, [r7, #2]
 80030b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030b8:	7efb      	ldrb	r3, [r7, #27]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d00e      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x6e>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c4:	d106      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x66>
 80030ce:	7efb      	ldrb	r3, [r7, #27]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030da:	e1e0      	b.n	800349e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_SPI_TransmitReceive+0x80>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SPI_TransmitReceive+0x80>
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030f4:	e1d3      	b.n	800349e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d003      	beq.n	800310a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2205      	movs	r2, #5
 8003106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	887a      	ldrh	r2, [r7, #2]
 800311a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	887a      	ldrh	r2, [r7, #2]
 8003122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	887a      	ldrh	r2, [r7, #2]
 8003130:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	887a      	ldrh	r2, [r7, #2]
 8003136:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800314c:	d802      	bhi.n	8003154 <HAL_SPI_TransmitReceive+0xe6>
 800314e:	8a3b      	ldrh	r3, [r7, #16]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d908      	bls.n	8003166 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	e007      	b.n	8003176 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003174:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d007      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800319c:	f240 8081 	bls.w	80032a2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_SPI_TransmitReceive+0x140>
 80031a8:	8a7b      	ldrh	r3, [r7, #18]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d16d      	bne.n	800328a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d2:	e05a      	b.n	800328a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d11b      	bne.n	800321a <HAL_SPI_TransmitReceive+0x1ac>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d016      	beq.n	800321a <HAL_SPI_TransmitReceive+0x1ac>
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d113      	bne.n	800321a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d11c      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x1f4>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	b292      	uxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800325e:	2301      	movs	r3, #1
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003262:	f7fd fe91 	bl	8000f88 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326e:	429a      	cmp	r2, r3
 8003270:	d80b      	bhi.n	800328a <HAL_SPI_TransmitReceive+0x21c>
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d007      	beq.n	800328a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003288:	e109      	b.n	800349e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d19f      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x166>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d199      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x166>
 80032a0:	e0e3      	b.n	800346a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x244>
 80032aa:	8a7b      	ldrh	r3, [r7, #18]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 80cf 	bne.w	8003450 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d912      	bls.n	80032e2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	1c9a      	adds	r2, r3, #2
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b02      	subs	r3, #2
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032e0:	e0b6      	b.n	8003450 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003308:	e0a2      	b.n	8003450 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d134      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x314>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d02f      	beq.n	8003382 <HAL_SPI_TransmitReceive+0x314>
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	2b01      	cmp	r3, #1
 8003326:	d12c      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d912      	bls.n	8003358 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	1c9a      	adds	r2, r3, #2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b02      	subs	r3, #2
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003356:	e012      	b.n	800337e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d148      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x3b4>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d042      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d923      	bls.n	80033f0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	b292      	uxth	r2, r2
 80033b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	1c9a      	adds	r2, r3, #2
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b02      	subs	r3, #2
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d81f      	bhi.n	800341e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	e016      	b.n	800341e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f103 020c 	add.w	r2, r3, #12
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800341e:	2301      	movs	r3, #1
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003422:	f7fd fdb1 	bl	8000f88 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342e:	429a      	cmp	r2, r3
 8003430:	d803      	bhi.n	800343a <HAL_SPI_TransmitReceive+0x3cc>
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d102      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x3d2>
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800344e:	e026      	b.n	800349e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f af57 	bne.w	800330a <HAL_SPI_TransmitReceive+0x29c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f af50 	bne.w	800330a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f93e 	bl	80036f0 <SPI_EndRxTxTransaction>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003494:	e003      	b.n	800349e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3728      	adds	r7, #40	; 0x28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034c4:	f7fd fd60 	bl	8000f88 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4413      	add	r3, r2
 80034d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034d4:	f7fd fd58 	bl	8000f88 <HAL_GetTick>
 80034d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	015b      	lsls	r3, r3, #5
 80034e0:	0d1b      	lsrs	r3, r3, #20
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ea:	e054      	b.n	8003596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d050      	beq.n	8003596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f4:	f7fd fd48 	bl	8000f88 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	429a      	cmp	r2, r3
 8003502:	d902      	bls.n	800350a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d13d      	bne.n	8003586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003522:	d111      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352c:	d004      	beq.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003536:	d107      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003550:	d10f      	bne.n	8003572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e017      	b.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	3b01      	subs	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d19b      	bne.n	80034ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000

080035c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035d6:	f7fd fcd7 	bl	8000f88 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035e6:	f7fd fccf 	bl	8000f88 <HAL_GetTick>
 80035ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00da      	lsls	r2, r3, #3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	0d1b      	lsrs	r3, r3, #20
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800360c:	e060      	b.n	80036d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003614:	d107      	bne.n	8003626 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003624:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d050      	beq.n	80036d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800362e:	f7fd fcab 	bl	8000f88 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	429a      	cmp	r2, r3
 800363c:	d902      	bls.n	8003644 <SPI_WaitFifoStateUntilTimeout+0x80>
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d13d      	bne.n	80036c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003652:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365c:	d111      	bne.n	8003682 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003666:	d004      	beq.n	8003672 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003670:	d107      	bne.n	8003682 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003680:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368a:	d10f      	bne.n	80036ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e010      	b.n	80036e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d196      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3728      	adds	r7, #40	; 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000

080036f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7ff ff5b 	bl	80035c4 <SPI_WaitFifoStateUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e027      	b.n	8003774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff fec0 	bl	80034b4 <SPI_WaitFlagStateUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e014      	b.n	8003774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2200      	movs	r2, #0
 8003752:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff ff34 	bl	80035c4 <SPI_WaitFifoStateUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e000      	b.n	8003774 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e040      	b.n	8003810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fa26 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	; 0x24
 80037a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8b6 	bl	800392c <UART_SetConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e022      	b.n	8003810 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa7e 	bl	8003cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb05 	bl	8003e18 <UART_CheckIdleState>
 800380e:	4603      	mov	r3, r0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382c:	2b20      	cmp	r3, #32
 800382e:	d178      	bne.n	8003922 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Transmit+0x24>
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e071      	b.n	8003924 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2221      	movs	r2, #33	; 0x21
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384e:	f7fd fb9b 	bl	8000f88 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386c:	d108      	bne.n	8003880 <HAL_UART_Transmit+0x68>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e003      	b.n	8003888 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003888:	e030      	b.n	80038ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fb67 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e03c      	b.n	8003924 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10b      	bne.n	80038c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	b292      	uxth	r2, r2
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	3302      	adds	r3, #2
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e008      	b.n	80038da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	b292      	uxth	r2, r2
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1c8      	bne.n	800388a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fb30 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e005      	b.n	8003924 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b92      	ldr	r3, [pc, #584]	; (8003ba0 <UART_SetConfig+0x274>)
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	430b      	orrs	r3, r1
 8003962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a80      	ldr	r2, [pc, #512]	; (8003ba4 <UART_SetConfig+0x278>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d120      	bne.n	80039ea <UART_SetConfig+0xbe>
 80039a8:	4b7f      	ldr	r3, [pc, #508]	; (8003ba8 <UART_SetConfig+0x27c>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d817      	bhi.n	80039e4 <UART_SetConfig+0xb8>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x90>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039d9 	.word	0x080039d9
 80039c4:	080039df 	.word	0x080039df
 80039c8:	080039d3 	.word	0x080039d3
 80039cc:	2301      	movs	r3, #1
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0b5      	b.n	8003b3e <UART_SetConfig+0x212>
 80039d2:	2302      	movs	r3, #2
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e0b2      	b.n	8003b3e <UART_SetConfig+0x212>
 80039d8:	2304      	movs	r3, #4
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e0af      	b.n	8003b3e <UART_SetConfig+0x212>
 80039de:	2308      	movs	r3, #8
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e0ac      	b.n	8003b3e <UART_SetConfig+0x212>
 80039e4:	2310      	movs	r3, #16
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e0a9      	b.n	8003b3e <UART_SetConfig+0x212>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6f      	ldr	r2, [pc, #444]	; (8003bac <UART_SetConfig+0x280>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d124      	bne.n	8003a3e <UART_SetConfig+0x112>
 80039f4:	4b6c      	ldr	r3, [pc, #432]	; (8003ba8 <UART_SetConfig+0x27c>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a00:	d011      	beq.n	8003a26 <UART_SetConfig+0xfa>
 8003a02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a06:	d817      	bhi.n	8003a38 <UART_SetConfig+0x10c>
 8003a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a0c:	d011      	beq.n	8003a32 <UART_SetConfig+0x106>
 8003a0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a12:	d811      	bhi.n	8003a38 <UART_SetConfig+0x10c>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <UART_SetConfig+0xf4>
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d006      	beq.n	8003a2c <UART_SetConfig+0x100>
 8003a1e:	e00b      	b.n	8003a38 <UART_SetConfig+0x10c>
 8003a20:	2300      	movs	r3, #0
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e08b      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a26:	2302      	movs	r3, #2
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e088      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e085      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a32:	2308      	movs	r3, #8
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e082      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e07f      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5b      	ldr	r2, [pc, #364]	; (8003bb0 <UART_SetConfig+0x284>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d124      	bne.n	8003a92 <UART_SetConfig+0x166>
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <UART_SetConfig+0x27c>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003a50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a54:	d011      	beq.n	8003a7a <UART_SetConfig+0x14e>
 8003a56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a5a:	d817      	bhi.n	8003a8c <UART_SetConfig+0x160>
 8003a5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a60:	d011      	beq.n	8003a86 <UART_SetConfig+0x15a>
 8003a62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a66:	d811      	bhi.n	8003a8c <UART_SetConfig+0x160>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <UART_SetConfig+0x148>
 8003a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a70:	d006      	beq.n	8003a80 <UART_SetConfig+0x154>
 8003a72:	e00b      	b.n	8003a8c <UART_SetConfig+0x160>
 8003a74:	2300      	movs	r3, #0
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e061      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e05e      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a80:	2304      	movs	r3, #4
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e05b      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a86:	2308      	movs	r3, #8
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e058      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e055      	b.n	8003b3e <UART_SetConfig+0x212>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a47      	ldr	r2, [pc, #284]	; (8003bb4 <UART_SetConfig+0x288>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d124      	bne.n	8003ae6 <UART_SetConfig+0x1ba>
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <UART_SetConfig+0x27c>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003aa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003aa8:	d011      	beq.n	8003ace <UART_SetConfig+0x1a2>
 8003aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003aae:	d817      	bhi.n	8003ae0 <UART_SetConfig+0x1b4>
 8003ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ab4:	d011      	beq.n	8003ada <UART_SetConfig+0x1ae>
 8003ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aba:	d811      	bhi.n	8003ae0 <UART_SetConfig+0x1b4>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <UART_SetConfig+0x19c>
 8003ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac4:	d006      	beq.n	8003ad4 <UART_SetConfig+0x1a8>
 8003ac6:	e00b      	b.n	8003ae0 <UART_SetConfig+0x1b4>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e037      	b.n	8003b3e <UART_SetConfig+0x212>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e034      	b.n	8003b3e <UART_SetConfig+0x212>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e031      	b.n	8003b3e <UART_SetConfig+0x212>
 8003ada:	2308      	movs	r3, #8
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e02e      	b.n	8003b3e <UART_SetConfig+0x212>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e02b      	b.n	8003b3e <UART_SetConfig+0x212>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a33      	ldr	r2, [pc, #204]	; (8003bb8 <UART_SetConfig+0x28c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d124      	bne.n	8003b3a <UART_SetConfig+0x20e>
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <UART_SetConfig+0x27c>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003af8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003afc:	d011      	beq.n	8003b22 <UART_SetConfig+0x1f6>
 8003afe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b02:	d817      	bhi.n	8003b34 <UART_SetConfig+0x208>
 8003b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b08:	d011      	beq.n	8003b2e <UART_SetConfig+0x202>
 8003b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b0e:	d811      	bhi.n	8003b34 <UART_SetConfig+0x208>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <UART_SetConfig+0x1f0>
 8003b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b18:	d006      	beq.n	8003b28 <UART_SetConfig+0x1fc>
 8003b1a:	e00b      	b.n	8003b34 <UART_SetConfig+0x208>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e00d      	b.n	8003b3e <UART_SetConfig+0x212>
 8003b22:	2302      	movs	r3, #2
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e00a      	b.n	8003b3e <UART_SetConfig+0x212>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e007      	b.n	8003b3e <UART_SetConfig+0x212>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e004      	b.n	8003b3e <UART_SetConfig+0x212>
 8003b34:	2310      	movs	r3, #16
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e001      	b.n	8003b3e <UART_SetConfig+0x212>
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b46:	d16b      	bne.n	8003c20 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003b48:	7ffb      	ldrb	r3, [r7, #31]
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d838      	bhi.n	8003bc0 <UART_SetConfig+0x294>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <UART_SetConfig+0x228>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003b81 	.word	0x08003b81
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	08003bc1 	.word	0x08003bc1
 8003b64:	08003b8f 	.word	0x08003b8f
 8003b68:	08003bc1 	.word	0x08003bc1
 8003b6c:	08003bc1 	.word	0x08003bc1
 8003b70:	08003bc1 	.word	0x08003bc1
 8003b74:	08003b97 	.word	0x08003b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7fe ff6c 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	61b8      	str	r0, [r7, #24]
        break;
 8003b7e:	e024      	b.n	8003bca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b80:	f7fe ff8a 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8003b84:	61b8      	str	r0, [r7, #24]
        break;
 8003b86:	e020      	b.n	8003bca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <UART_SetConfig+0x290>)
 8003b8a:	61bb      	str	r3, [r7, #24]
        break;
 8003b8c:	e01d      	b.n	8003bca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8e:	f7fe feeb 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8003b92:	61b8      	str	r0, [r7, #24]
        break;
 8003b94:	e019      	b.n	8003bca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9a:	61bb      	str	r3, [r7, #24]
        break;
 8003b9c:	e015      	b.n	8003bca <UART_SetConfig+0x29e>
 8003b9e:	bf00      	nop
 8003ba0:	efff69f3 	.word	0xefff69f3
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40004400 	.word	0x40004400
 8003bb0:	40004800 	.word	0x40004800
 8003bb4:	40004c00 	.word	0x40004c00
 8003bb8:	40005000 	.word	0x40005000
 8003bbc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77bb      	strb	r3, [r7, #30]
        break;
 8003bc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d073      	beq.n	8003cb8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	005a      	lsls	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b0f      	cmp	r3, #15
 8003bea:	d916      	bls.n	8003c1a <UART_SetConfig+0x2ee>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d212      	bcs.n	8003c1a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f023 030f 	bic.w	r3, r3, #15
 8003bfc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	89fa      	ldrh	r2, [r7, #14]
 8003c16:	60da      	str	r2, [r3, #12]
 8003c18:	e04e      	b.n	8003cb8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	77bb      	strb	r3, [r7, #30]
 8003c1e:	e04b      	b.n	8003cb8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c20:	7ffb      	ldrb	r3, [r7, #31]
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d827      	bhi.n	8003c76 <UART_SetConfig+0x34a>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0x300>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c51 	.word	0x08003c51
 8003c30:	08003c59 	.word	0x08003c59
 8003c34:	08003c61 	.word	0x08003c61
 8003c38:	08003c77 	.word	0x08003c77
 8003c3c:	08003c67 	.word	0x08003c67
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003c77 	.word	0x08003c77
 8003c48:	08003c77 	.word	0x08003c77
 8003c4c:	08003c6f 	.word	0x08003c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c50:	f7fe ff00 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 8003c54:	61b8      	str	r0, [r7, #24]
        break;
 8003c56:	e013      	b.n	8003c80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7fe ff1e 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	61b8      	str	r0, [r7, #24]
        break;
 8003c5e:	e00f      	b.n	8003c80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <UART_SetConfig+0x3a4>)
 8003c62:	61bb      	str	r3, [r7, #24]
        break;
 8003c64:	e00c      	b.n	8003c80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c66:	f7fe fe7f 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8003c6a:	61b8      	str	r0, [r7, #24]
        break;
 8003c6c:	e008      	b.n	8003c80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c72:	61bb      	str	r3, [r7, #24]
        break;
 8003c74:	e004      	b.n	8003c80 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c7e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	085a      	lsrs	r2, r3, #1
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	441a      	add	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b0f      	cmp	r3, #15
 8003c9e:	d909      	bls.n	8003cb4 <UART_SetConfig+0x388>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d205      	bcs.n	8003cb4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	e001      	b.n	8003cb8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	007a1200 	.word	0x007a1200

08003cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01a      	beq.n	8003dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d10a      	bne.n	8003dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b098      	sub	sp, #96	; 0x60
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e28:	f7fd f8ae 	bl	8000f88 <HAL_GetTick>
 8003e2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d12e      	bne.n	8003e9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f88c 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d021      	beq.n	8003e9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e74:	647b      	str	r3, [r7, #68]	; 0x44
 8003e76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e6      	bne.n	8003e56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e062      	b.n	8003f60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d149      	bne.n	8003f3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f856 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d03c      	beq.n	8003f3c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e6      	bne.n	8003ec2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f14:	61fa      	str	r2, [r7, #28]
 8003f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	617b      	str	r3, [r7, #20]
   return(result);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e011      	b.n	8003f60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3758      	adds	r7, #88	; 0x58
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	e049      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d045      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fd f801 	bl	8000f88 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e048      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d031      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d110      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f838 	bl	8004036 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e029      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe8:	d111      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f81e 	bl	8004036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e00f      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d0a6      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004036:	b480      	push	{r7}
 8004038:	b095      	sub	sp, #84	; 0x54
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405c:	643b      	str	r3, [r7, #64]	; 0x40
 800405e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004090:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d118      	bne.n	80040de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0310 	bic.w	r3, r3, #16
 80040c0:	647b      	str	r3, [r7, #68]	; 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040f2:	bf00      	nop
 80040f4:	3754      	adds	r7, #84	; 0x54
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <acc_rss_activate>:
 8004100:	b510      	push	{r4, lr}
 8004102:	4c18      	ldr	r4, [pc, #96]	; (8004164 <acc_rss_activate+0x64>)
 8004104:	7823      	ldrb	r3, [r4, #0]
 8004106:	b9c3      	cbnz	r3, 800413a <acc_rss_activate+0x3a>
 8004108:	b1a8      	cbz	r0, 8004136 <acc_rss_activate+0x36>
 800410a:	f000 faa7 	bl	800465c <acc_rss_integration_register>
 800410e:	b188      	cbz	r0, 8004134 <acc_rss_activate+0x34>
 8004110:	f000 f99c 	bl	800444c <acc_service_manager_activate>
 8004114:	b1e8      	cbz	r0, 8004152 <acc_rss_activate+0x52>
 8004116:	f000 ff95 	bl	8005044 <acc_sensor_manager_activate>
 800411a:	b1d0      	cbz	r0, 8004152 <acc_rss_activate+0x52>
 800411c:	2301      	movs	r3, #1
 800411e:	7023      	strb	r3, [r4, #0]
 8004120:	f000 fba0 	bl	8004864 <acc_rss_integration_log_level>
 8004124:	2801      	cmp	r0, #1
 8004126:	d905      	bls.n	8004134 <acc_rss_activate+0x34>
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <acc_rss_activate+0x68>)
 800412a:	4a10      	ldr	r2, [pc, #64]	; (800416c <acc_rss_activate+0x6c>)
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	4910      	ldr	r1, [pc, #64]	; (8004170 <acc_rss_activate+0x70>)
 8004130:	2002      	movs	r0, #2
 8004132:	4798      	blx	r3
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	bd10      	pop	{r4, pc}
 800413a:	f000 fb93 	bl	8004864 <acc_rss_integration_log_level>
 800413e:	2801      	cmp	r0, #1
 8004140:	d9f8      	bls.n	8004134 <acc_rss_activate+0x34>
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <acc_rss_activate+0x68>)
 8004144:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <acc_rss_activate+0x74>)
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	4909      	ldr	r1, [pc, #36]	; (8004170 <acc_rss_activate+0x70>)
 800414a:	2002      	movs	r0, #2
 800414c:	4798      	blx	r3
 800414e:	7823      	ldrb	r3, [r4, #0]
 8004150:	e7f1      	b.n	8004136 <acc_rss_activate+0x36>
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <acc_rss_activate+0x68>)
 8004154:	4a08      	ldr	r2, [pc, #32]	; (8004178 <acc_rss_activate+0x78>)
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	4905      	ldr	r1, [pc, #20]	; (8004170 <acc_rss_activate+0x70>)
 800415a:	2000      	movs	r0, #0
 800415c:	4798      	blx	r3
 800415e:	7823      	ldrb	r3, [r4, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	bd10      	pop	{r4, pc}
 8004164:	20000340 	.word	0x20000340
 8004168:	200003c8 	.word	0x200003c8
 800416c:	0800ad84 	.word	0x0800ad84
 8004170:	0800ada4 	.word	0x0800ada4
 8004174:	0800adc0 	.word	0x0800adc0
 8004178:	0800ada8 	.word	0x0800ada8

0800417c <acc_rss_deactivate>:
 800417c:	b510      	push	{r4, lr}
 800417e:	4c0b      	ldr	r4, [pc, #44]	; (80041ac <acc_rss_deactivate+0x30>)
 8004180:	7823      	ldrb	r3, [r4, #0]
 8004182:	b903      	cbnz	r3, 8004186 <acc_rss_deactivate+0xa>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	f000 f99b 	bl	80044c0 <acc_service_manager_deactivate>
 800418a:	f000 ff97 	bl	80050bc <acc_sensor_manager_deactivate>
 800418e:	f000 fb69 	bl	8004864 <acc_rss_integration_log_level>
 8004192:	2801      	cmp	r0, #1
 8004194:	d905      	bls.n	80041a2 <acc_rss_deactivate+0x26>
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <acc_rss_deactivate+0x34>)
 8004198:	4a06      	ldr	r2, [pc, #24]	; (80041b4 <acc_rss_deactivate+0x38>)
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	4906      	ldr	r1, [pc, #24]	; (80041b8 <acc_rss_deactivate+0x3c>)
 800419e:	2002      	movs	r0, #2
 80041a0:	4798      	blx	r3
 80041a2:	f000 fa9b 	bl	80046dc <acc_rss_integration_unregister>
 80041a6:	2300      	movs	r3, #0
 80041a8:	7023      	strb	r3, [r4, #0]
 80041aa:	bd10      	pop	{r4, pc}
 80041ac:	20000340 	.word	0x20000340
 80041b0:	200003c8 	.word	0x200003c8
 80041b4:	0800ade8 	.word	0x0800ade8
 80041b8:	0800ada4 	.word	0x0800ada4

080041bc <configuration_is_valid.part.0>:
 80041bc:	b508      	push	{r3, lr}
 80041be:	f000 fb51 	bl	8004864 <acc_rss_integration_log_level>
 80041c2:	b128      	cbz	r0, 80041d0 <configuration_is_valid.part.0+0x14>
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <configuration_is_valid.part.0+0x18>)
 80041c6:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <configuration_is_valid.part.0+0x1c>)
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	4904      	ldr	r1, [pc, #16]	; (80041dc <configuration_is_valid.part.0+0x20>)
 80041cc:	2001      	movs	r0, #1
 80041ce:	4798      	blx	r3
 80041d0:	2000      	movs	r0, #0
 80041d2:	bd08      	pop	{r3, pc}
 80041d4:	200003c8 	.word	0x200003c8
 80041d8:	0800ae0c 	.word	0x0800ae0c
 80041dc:	0800ae34 	.word	0x0800ae34

080041e0 <acc_rss_assembly_test_configuration_create>:
 80041e0:	b508      	push	{r3, lr}
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <acc_rss_assembly_test_configuration_create+0x18>)
 80041e4:	232f      	movs	r3, #47	; 0x2f
 80041e6:	210c      	movs	r1, #12
 80041e8:	2001      	movs	r0, #1
 80041ea:	f000 fb05 	bl	80047f8 <acc_rss_integration_mem_calloc_debug>
 80041ee:	b108      	cbz	r0, 80041f4 <acc_rss_assembly_test_configuration_create+0x14>
 80041f0:	2301      	movs	r3, #1
 80041f2:	6003      	str	r3, [r0, #0]
 80041f4:	bd08      	pop	{r3, pc}
 80041f6:	bf00      	nop
 80041f8:	0800ae34 	.word	0x0800ae34

080041fc <acc_rss_assembly_test_configuration_destroy>:
 80041fc:	b138      	cbz	r0, 800420e <acc_rss_assembly_test_configuration_destroy+0x12>
 80041fe:	b510      	push	{r4, lr}
 8004200:	4604      	mov	r4, r0
 8004202:	6800      	ldr	r0, [r0, #0]
 8004204:	f000 fb16 	bl	8004834 <acc_rss_integration_mem_free>
 8004208:	2300      	movs	r3, #0
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	bd10      	pop	{r4, pc}
 800420e:	4770      	bx	lr

08004210 <acc_rss_assembly_test_configuration_sensor_set>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	460d      	mov	r5, r1
 8004214:	4604      	mov	r4, r0
 8004216:	b108      	cbz	r0, 800421c <acc_rss_assembly_test_configuration_sensor_set+0xc>
 8004218:	6025      	str	r5, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	f7ff ffce 	bl	80041bc <configuration_is_valid.part.0>
 8004220:	2800      	cmp	r0, #0
 8004222:	d1f9      	bne.n	8004218 <acc_rss_assembly_test_configuration_sensor_set+0x8>
 8004224:	bd38      	pop	{r3, r4, r5, pc}
 8004226:	bf00      	nop

08004228 <acc_rss_assembly_test>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	460f      	mov	r7, r1
 800422e:	b0c2      	sub	sp, #264	; 0x108
 8004230:	4690      	mov	r8, r2
 8004232:	4681      	mov	r9, r0
 8004234:	b310      	cbz	r0, 800427c <acc_rss_assembly_test+0x54>
 8004236:	f109 0a04 	add.w	sl, r9, #4
 800423a:	4653      	mov	r3, sl
 800423c:	f109 060b 	add.w	r6, r9, #11
 8004240:	2400      	movs	r4, #0
 8004242:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004246:	b90d      	cbnz	r5, 800424c <acc_rss_assembly_test+0x24>
 8004248:	3401      	adds	r4, #1
 800424a:	b2a4      	uxth	r4, r4
 800424c:	429e      	cmp	r6, r3
 800424e:	d1f8      	bne.n	8004242 <acc_rss_assembly_test+0x1a>
 8004250:	b144      	cbz	r4, 8004264 <acc_rss_assembly_test+0x3c>
 8004252:	f8d9 0000 	ldr.w	r0, [r9]
 8004256:	f000 f959 	bl	800450c <acc_service_manager_is_service_created>
 800425a:	b1a0      	cbz	r0, 8004286 <acc_rss_assembly_test+0x5e>
 800425c:	2000      	movs	r0, #0
 800425e:	b042      	add	sp, #264	; 0x108
 8004260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004264:	f000 fafe 	bl	8004864 <acc_rss_integration_log_level>
 8004268:	2800      	cmp	r0, #0
 800426a:	d0f7      	beq.n	800425c <acc_rss_assembly_test+0x34>
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <acc_rss_assembly_test+0xd4>)
 800426e:	4a24      	ldr	r2, [pc, #144]	; (8004300 <acc_rss_assembly_test+0xd8>)
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	4924      	ldr	r1, [pc, #144]	; (8004304 <acc_rss_assembly_test+0xdc>)
 8004274:	2001      	movs	r0, #1
 8004276:	4798      	blx	r3
 8004278:	4620      	mov	r0, r4
 800427a:	e7f0      	b.n	800425e <acc_rss_assembly_test+0x36>
 800427c:	f7ff ff9e 	bl	80041bc <configuration_is_valid.part.0>
 8004280:	2800      	cmp	r0, #0
 8004282:	d1d8      	bne.n	8004236 <acc_rss_assembly_test+0xe>
 8004284:	e7ea      	b.n	800425c <acc_rss_assembly_test+0x34>
 8004286:	2268      	movs	r2, #104	; 0x68
 8004288:	4601      	mov	r1, r0
 800428a:	4668      	mov	r0, sp
 800428c:	f004 f930 	bl	80084f0 <memset>
 8004290:	491d      	ldr	r1, [pc, #116]	; (8004308 <acc_rss_assembly_test+0xe0>)
 8004292:	4668      	mov	r0, sp
 8004294:	f000 f98e 	bl	80045b4 <acc_base_configuration_radar_engine_creation_set>
 8004298:	f8d9 1000 	ldr.w	r1, [r9]
 800429c:	4668      	mov	r0, sp
 800429e:	f000 f965 	bl	800456c <acc_base_configuration_sensor_set>
 80042a2:	4668      	mov	r0, sp
 80042a4:	f000 f96e 	bl	8004584 <acc_base_configuration_repetition_mode_on_demand_set>
 80042a8:	f8b8 3000 	ldrh.w	r3, [r8]
 80042ac:	2b14      	cmp	r3, #20
 80042ae:	bf84      	itt	hi
 80042b0:	2314      	movhi	r3, #20
 80042b2:	f8a8 3000 	strhhi.w	r3, [r8]
 80042b6:	4651      	mov	r1, sl
 80042b8:	4668      	mov	r0, sp
 80042ba:	aa1a      	add	r2, sp, #104	; 0x68
 80042bc:	4643      	mov	r3, r8
 80042be:	f000 ff19 	bl	80050f4 <acc_sensor_manager_production_test>
 80042c2:	f8b8 4000 	ldrh.w	r4, [r8]
 80042c6:	2c00      	cmp	r4, #0
 80042c8:	d0c9      	beq.n	800425e <acc_rss_assembly_test+0x36>
 80042ca:	3c01      	subs	r4, #1
 80042cc:	b2a4      	uxth	r4, r4
 80042ce:	f1a7 0508 	sub.w	r5, r7, #8
 80042d2:	3402      	adds	r4, #2
 80042d4:	2301      	movs	r3, #1
 80042d6:	3f04      	subs	r7, #4
 80042d8:	aa1a      	add	r2, sp, #104	; 0x68
 80042da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80042de:	f852 1c08 	ldr.w	r1, [r2, #-8]
 80042e2:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 80042e6:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
 80042ea:	f807 2033 	strb.w	r2, [r7, r3, lsl #3]
 80042ee:	3301      	adds	r3, #1
 80042f0:	429c      	cmp	r4, r3
 80042f2:	d1f1      	bne.n	80042d8 <acc_rss_assembly_test+0xb0>
 80042f4:	b042      	add	sp, #264	; 0x108
 80042f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fa:	bf00      	nop
 80042fc:	200003c8 	.word	0x200003c8
 8004300:	0800ae48 	.word	0x0800ae48
 8004304:	0800ae34 	.word	0x0800ae34
 8004308:	08004d49 	.word	0x08004d49

0800430c <acc_service_deactivate>:
 800430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004310:	b120      	cbz	r0, 800431c <acc_service_deactivate+0x10>
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <acc_service_deactivate+0x78>)
 8004314:	6802      	ldr	r2, [r0, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	4604      	mov	r4, r0
 800431a:	d00e      	beq.n	800433a <acc_service_deactivate+0x2e>
 800431c:	4c1a      	ldr	r4, [pc, #104]	; (8004388 <acc_service_deactivate+0x7c>)
 800431e:	4a1b      	ldr	r2, [pc, #108]	; (800438c <acc_service_deactivate+0x80>)
 8004320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004322:	491b      	ldr	r1, [pc, #108]	; (8004390 <acc_service_deactivate+0x84>)
 8004324:	2000      	movs	r0, #0
 8004326:	4798      	blx	r3
 8004328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <acc_service_deactivate+0x88>)
 800432c:	4918      	ldr	r1, [pc, #96]	; (8004390 <acc_service_deactivate+0x84>)
 800432e:	2000      	movs	r0, #0
 8004330:	4798      	blx	r3
 8004332:	2500      	movs	r5, #0
 8004334:	4628      	mov	r0, r5
 8004336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <acc_service_deactivate+0x8c>)
 800433c:	781d      	ldrb	r5, [r3, #0]
 800433e:	b1dd      	cbz	r5, 8004378 <acc_service_deactivate+0x6c>
 8004340:	7a43      	ldrb	r3, [r0, #9]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f6      	bne.n	8004334 <acc_service_deactivate+0x28>
 8004346:	6843      	ldr	r3, [r0, #4]
 8004348:	2b2a      	cmp	r3, #42	; 0x2a
 800434a:	d815      	bhi.n	8004378 <acc_service_deactivate+0x6c>
 800434c:	4e13      	ldr	r6, [pc, #76]	; (800439c <acc_service_deactivate+0x90>)
 800434e:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 8004352:	b98f      	cbnz	r7, 8004378 <acc_service_deactivate+0x6c>
 8004354:	f04f 0801 	mov.w	r8, #1
 8004358:	3018      	adds	r0, #24
 800435a:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 800435e:	f000 febd 	bl	80050dc <acc_sensor_manager_stop_measurement>
 8004362:	6863      	ldr	r3, [r4, #4]
 8004364:	2b2a      	cmp	r3, #42	; 0x2a
 8004366:	d809      	bhi.n	800437c <acc_service_deactivate+0x70>
 8004368:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 800436c:	7057      	strb	r7, [r2, #1]
 800436e:	f884 8009 	strb.w	r8, [r4, #9]
 8004372:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 8004376:	e7dd      	b.n	8004334 <acc_service_deactivate+0x28>
 8004378:	4c03      	ldr	r4, [pc, #12]	; (8004388 <acc_service_deactivate+0x7c>)
 800437a:	e7d5      	b.n	8004328 <acc_service_deactivate+0x1c>
 800437c:	f884 8009 	strb.w	r8, [r4, #9]
 8004380:	e7d8      	b.n	8004334 <acc_service_deactivate+0x28>
 8004382:	bf00      	nop
 8004384:	acc09ee8 	.word	0xacc09ee8
 8004388:	200003c8 	.word	0x200003c8
 800438c:	0800ae7c 	.word	0x0800ae7c
 8004390:	0800ae74 	.word	0x0800ae74
 8004394:	0800aea8 	.word	0x0800aea8
 8004398:	20000341 	.word	0x20000341
 800439c:	20000344 	.word	0x20000344

080043a0 <acc_service_set_module_active>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <acc_service_set_module_active+0x8>)
 80043a2:	7018      	strb	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000341 	.word	0x20000341

080043ac <acc_service_handle_valid>:
 80043ac:	b508      	push	{r3, lr}
 80043ae:	b118      	cbz	r0, 80043b8 <acc_service_handle_valid+0xc>
 80043b0:	6802      	ldr	r2, [r0, #0]
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <acc_service_handle_valid+0x20>)
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d007      	beq.n	80043c8 <acc_service_handle_valid+0x1c>
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <acc_service_handle_valid+0x24>)
 80043ba:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <acc_service_handle_valid+0x28>)
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	4906      	ldr	r1, [pc, #24]	; (80043d8 <acc_service_handle_valid+0x2c>)
 80043c0:	2000      	movs	r0, #0
 80043c2:	4798      	blx	r3
 80043c4:	2000      	movs	r0, #0
 80043c6:	bd08      	pop	{r3, pc}
 80043c8:	2001      	movs	r0, #1
 80043ca:	bd08      	pop	{r3, pc}
 80043cc:	acc09ee8 	.word	0xacc09ee8
 80043d0:	200003c8 	.word	0x200003c8
 80043d4:	0800ae7c 	.word	0x0800ae7c
 80043d8:	0800ae74 	.word	0x0800ae74

080043dc <destroy_handle>:
 80043dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e0:	4e15      	ldr	r6, [pc, #84]	; (8004438 <destroy_handle+0x5c>)
 80043e2:	4605      	mov	r5, r0
 80043e4:	6874      	ldr	r4, [r6, #4]
 80043e6:	f000 fa3d 	bl	8004864 <acc_rss_integration_log_level>
 80043ea:	2803      	cmp	r0, #3
 80043ec:	d906      	bls.n	80043fc <destroy_handle+0x20>
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <destroy_handle+0x60>)
 80043f0:	686b      	ldr	r3, [r5, #4]
 80043f2:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80043f4:	4912      	ldr	r1, [pc, #72]	; (8004440 <destroy_handle+0x64>)
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <destroy_handle+0x68>)
 80043f8:	2004      	movs	r0, #4
 80043fa:	47b8      	blx	r7
 80043fc:	b144      	cbz	r4, 8004410 <destroy_handle+0x34>
 80043fe:	42ac      	cmp	r4, r5
 8004400:	d102      	bne.n	8004408 <destroy_handle+0x2c>
 8004402:	e016      	b.n	8004432 <destroy_handle+0x56>
 8004404:	42a5      	cmp	r5, r4
 8004406:	d00d      	beq.n	8004424 <destroy_handle+0x48>
 8004408:	4623      	mov	r3, r4
 800440a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 800440c:	2c00      	cmp	r4, #0
 800440e:	d1f9      	bne.n	8004404 <destroy_handle+0x28>
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <destroy_handle+0x60>)
 8004412:	686b      	ldr	r3, [r5, #4]
 8004414:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004416:	490a      	ldr	r1, [pc, #40]	; (8004440 <destroy_handle+0x64>)
 8004418:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <destroy_handle+0x6c>)
 800441a:	46a4      	mov	ip, r4
 800441c:	2000      	movs	r0, #0
 800441e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004422:	4760      	bx	ip
 8004424:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8004426:	655a      	str	r2, [r3, #84]	; 0x54
 8004428:	4628      	mov	r0, r5
 800442a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800442e:	f000 ba01 	b.w	8004834 <acc_rss_integration_mem_free>
 8004432:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8004434:	6073      	str	r3, [r6, #4]
 8004436:	e7f7      	b.n	8004428 <destroy_handle+0x4c>
 8004438:	2000039c 	.word	0x2000039c
 800443c:	200003c8 	.word	0x200003c8
 8004440:	0800aee8 	.word	0x0800aee8
 8004444:	0800aec4 	.word	0x0800aec4
 8004448:	0800aef8 	.word	0x0800aef8

0800444c <acc_service_manager_activate>:
 800444c:	b510      	push	{r4, lr}
 800444e:	4c05      	ldr	r4, [pc, #20]	; (8004464 <acc_service_manager_activate+0x18>)
 8004450:	7820      	ldrb	r0, [r4, #0]
 8004452:	b100      	cbz	r0, 8004456 <acc_service_manager_activate+0xa>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	2001      	movs	r0, #1
 8004458:	7020      	strb	r0, [r4, #0]
 800445a:	f7ff ffa1 	bl	80043a0 <acc_service_set_module_active>
 800445e:	7820      	ldrb	r0, [r4, #0]
 8004460:	bd10      	pop	{r4, pc}
 8004462:	bf00      	nop
 8004464:	2000039c 	.word	0x2000039c

08004468 <acc_service_destroy>:
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <acc_service_destroy+0x48>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b510      	push	{r4, lr}
 800446e:	b133      	cbz	r3, 800447e <acc_service_destroy+0x16>
 8004470:	4604      	mov	r4, r0
 8004472:	b118      	cbz	r0, 800447c <acc_service_destroy+0x14>
 8004474:	6800      	ldr	r0, [r0, #0]
 8004476:	f7ff ff99 	bl	80043ac <acc_service_handle_valid>
 800447a:	b960      	cbnz	r0, 8004496 <acc_service_destroy+0x2e>
 800447c:	bd10      	pop	{r4, pc}
 800447e:	f000 f9f1 	bl	8004864 <acc_rss_integration_log_level>
 8004482:	2800      	cmp	r0, #0
 8004484:	d0fa      	beq.n	800447c <acc_service_destroy+0x14>
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <acc_service_destroy+0x4c>)
 8004488:	4a0b      	ldr	r2, [pc, #44]	; (80044b8 <acc_service_destroy+0x50>)
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	490b      	ldr	r1, [pc, #44]	; (80044bc <acc_service_destroy+0x54>)
 800448e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004492:	2001      	movs	r0, #1
 8004494:	4718      	bx	r3
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	f7ff ff38 	bl	800430c <acc_service_deactivate>
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	68c3      	ldr	r3, [r0, #12]
 80044a0:	b10b      	cbz	r3, 80044a6 <acc_service_destroy+0x3e>
 80044a2:	4798      	blx	r3
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	f7ff ff99 	bl	80043dc <destroy_handle>
 80044aa:	2300      	movs	r3, #0
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	bd10      	pop	{r4, pc}
 80044b0:	2000039c 	.word	0x2000039c
 80044b4:	200003c8 	.word	0x200003c8
 80044b8:	0800af78 	.word	0x0800af78
 80044bc:	0800aee8 	.word	0x0800aee8

080044c0 <acc_service_manager_deactivate>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4c0e      	ldr	r4, [pc, #56]	; (80044fc <acc_service_manager_deactivate+0x3c>)
 80044c4:	7823      	ldrb	r3, [r4, #0]
 80044c6:	b1bb      	cbz	r3, 80044f8 <acc_service_manager_deactivate+0x38>
 80044c8:	6863      	ldr	r3, [r4, #4]
 80044ca:	b17b      	cbz	r3, 80044ec <acc_service_manager_deactivate+0x2c>
 80044cc:	1d25      	adds	r5, r4, #4
 80044ce:	4628      	mov	r0, r5
 80044d0:	f7ff ffca 	bl	8004468 <acc_service_destroy>
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f9      	bne.n	80044ce <acc_service_manager_deactivate+0xe>
 80044da:	f000 f9c3 	bl	8004864 <acc_rss_integration_log_level>
 80044de:	b128      	cbz	r0, 80044ec <acc_service_manager_deactivate+0x2c>
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <acc_service_manager_deactivate+0x40>)
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <acc_service_manager_deactivate+0x44>)
 80044e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e6:	4908      	ldr	r1, [pc, #32]	; (8004508 <acc_service_manager_deactivate+0x48>)
 80044e8:	2001      	movs	r0, #1
 80044ea:	4798      	blx	r3
 80044ec:	2000      	movs	r0, #0
 80044ee:	7020      	strb	r0, [r4, #0]
 80044f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044f4:	f7ff bf54 	b.w	80043a0 <acc_service_set_module_active>
 80044f8:	bd38      	pop	{r3, r4, r5, pc}
 80044fa:	bf00      	nop
 80044fc:	2000039c 	.word	0x2000039c
 8004500:	200003c8 	.word	0x200003c8
 8004504:	0800afb4 	.word	0x0800afb4
 8004508:	0800aee8 	.word	0x0800aee8

0800450c <acc_service_manager_is_service_created>:
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <acc_service_manager_is_service_created+0x1c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	b913      	cbnz	r3, 8004518 <acc_service_manager_is_service_created+0xc>
 8004512:	e006      	b.n	8004522 <acc_service_manager_is_service_created+0x16>
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	b123      	cbz	r3, 8004522 <acc_service_manager_is_service_created+0x16>
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4290      	cmp	r0, r2
 800451c:	d1fa      	bne.n	8004514 <acc_service_manager_is_service_created+0x8>
 800451e:	2001      	movs	r0, #1
 8004520:	4770      	bx	lr
 8004522:	4618      	mov	r0, r3
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	2000039c 	.word	0x2000039c

0800452c <acc_version_get>:
 800452c:	4800      	ldr	r0, [pc, #0]	; (8004530 <acc_version_get+0x4>)
 800452e:	4770      	bx	lr
 8004530:	08009664 	.word	0x08009664

08004534 <configuration_is_valid.part.0>:
 8004534:	b508      	push	{r3, lr}
 8004536:	f000 f995 	bl	8004864 <acc_rss_integration_log_level>
 800453a:	b128      	cbz	r0, 8004548 <configuration_is_valid.part.0+0x14>
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <configuration_is_valid.part.0+0x18>)
 800453e:	4a04      	ldr	r2, [pc, #16]	; (8004550 <configuration_is_valid.part.0+0x1c>)
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	4904      	ldr	r1, [pc, #16]	; (8004554 <configuration_is_valid.part.0+0x20>)
 8004544:	2001      	movs	r0, #1
 8004546:	4798      	blx	r3
 8004548:	2000      	movs	r0, #0
 800454a:	bd08      	pop	{r3, pc}
 800454c:	200003c8 	.word	0x200003c8
 8004550:	0800b000 	.word	0x0800b000
 8004554:	0800b01c 	.word	0x0800b01c

08004558 <acc_base_configuration_sensor_get>:
 8004558:	b510      	push	{r4, lr}
 800455a:	4604      	mov	r4, r0
 800455c:	b108      	cbz	r0, 8004562 <acc_base_configuration_sensor_get+0xa>
 800455e:	68e0      	ldr	r0, [r4, #12]
 8004560:	bd10      	pop	{r4, pc}
 8004562:	f7ff ffe7 	bl	8004534 <configuration_is_valid.part.0>
 8004566:	2800      	cmp	r0, #0
 8004568:	d1f9      	bne.n	800455e <acc_base_configuration_sensor_get+0x6>
 800456a:	bd10      	pop	{r4, pc}

0800456c <acc_base_configuration_sensor_set>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	460d      	mov	r5, r1
 8004570:	4604      	mov	r4, r0
 8004572:	b108      	cbz	r0, 8004578 <acc_base_configuration_sensor_set+0xc>
 8004574:	60e5      	str	r5, [r4, #12]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	f7ff ffdc 	bl	8004534 <configuration_is_valid.part.0>
 800457c:	2800      	cmp	r0, #0
 800457e:	d1f9      	bne.n	8004574 <acc_base_configuration_sensor_set+0x8>
 8004580:	bd38      	pop	{r3, r4, r5, pc}
 8004582:	bf00      	nop

08004584 <acc_base_configuration_repetition_mode_on_demand_set>:
 8004584:	b510      	push	{r4, lr}
 8004586:	4604      	mov	r4, r0
 8004588:	b110      	cbz	r0, 8004590 <acc_base_configuration_repetition_mode_on_demand_set+0xc>
 800458a:	2301      	movs	r3, #1
 800458c:	7123      	strb	r3, [r4, #4]
 800458e:	bd10      	pop	{r4, pc}
 8004590:	f7ff ffd0 	bl	8004534 <configuration_is_valid.part.0>
 8004594:	2800      	cmp	r0, #0
 8004596:	d1f8      	bne.n	800458a <acc_base_configuration_repetition_mode_on_demand_set+0x6>
 8004598:	bd10      	pop	{r4, pc}
 800459a:	bf00      	nop

0800459c <acc_base_configuration_decrease_tx_emission_get>:
 800459c:	b510      	push	{r4, lr}
 800459e:	4604      	mov	r4, r0
 80045a0:	b110      	cbz	r0, 80045a8 <acc_base_configuration_decrease_tx_emission_get+0xc>
 80045a2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	f7ff ffc4 	bl	8004534 <configuration_is_valid.part.0>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d1f8      	bne.n	80045a2 <acc_base_configuration_decrease_tx_emission_get+0x6>
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	bf00      	nop

080045b4 <acc_base_configuration_radar_engine_creation_set>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	460d      	mov	r5, r1
 80045b8:	4604      	mov	r4, r0
 80045ba:	b108      	cbz	r0, 80045c0 <acc_base_configuration_radar_engine_creation_set+0xc>
 80045bc:	6025      	str	r5, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	f7ff ffb8 	bl	8004534 <configuration_is_valid.part.0>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d1f9      	bne.n	80045bc <acc_base_configuration_radar_engine_creation_set+0x8>
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
 80045ca:	bf00      	nop

080045cc <acc_base_configuration_repetition_mode_get>:
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4604      	mov	r4, r0
 80045d0:	b108      	cbz	r0, 80045d6 <acc_base_configuration_repetition_mode_get+0xa>
 80045d2:	7920      	ldrb	r0, [r4, #4]
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	f7ff ffad 	bl	8004534 <configuration_is_valid.part.0>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d1f9      	bne.n	80045d2 <acc_base_configuration_repetition_mode_get+0x6>
 80045de:	bd10      	pop	{r4, pc}

080045e0 <acc_base_configuration_update_rate_get>:
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4604      	mov	r4, r0
 80045e4:	b158      	cbz	r0, 80045fe <acc_base_configuration_update_rate_get+0x1e>
 80045e6:	7923      	ldrb	r3, [r4, #4]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d002      	beq.n	80045f2 <acc_base_configuration_update_rate_get+0x12>
 80045ec:	d904      	bls.n	80045f8 <acc_base_configuration_update_rate_get+0x18>
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d109      	bne.n	8004606 <acc_base_configuration_update_rate_get+0x26>
 80045f2:	ed94 0a02 	vldr	s0, [r4, #8]
 80045f6:	bd10      	pop	{r4, pc}
 80045f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800460c <acc_base_configuration_update_rate_get+0x2c>
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	f7ff ff99 	bl	8004534 <configuration_is_valid.part.0>
 8004602:	2800      	cmp	r0, #0
 8004604:	d1ef      	bne.n	80045e6 <acc_base_configuration_update_rate_get+0x6>
 8004606:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004610 <acc_base_configuration_update_rate_get+0x30>
 800460a:	bd10      	pop	{r4, pc}
 800460c:	7f800000 	.word	0x7f800000
 8004610:	7fc00000 	.word	0x7fc00000

08004614 <acc_base_configuration_integrator_get>:
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
 8004618:	b110      	cbz	r0, 8004620 <acc_base_configuration_integrator_get+0xc>
 800461a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800461e:	bd10      	pop	{r4, pc}
 8004620:	f7ff ff88 	bl	8004534 <configuration_is_valid.part.0>
 8004624:	2800      	cmp	r0, #0
 8004626:	d1f8      	bne.n	800461a <acc_base_configuration_integrator_get+0x6>
 8004628:	bd10      	pop	{r4, pc}
 800462a:	bf00      	nop

0800462c <acc_base_configuration_wg_duration_get>:
 800462c:	b510      	push	{r4, lr}
 800462e:	4604      	mov	r4, r0
 8004630:	b110      	cbz	r0, 8004638 <acc_base_configuration_wg_duration_get+0xc>
 8004632:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8004636:	bd10      	pop	{r4, pc}
 8004638:	f7ff ff7c 	bl	8004534 <configuration_is_valid.part.0>
 800463c:	2800      	cmp	r0, #0
 800463e:	d1f8      	bne.n	8004632 <acc_base_configuration_wg_duration_get+0x6>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	bf00      	nop

08004644 <acc_base_configuration_integrator_ramp_up_get>:
 8004644:	b510      	push	{r4, lr}
 8004646:	4604      	mov	r4, r0
 8004648:	b110      	cbz	r0, 8004650 <acc_base_configuration_integrator_ramp_up_get+0xc>
 800464a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 800464e:	bd10      	pop	{r4, pc}
 8004650:	f7ff ff70 	bl	8004534 <configuration_is_valid.part.0>
 8004654:	2800      	cmp	r0, #0
 8004656:	d1f8      	bne.n	800464a <acc_base_configuration_integrator_ramp_up_get+0x6>
 8004658:	bd10      	pop	{r4, pc}
 800465a:	bf00      	nop

0800465c <acc_rss_integration_register>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	6943      	ldr	r3, [r0, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02b      	beq.n	80046bc <acc_rss_integration_register+0x60>
 8004664:	6983      	ldr	r3, [r0, #24]
 8004666:	b34b      	cbz	r3, 80046bc <acc_rss_integration_register+0x60>
 8004668:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800466a:	b323      	cbz	r3, 80046b6 <acc_rss_integration_register+0x5a>
 800466c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800466e:	b32b      	cbz	r3, 80046bc <acc_rss_integration_register+0x60>
 8004670:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004672:	b31b      	cbz	r3, 80046bc <acc_rss_integration_register+0x60>
 8004674:	6883      	ldr	r3, [r0, #8]
 8004676:	b30b      	cbz	r3, 80046bc <acc_rss_integration_register+0x60>
 8004678:	68c3      	ldr	r3, [r0, #12]
 800467a:	b1fb      	cbz	r3, 80046bc <acc_rss_integration_register+0x60>
 800467c:	6903      	ldr	r3, [r0, #16]
 800467e:	b1eb      	cbz	r3, 80046bc <acc_rss_integration_register+0x60>
 8004680:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004682:	b313      	cbz	r3, 80046ca <acc_rss_integration_register+0x6e>
 8004684:	6802      	ldr	r2, [r0, #0]
 8004686:	2a2a      	cmp	r2, #42	; 0x2a
 8004688:	d81a      	bhi.n	80046c0 <acc_rss_integration_register+0x64>
 800468a:	6842      	ldr	r2, [r0, #4]
 800468c:	2a0f      	cmp	r2, #15
 800468e:	d917      	bls.n	80046c0 <acc_rss_integration_register+0x64>
 8004690:	69c2      	ldr	r2, [r0, #28]
 8004692:	b10a      	cbz	r2, 8004698 <acc_rss_integration_register+0x3c>
 8004694:	6a02      	ldr	r2, [r0, #32]
 8004696:	b19a      	cbz	r2, 80046c0 <acc_rss_integration_register+0x64>
 8004698:	4605      	mov	r5, r0
 800469a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800469c:	4c0c      	ldr	r4, [pc, #48]	; (80046d0 <acc_rss_integration_register+0x74>)
 800469e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046ac:	2301      	movs	r3, #1
 80046ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046b2:	4618      	mov	r0, r3
 80046b4:	bd38      	pop	{r3, r4, r5, pc}
 80046b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1d7      	bne.n	800466c <acc_rss_integration_register+0x10>
 80046bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80046be:	b123      	cbz	r3, 80046ca <acc_rss_integration_register+0x6e>
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <acc_rss_integration_register+0x78>)
 80046c2:	4905      	ldr	r1, [pc, #20]	; (80046d8 <acc_rss_integration_register+0x7c>)
 80046c4:	2000      	movs	r0, #0
 80046c6:	4798      	blx	r3
 80046c8:	2300      	movs	r3, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	bf00      	nop
 80046d0:	200003c8 	.word	0x200003c8
 80046d4:	0800b030 	.word	0x0800b030
 80046d8:	0800b044 	.word	0x0800b044

080046dc <acc_rss_integration_unregister>:
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <acc_rss_integration_unregister+0xc>)
 80046de:	223c      	movs	r2, #60	; 0x3c
 80046e0:	2100      	movs	r1, #0
 80046e2:	f003 bf05 	b.w	80084f0 <memset>
 80046e6:	bf00      	nop
 80046e8:	200003c8 	.word	0x200003c8

080046ec <acc_rss_integration_get_sensor_count>:
 80046ec:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <acc_rss_integration_get_sensor_count+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	200003c8 	.word	0x200003c8

080046f8 <acc_rss_integration_get_sensor_reference_frequency>:
 80046f8:	4b01      	ldr	r3, [pc, #4]	; (8004700 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4718      	bx	r3
 80046fe:	bf00      	nop
 8004700:	200003c8 	.word	0x200003c8

08004704 <acc_rss_integration_get_max_spi_transfer_size>:
 8004704:	4b01      	ldr	r3, [pc, #4]	; (800470c <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 8004706:	6858      	ldr	r0, [r3, #4]
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	200003c8 	.word	0x200003c8

08004710 <acc_rss_integration_sensor_device_power_on>:
 8004710:	4b01      	ldr	r3, [pc, #4]	; (8004718 <acc_rss_integration_sensor_device_power_on+0x8>)
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	4718      	bx	r3
 8004716:	bf00      	nop
 8004718:	200003c8 	.word	0x200003c8

0800471c <acc_rss_integration_sensor_device_power_off>:
 800471c:	4b01      	ldr	r3, [pc, #4]	; (8004724 <acc_rss_integration_sensor_device_power_off+0x8>)
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	4718      	bx	r3
 8004722:	bf00      	nop
 8004724:	200003c8 	.word	0x200003c8

08004728 <acc_rss_integration_sensor_device_hibernate_enter>:
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	b103      	cbz	r3, 8004730 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 800472e:	4718      	bx	r3
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	200003c8 	.word	0x200003c8

08004738 <acc_rss_integration_sensor_device_hibernate_exit>:
 8004738:	4b02      	ldr	r3, [pc, #8]	; (8004744 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	b103      	cbz	r3, 8004740 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 800473e:	4718      	bx	r3
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	200003c8 	.word	0x200003c8

08004748 <acc_rss_integration_is_hibernate_capable>:
 8004748:	4b02      	ldr	r3, [pc, #8]	; (8004754 <acc_rss_integration_is_hibernate_capable+0xc>)
 800474a:	69d8      	ldr	r0, [r3, #28]
 800474c:	3800      	subs	r0, #0
 800474e:	bf18      	it	ne
 8004750:	2001      	movne	r0, #1
 8004752:	4770      	bx	lr
 8004754:	200003c8 	.word	0x200003c8

08004758 <acc_rss_integration_wait_for_sensor_interrupt>:
 8004758:	4b01      	ldr	r3, [pc, #4]	; (8004760 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	4718      	bx	r3
 800475e:	bf00      	nop
 8004760:	200003c8 	.word	0x200003c8

08004764 <acc_rss_integration_sensor_device_transfer>:
 8004764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	4f10      	ldr	r7, [pc, #64]	; (80047ac <acc_rss_integration_sensor_device_transfer+0x48>)
 800476a:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 800476e:	f1be 0f00 	cmp.w	lr, #0
 8004772:	d003      	beq.n	800477c <acc_rss_integration_sensor_device_transfer+0x18>
 8004774:	4673      	mov	r3, lr
 8004776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800477a:	4718      	bx	r3
 800477c:	460c      	mov	r4, r1
 800477e:	4606      	mov	r6, r0
 8004780:	4611      	mov	r1, r2
 8004782:	4615      	mov	r5, r2
 8004784:	4620      	mov	r0, r4
 8004786:	4698      	mov	r8, r3
 8004788:	f001 f940 	bl	8005a0c <acc_utils_swap16_array>
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	4630      	mov	r0, r6
 8004790:	006a      	lsls	r2, r5, #1
 8004792:	4621      	mov	r1, r4
 8004794:	4798      	blx	r3
 8004796:	f1b8 0f00 	cmp.w	r8, #0
 800479a:	d101      	bne.n	80047a0 <acc_rss_integration_sensor_device_transfer+0x3c>
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	4629      	mov	r1, r5
 80047a2:	4620      	mov	r0, r4
 80047a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047a8:	f001 b930 	b.w	8005a0c <acc_utils_swap16_array>
 80047ac:	200003c8 	.word	0x200003c8

080047b0 <acc_rss_integration_mem_alloc_debug>:
 80047b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b4:	4f0c      	ldr	r7, [pc, #48]	; (80047e8 <acc_rss_integration_mem_alloc_debug+0x38>)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4688      	mov	r8, r1
 80047ba:	4616      	mov	r6, r2
 80047bc:	4605      	mov	r5, r0
 80047be:	4798      	blx	r3
 80047c0:	4604      	mov	r4, r0
 80047c2:	b150      	cbz	r0, 80047da <acc_rss_integration_mem_alloc_debug+0x2a>
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <acc_rss_integration_mem_alloc_debug+0x3c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b123      	cbz	r3, 80047d4 <acc_rss_integration_mem_alloc_debug+0x24>
 80047ca:	689f      	ldr	r7, [r3, #8]
 80047cc:	4642      	mov	r2, r8
 80047ce:	4633      	mov	r3, r6
 80047d0:	4629      	mov	r1, r5
 80047d2:	47b8      	blx	r7
 80047d4:	4620      	mov	r0, r4
 80047d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <acc_rss_integration_mem_alloc_debug+0x40>)
 80047de:	4905      	ldr	r1, [pc, #20]	; (80047f4 <acc_rss_integration_mem_alloc_debug+0x44>)
 80047e0:	4798      	blx	r3
 80047e2:	4620      	mov	r0, r4
 80047e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e8:	200003c8 	.word	0x200003c8
 80047ec:	200003a4 	.word	0x200003a4
 80047f0:	0800b054 	.word	0x0800b054
 80047f4:	0800b044 	.word	0x0800b044

080047f8 <acc_rss_integration_mem_calloc_debug>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	b190      	cbz	r0, 8004822 <acc_rss_integration_mem_calloc_debug+0x2a>
 80047fc:	460c      	mov	r4, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	fba0 3604 	umull	r3, r6, r0, r4
 8004806:	b97e      	cbnz	r6, 8004828 <acc_rss_integration_mem_calloc_debug+0x30>
 8004808:	fb04 f500 	mul.w	r5, r4, r0
 800480c:	4628      	mov	r0, r5
 800480e:	f7ff ffcf 	bl	80047b0 <acc_rss_integration_mem_alloc_debug>
 8004812:	4604      	mov	r4, r0
 8004814:	b118      	cbz	r0, 800481e <acc_rss_integration_mem_calloc_debug+0x26>
 8004816:	462a      	mov	r2, r5
 8004818:	4631      	mov	r1, r6
 800481a:	f003 fe69 	bl	80084f0 <memset>
 800481e:	4620      	mov	r0, r4
 8004820:	bd70      	pop	{r4, r5, r6, pc}
 8004822:	4604      	mov	r4, r0
 8004824:	4620      	mov	r0, r4
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <acc_rss_integration_mem_calloc_debug+0x38>)
 800482a:	21dd      	movs	r1, #221	; 0xdd
 800482c:	f000 ff82 	bl	8005734 <acc_assert_fail>
 8004830:	0800b044 	.word	0x0800b044

08004834 <acc_rss_integration_mem_free>:
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <acc_rss_integration_mem_free+0x1c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b510      	push	{r4, lr}
 800483a:	4604      	mov	r4, r0
 800483c:	b10b      	cbz	r3, 8004842 <acc_rss_integration_mem_free+0xe>
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4798      	blx	r3
 8004842:	4b04      	ldr	r3, [pc, #16]	; (8004854 <acc_rss_integration_mem_free+0x20>)
 8004844:	4620      	mov	r0, r4
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800484c:	4718      	bx	r3
 800484e:	bf00      	nop
 8004850:	200003a4 	.word	0x200003a4
 8004854:	200003c8 	.word	0x200003c8

08004858 <acc_rss_integration_get_time>:
 8004858:	4b01      	ldr	r3, [pc, #4]	; (8004860 <acc_rss_integration_get_time+0x8>)
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	4718      	bx	r3
 800485e:	bf00      	nop
 8004860:	200003c8 	.word	0x200003c8

08004864 <acc_rss_integration_log_level>:
 8004864:	4b01      	ldr	r3, [pc, #4]	; (800486c <acc_rss_integration_log_level+0x8>)
 8004866:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 800486a:	4770      	bx	lr
 800486c:	200003c8 	.word	0x200003c8

08004870 <initialize>:
 8004870:	2001      	movs	r0, #1
 8004872:	4770      	bx	lr

08004874 <set_calibration_context>:
 8004874:	2001      	movs	r0, #1
 8004876:	4770      	bx	lr

08004878 <destroy>:
 8004878:	b510      	push	{r4, lr}
 800487a:	4604      	mov	r4, r0
 800487c:	6940      	ldr	r0, [r0, #20]
 800487e:	b118      	cbz	r0, 8004888 <destroy+0x10>
 8004880:	f7ff ffd8 	bl	8004834 <acc_rss_integration_mem_free>
 8004884:	2300      	movs	r3, #0
 8004886:	6163      	str	r3, [r4, #20]
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop

0800488c <cbank_and_vana_calibration.isra.0>:
 800488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488e:	4604      	mov	r4, r0
 8004890:	7b00      	ldrb	r0, [r0, #12]
 8004892:	b087      	sub	sp, #28
 8004894:	b918      	cbnz	r0, 800489e <cbank_and_vana_calibration.isra.0+0x12>
 8004896:	73a0      	strb	r0, [r4, #14]
 8004898:	2001      	movs	r0, #1
 800489a:	b007      	add	sp, #28
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489e:	6927      	ldr	r7, [r4, #16]
 80048a0:	460d      	mov	r5, r1
 80048a2:	4616      	mov	r6, r2
 80048a4:	f7ff ff28 	bl	80046f8 <acc_rss_integration_get_sensor_reference_frequency>
 80048a8:	4639      	mov	r1, r7
 80048aa:	a801      	add	r0, sp, #4
 80048ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80048b0:	f001 f81e 	bl	80058f0 <acc_cpd_pll_divisors_calculate>
 80048b4:	b910      	cbnz	r0, 80048bc <cbank_and_vana_calibration.isra.0+0x30>
 80048b6:	73a0      	strb	r0, [r4, #14]
 80048b8:	b007      	add	sp, #28
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048bc:	4814      	ldr	r0, [pc, #80]	; (8004910 <cbank_and_vana_calibration.isra.0+0x84>)
 80048be:	f000 ff51 	bl	8005764 <acc_diagnostic_log_set_scope>
 80048c2:	6821      	ldr	r1, [r4, #0]
 80048c4:	4813      	ldr	r0, [pc, #76]	; (8004914 <cbank_and_vana_calibration.isra.0+0x88>)
 80048c6:	f000 ff75 	bl	80057b4 <acc_diagnostic_log_scalar>
 80048ca:	8879      	ldrh	r1, [r7, #2]
 80048cc:	4812      	ldr	r0, [pc, #72]	; (8004918 <cbank_and_vana_calibration.isra.0+0x8c>)
 80048ce:	f000 ff71 	bl	80057b4 <acc_diagnostic_log_scalar>
 80048d2:	88b9      	ldrh	r1, [r7, #4]
 80048d4:	4811      	ldr	r0, [pc, #68]	; (800491c <cbank_and_vana_calibration.isra.0+0x90>)
 80048d6:	f000 ff6d 	bl	80057b4 <acc_diagnostic_log_scalar>
 80048da:	88f9      	ldrh	r1, [r7, #6]
 80048dc:	4810      	ldr	r0, [pc, #64]	; (8004920 <cbank_and_vana_calibration.isra.0+0x94>)
 80048de:	f000 ff69 	bl	80057b4 <acc_diagnostic_log_scalar>
 80048e2:	8839      	ldrh	r1, [r7, #0]
 80048e4:	480f      	ldr	r0, [pc, #60]	; (8004924 <cbank_and_vana_calibration.isra.0+0x98>)
 80048e6:	f000 ff65 	bl	80057b4 <acc_diagnostic_log_scalar>
 80048ea:	887b      	ldrh	r3, [r7, #2]
 80048ec:	f8b7 c004 	ldrh.w	ip, [r7, #4]
 80048f0:	6831      	ldr	r1, [r6, #0]
 80048f2:	6828      	ldr	r0, [r5, #0]
 80048f4:	88fe      	ldrh	r6, [r7, #6]
 80048f6:	6825      	ldr	r5, [r4, #0]
 80048f8:	9501      	str	r5, [sp, #4]
 80048fa:	aa01      	add	r2, sp, #4
 80048fc:	893d      	ldrh	r5, [r7, #8]
 80048fe:	9302      	str	r3, [sp, #8]
 8004900:	6963      	ldr	r3, [r4, #20]
 8004902:	f8ad 5014 	strh.w	r5, [sp, #20]
 8004906:	e9cd c603 	strd	ip, r6, [sp, #12]
 800490a:	f001 f8a9 	bl	8005a60 <acc_cpd_cbank_and_vana_calibration>
 800490e:	e7c2      	b.n	8004896 <cbank_and_vana_calibration.isra.0+0xa>
 8004910:	0800b77c 	.word	0x0800b77c
 8004914:	0800b064 	.word	0x0800b064
 8004918:	0800b070 	.word	0x0800b070
 800491c:	0800b080 	.word	0x0800b080
 8004920:	0800b08c 	.word	0x0800b08c
 8004924:	0800b098 	.word	0x0800b098

08004928 <test_common>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	2301      	movs	r3, #1
 800492e:	b08d      	sub	sp, #52	; 0x34
 8004930:	7303      	strb	r3, [r0, #12]
 8004932:	460e      	mov	r6, r1
 8004934:	6885      	ldr	r5, [r0, #8]
 8004936:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800493a:	4604      	mov	r4, r0
 800493c:	f7ff ff04 	bl	8004748 <acc_rss_integration_is_hibernate_capable>
 8004940:	2300      	movs	r3, #0
 8004942:	4607      	mov	r7, r0
 8004944:	f8df e338 	ldr.w	lr, [pc, #824]	; 8004c80 <test_common+0x358>
 8004948:	f106 0904 	add.w	r9, r6, #4
 800494c:	a803      	add	r0, sp, #12
 800494e:	a901      	add	r1, sp, #4
 8004950:	461a      	mov	r2, r3
 8004952:	469c      	mov	ip, r3
 8004954:	2d00      	cmp	r5, #0
 8004956:	f000 80a2 	beq.w	8004a9e <test_common+0x176>
 800495a:	5caa      	ldrb	r2, [r5, r2]
 800495c:	f800 2b01 	strb.w	r2, [r0], #1
 8004960:	2b04      	cmp	r3, #4
 8004962:	f801 cb01 	strb.w	ip, [r1], #1
 8004966:	f040 8094 	bne.w	8004a92 <test_common+0x16a>
 800496a:	b917      	cbnz	r7, 8004972 <test_common+0x4a>
 800496c:	2301      	movs	r3, #1
 800496e:	f88d 3010 	strb.w	r3, [sp, #16]
 8004972:	7b23      	ldrb	r3, [r4, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f040 80e9 	bne.w	8004b4c <test_common+0x224>
 800497a:	f8df a304 	ldr.w	sl, [pc, #772]	; 8004c80 <test_common+0x358>
 800497e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8004c64 <test_common+0x33c>
 8004982:	2300      	movs	r3, #0
 8004984:	4640      	mov	r0, r8
 8004986:	b10d      	cbz	r5, 800498c <test_common+0x64>
 8004988:	5cea      	ldrb	r2, [r5, r3]
 800498a:	b9ea      	cbnz	r2, 80049c8 <test_common+0xa0>
 800498c:	2b03      	cmp	r3, #3
 800498e:	fa1f f883 	uxth.w	r8, r3
 8004992:	f000 80d3 	beq.w	8004b3c <test_common+0x214>
 8004996:	2200      	movs	r2, #0
 8004998:	4696      	mov	lr, r2
 800499a:	a901      	add	r1, sp, #4
 800499c:	f04f 0c01 	mov.w	ip, #1
 80049a0:	45c6      	cmp	lr, r8
 80049a2:	d06a      	beq.n	8004a7a <test_common+0x152>
 80049a4:	2a04      	cmp	r2, #4
 80049a6:	d160      	bne.n	8004a6a <test_common+0x142>
 80049a8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80049ac:	f8be 2000 	ldrh.w	r2, [lr]
 80049b0:	b138      	cbz	r0, 80049c2 <test_common+0x9a>
 80049b2:	eb00 08c2 	add.w	r8, r0, r2, lsl #3
 80049b6:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
 80049ba:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
 80049be:	f888 c004 	strb.w	ip, [r8, #4]
 80049c2:	3201      	adds	r2, #1
 80049c4:	f8ae 2000 	strh.w	r2, [lr]
 80049c8:	3301      	adds	r3, #1
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d1db      	bne.n	8004986 <test_common+0x5e>
 80049ce:	7b63      	ldrb	r3, [r4, #13]
 80049d0:	7323      	strb	r3, [r4, #12]
 80049d2:	b115      	cbz	r5, 80049da <test_common+0xb2>
 80049d4:	792a      	ldrb	r2, [r5, #4]
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	d17b      	bne.n	8004ad2 <test_common+0x1aa>
 80049da:	464a      	mov	r2, r9
 80049dc:	4631      	mov	r1, r6
 80049de:	4620      	mov	r0, r4
 80049e0:	f7ff ff54 	bl	800488c <cbank_and_vana_calibration.isra.0>
 80049e4:	4682      	mov	sl, r0
 80049e6:	2800      	cmp	r0, #0
 80049e8:	f000 811d 	beq.w	8004c26 <test_common+0x2fe>
 80049ec:	7b63      	ldrb	r3, [r4, #13]
 80049ee:	2204      	movs	r2, #4
 80049f0:	7122      	strb	r2, [r4, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d055      	beq.n	8004aa2 <test_common+0x17a>
 80049f6:	7ba2      	ldrb	r2, [r4, #14]
 80049f8:	2a00      	cmp	r2, #0
 80049fa:	d052      	beq.n	8004aa2 <test_common+0x17a>
 80049fc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8004a00:	8859      	ldrh	r1, [r3, #2]
 8004a02:	891f      	ldrh	r7, [r3, #8]
 8004a04:	6810      	ldr	r0, [r2, #0]
 8004a06:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 8004a0a:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f8ad 1018 	strh.w	r1, [sp, #24]
 8004a14:	2101      	movs	r1, #1
 8004a16:	f8ad 701e 	strh.w	r7, [sp, #30]
 8004a1a:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004a1e:	7321      	strb	r1, [r4, #12]
 8004a20:	f8ad e01a 	strh.w	lr, [sp, #26]
 8004a24:	f8ad c01c 	strh.w	ip, [sp, #28]
 8004a28:	9305      	str	r3, [sp, #20]
 8004a2a:	7913      	ldrb	r3, [r2, #4]
 8004a2c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8004a30:	2700      	movs	r7, #0
 8004a32:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004a36:	ab03      	add	r3, sp, #12
 8004a38:	aa05      	add	r2, sp, #20
 8004a3a:	e9cd 770a 	strd	r7, r7, [sp, #40]	; 0x28
 8004a3e:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8004a42:	69a7      	ldr	r7, [r4, #24]
 8004a44:	f002 fc1e 	bl	8007284 <acc_cpd_supply_test>
 8004a48:	4682      	mov	sl, r0
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f000 80de 	beq.w	8004c0c <test_common+0x2e4>
 8004a50:	ab03      	add	r3, sp, #12
 8004a52:	f10d 0112 	add.w	r1, sp, #18
 8004a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a5a:	2a00      	cmp	r2, #0
 8004a5c:	bf18      	it	ne
 8004a5e:	f04f 0a00 	movne.w	sl, #0
 8004a62:	428b      	cmp	r3, r1
 8004a64:	d1f7      	bne.n	8004a56 <test_common+0x12e>
 8004a66:	7b63      	ldrb	r3, [r4, #13]
 8004a68:	e01f      	b.n	8004aaa <test_common+0x182>
 8004a6a:	f812 e00a 	ldrb.w	lr, [r2, sl]
 8004a6e:	45c6      	cmp	lr, r8
 8004a70:	f101 0101 	add.w	r1, r1, #1
 8004a74:	f102 0201 	add.w	r2, r2, #1
 8004a78:	d194      	bne.n	80049a4 <test_common+0x7c>
 8004a7a:	f891 e000 	ldrb.w	lr, [r1]
 8004a7e:	f1be 0f00 	cmp.w	lr, #0
 8004a82:	d08f      	beq.n	80049a4 <test_common+0x7c>
 8004a84:	f04f 0c00 	mov.w	ip, #0
 8004a88:	f884 c00d 	strb.w	ip, [r4, #13]
 8004a8c:	f04f 0c00 	mov.w	ip, #0
 8004a90:	e788      	b.n	80049a4 <test_common+0x7c>
 8004a92:	f813 200e 	ldrb.w	r2, [r3, lr]
 8004a96:	3301      	adds	r3, #1
 8004a98:	2d00      	cmp	r5, #0
 8004a9a:	f47f af5e 	bne.w	800495a <test_common+0x32>
 8004a9e:	462a      	mov	r2, r5
 8004aa0:	e75c      	b.n	800495c <test_common+0x34>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	69a7      	ldr	r7, [r4, #24]
 8004aa6:	7320      	strb	r0, [r4, #12]
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	69e1      	ldr	r1, [r4, #28]
 8004aac:	2f00      	cmp	r7, #0
 8004aae:	f000 80cc 	beq.w	8004c4a <test_common+0x322>
 8004ab2:	880a      	ldrh	r2, [r1, #0]
 8004ab4:	f894 e004 	ldrb.w	lr, [r4, #4]
 8004ab8:	486a      	ldr	r0, [pc, #424]	; (8004c64 <test_common+0x33c>)
 8004aba:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
 8004abe:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8004ac2:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 8004ac6:	f88c a004 	strb.w	sl, [ip, #4]
 8004aca:	3201      	adds	r2, #1
 8004acc:	800a      	strh	r2, [r1, #0]
 8004ace:	7323      	strb	r3, [r4, #12]
 8004ad0:	b10d      	cbz	r5, 8004ad6 <test_common+0x1ae>
 8004ad2:	796a      	ldrb	r2, [r5, #5]
 8004ad4:	b9ea      	cbnz	r2, 8004b12 <test_common+0x1ea>
 8004ad6:	7ba2      	ldrb	r2, [r4, #14]
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	f000 80ad 	beq.w	8004c38 <test_common+0x310>
 8004ade:	2205      	movs	r2, #5
 8004ae0:	7122      	strb	r2, [r4, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d151      	bne.n	8004b8a <test_common+0x262>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	69a6      	ldr	r6, [r4, #24]
 8004aea:	7323      	strb	r3, [r4, #12]
 8004aec:	461a      	mov	r2, r3
 8004aee:	69e1      	ldr	r1, [r4, #28]
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	f000 80ac 	beq.w	8004c4e <test_common+0x326>
 8004af6:	880b      	ldrh	r3, [r1, #0]
 8004af8:	f894 c004 	ldrb.w	ip, [r4, #4]
 8004afc:	4f59      	ldr	r7, [pc, #356]	; (8004c64 <test_common+0x33c>)
 8004afe:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 8004b02:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
 8004b06:	f846 7033 	str.w	r7, [r6, r3, lsl #3]
 8004b0a:	7102      	strb	r2, [r0, #4]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	800b      	strh	r3, [r1, #0]
 8004b10:	b125      	cbz	r5, 8004b1c <test_common+0x1f4>
 8004b12:	f895 a006 	ldrb.w	sl, [r5, #6]
 8004b16:	f1ba 0f00 	cmp.w	sl, #0
 8004b1a:	d10b      	bne.n	8004b34 <test_common+0x20c>
 8004b1c:	7b63      	ldrb	r3, [r4, #13]
 8004b1e:	7323      	strb	r3, [r4, #12]
 8004b20:	2206      	movs	r2, #6
 8004b22:	7122      	strb	r2, [r4, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d15f      	bne.n	8004be8 <test_common+0x2c0>
 8004b28:	69e2      	ldr	r2, [r4, #28]
 8004b2a:	8813      	ldrh	r3, [r2, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	8013      	strh	r3, [r2, #0]
 8004b30:	f04f 0a01 	mov.w	sl, #1
 8004b34:	4650      	mov	r0, sl
 8004b36:	b00d      	add	sp, #52	; 0x34
 8004b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3c:	2f00      	cmp	r7, #0
 8004b3e:	f43f af46 	beq.w	80049ce <test_common+0xa6>
 8004b42:	2200      	movs	r2, #0
 8004b44:	4696      	mov	lr, r2
 8004b46:	a901      	add	r1, sp, #4
 8004b48:	46bc      	mov	ip, r7
 8004b4a:	e729      	b.n	80049a0 <test_common+0x78>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	9305      	str	r3, [sp, #20]
 8004b50:	f7ff fdd2 	bl	80046f8 <acc_rss_integration_get_sensor_reference_frequency>
 8004b54:	a803      	add	r0, sp, #12
 8004b56:	f04f 0c00 	mov.w	ip, #0
 8004b5a:	9007      	str	r0, [sp, #28]
 8004b5c:	6871      	ldr	r1, [r6, #4]
 8004b5e:	6830      	ldr	r0, [r6, #0]
 8004b60:	ed8d 0a06 	vstr	s0, [sp, #24]
 8004b64:	ab01      	add	r3, sp, #4
 8004b66:	aa05      	add	r2, sp, #20
 8004b68:	f88d c020 	strb.w	ip, [sp, #32]
 8004b6c:	f001 f9c6 	bl	8005efc <acc_cpd_communication_test>
 8004b70:	4682      	mov	sl, r0
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f47f af01 	bne.w	800497a <test_common+0x52>
 8004b78:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <test_common+0x340>)
 8004b7a:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <test_common+0x344>)
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	493c      	ldr	r1, [pc, #240]	; (8004c70 <test_common+0x348>)
 8004b80:	4798      	blx	r3
 8004b82:	4650      	mov	r0, sl
 8004b84:	b00d      	add	sp, #52	; 0x34
 8004b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8a:	7ba3      	ldrb	r3, [r4, #14]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0aa      	beq.n	8004ae6 <test_common+0x1be>
 8004b90:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8004b94:	88d9      	ldrh	r1, [r3, #6]
 8004b96:	8898      	ldrh	r0, [r3, #4]
 8004b98:	f8ad 1018 	strh.w	r1, [sp, #24]
 8004b9c:	8859      	ldrh	r1, [r3, #2]
 8004b9e:	891b      	ldrh	r3, [r3, #8]
 8004ba0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8004ba4:	6810      	ldr	r0, [r2, #0]
 8004ba6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004baa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004bae:	2101      	movs	r1, #1
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004bb6:	7321      	strb	r1, [r4, #12]
 8004bb8:	9305      	str	r3, [sp, #20]
 8004bba:	7912      	ldrb	r2, [r2, #4]
 8004bbc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8004bc0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004bc4:	ab03      	add	r3, sp, #12
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	aa05      	add	r2, sp, #20
 8004bca:	9609      	str	r6, [sp, #36]	; 0x24
 8004bcc:	69a6      	ldr	r6, [r4, #24]
 8004bce:	f001 f923 	bl	8005e18 <acc_cpd_clock_test>
 8004bd2:	4682      	mov	sl, r0
 8004bd4:	b1d0      	cbz	r0, 8004c0c <test_common+0x2e4>
 8004bd6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004bda:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	bf0c      	ite	eq
 8004be2:	2201      	moveq	r2, #1
 8004be4:	2200      	movne	r2, #0
 8004be6:	e782      	b.n	8004aee <test_common+0x1c6>
 8004be8:	69a5      	ldr	r5, [r4, #24]
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	f001 fe60 	bl	80068b0 <acc_cpd_power_cycle_test>
 8004bf0:	69e2      	ldr	r2, [r4, #28]
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	d02d      	beq.n	8004c52 <test_common+0x32a>
 8004bf6:	7924      	ldrb	r4, [r4, #4]
 8004bf8:	491a      	ldr	r1, [pc, #104]	; (8004c64 <test_common+0x33c>)
 8004bfa:	8813      	ldrh	r3, [r2, #0]
 8004bfc:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8004c00:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
 8004c04:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004c08:	7128      	strb	r0, [r5, #4]
 8004c0a:	e78f      	b.n	8004b2c <test_common+0x204>
 8004c0c:	7921      	ldrb	r1, [r4, #4]
 8004c0e:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <test_common+0x340>)
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <test_common+0x33c>)
 8004c12:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004c14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c18:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <test_common+0x34c>)
 8004c1a:	4915      	ldr	r1, [pc, #84]	; (8004c70 <test_common+0x348>)
 8004c1c:	47a0      	blx	r4
 8004c1e:	4650      	mov	r0, sl
 8004c20:	b00d      	add	sp, #52	; 0x34
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c26:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <test_common+0x340>)
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <test_common+0x350>)
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	4910      	ldr	r1, [pc, #64]	; (8004c70 <test_common+0x348>)
 8004c2e:	4798      	blx	r3
 8004c30:	4650      	mov	r0, sl
 8004c32:	b00d      	add	sp, #52	; 0x34
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	464a      	mov	r2, r9
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f7ff fe25 	bl	800488c <cbank_and_vana_calibration.isra.0>
 8004c42:	4682      	mov	sl, r0
 8004c44:	b138      	cbz	r0, 8004c56 <test_common+0x32e>
 8004c46:	7b63      	ldrb	r3, [r4, #13]
 8004c48:	e749      	b.n	8004ade <test_common+0x1b6>
 8004c4a:	880a      	ldrh	r2, [r1, #0]
 8004c4c:	e73d      	b.n	8004aca <test_common+0x1a2>
 8004c4e:	880b      	ldrh	r3, [r1, #0]
 8004c50:	e75c      	b.n	8004b0c <test_common+0x1e4>
 8004c52:	8813      	ldrh	r3, [r2, #0]
 8004c54:	e76a      	b.n	8004b2c <test_common+0x204>
 8004c56:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <test_common+0x340>)
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <test_common+0x354>)
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5c:	4904      	ldr	r1, [pc, #16]	; (8004c70 <test_common+0x348>)
 8004c5e:	4798      	blx	r3
 8004c60:	e768      	b.n	8004b34 <test_common+0x20c>
 8004c62:	bf00      	nop
 8004c64:	0800b208 	.word	0x0800b208
 8004c68:	200003c8 	.word	0x200003c8
 8004c6c:	0800b0a8 	.word	0x0800b0a8
 8004c70:	0800b0c4 	.word	0x0800b0c4
 8004c74:	0800b0f8 	.word	0x0800b0f8
 8004c78:	0800b0dc 	.word	0x0800b0dc
 8004c7c:	0800b108 	.word	0x0800b108
 8004c80:	0800b1e0 	.word	0x0800b1e0

08004c84 <test>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	6940      	ldr	r0, [r0, #20]
 8004c88:	b090      	sub	sp, #64	; 0x40
 8004c8a:	6800      	ldr	r0, [r0, #0]
 8004c8c:	9008      	str	r0, [sp, #32]
 8004c8e:	2500      	movs	r5, #0
 8004c90:	2001      	movs	r0, #1
 8004c92:	910a      	str	r1, [sp, #40]	; 0x28
 8004c94:	920e      	str	r2, [sp, #56]	; 0x38
 8004c96:	a905      	add	r1, sp, #20
 8004c98:	aa01      	add	r2, sp, #4
 8004c9a:	461c      	mov	r4, r3
 8004c9c:	f10d 0302 	add.w	r3, sp, #2
 8004ca0:	950b      	str	r5, [sp, #44]	; 0x2c
 8004ca2:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004ca6:	9509      	str	r5, [sp, #36]	; 0x24
 8004ca8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
 8004cac:	910c      	str	r1, [sp, #48]	; 0x30
 8004cae:	920d      	str	r2, [sp, #52]	; 0x34
 8004cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cb2:	2c00      	cmp	r4, #0
 8004cb4:	d02f      	beq.n	8004d16 <test+0x92>
 8004cb6:	8823      	ldrh	r3, [r4, #0]
 8004cb8:	2b11      	cmp	r3, #17
 8004cba:	d921      	bls.n	8004d00 <test+0x7c>
 8004cbc:	f241 4108 	movw	r1, #5128	; 0x1408
 8004cc0:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <test+0xb4>)
 8004cc2:	9104      	str	r1, [sp, #16]
 8004cc4:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004cc8:	f7ff fd96 	bl	80047f8 <acc_rss_integration_mem_calloc_debug>
 8004ccc:	9003      	str	r0, [sp, #12]
 8004cce:	b168      	cbz	r0, 8004cec <test+0x68>
 8004cd0:	a903      	add	r1, sp, #12
 8004cd2:	a808      	add	r0, sp, #32
 8004cd4:	f7ff fe28 	bl	8004928 <test_common>
 8004cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	8023      	strh	r3, [r4, #0]
 8004cde:	4606      	mov	r6, r0
 8004ce0:	9803      	ldr	r0, [sp, #12]
 8004ce2:	f7ff fda7 	bl	8004834 <acc_rss_integration_mem_free>
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	b010      	add	sp, #64	; 0x40
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <test+0xb8>)
 8004cee:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <test+0xbc>)
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	4911      	ldr	r1, [pc, #68]	; (8004d38 <test+0xb4>)
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4798      	blx	r3
 8004cf8:	2600      	movs	r6, #0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	b010      	add	sp, #64	; 0x40
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <test+0xb8>)
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <test+0xc0>)
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	490c      	ldr	r1, [pc, #48]	; (8004d38 <test+0xb4>)
 8004d08:	4628      	mov	r0, r5
 8004d0a:	4798      	blx	r3
 8004d0c:	462e      	mov	r6, r5
 8004d0e:	4630      	mov	r0, r6
 8004d10:	8025      	strh	r5, [r4, #0]
 8004d12:	b010      	add	sp, #64	; 0x40
 8004d14:	bd70      	pop	{r4, r5, r6, pc}
 8004d16:	f241 4108 	movw	r1, #5128	; 0x1408
 8004d1a:	4a07      	ldr	r2, [pc, #28]	; (8004d38 <test+0xb4>)
 8004d1c:	9104      	str	r1, [sp, #16]
 8004d1e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004d22:	f7ff fd69 	bl	80047f8 <acc_rss_integration_mem_calloc_debug>
 8004d26:	9003      	str	r0, [sp, #12]
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0df      	beq.n	8004cec <test+0x68>
 8004d2c:	a903      	add	r1, sp, #12
 8004d2e:	a808      	add	r0, sp, #32
 8004d30:	f7ff fdfa 	bl	8004928 <test_common>
 8004d34:	4606      	mov	r6, r0
 8004d36:	e7d3      	b.n	8004ce0 <test+0x5c>
 8004d38:	0800b0c4 	.word	0x0800b0c4
 8004d3c:	200003c8 	.word	0x200003c8
 8004d40:	0800b148 	.word	0x0800b148
 8004d44:	0800b12c 	.word	0x0800b12c

08004d48 <acc_radar_engine_production_create>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <acc_radar_engine_production_create+0x2c>)
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	460e      	mov	r6, r1
 8004d50:	237d      	movs	r3, #125	; 0x7d
 8004d52:	2104      	movs	r1, #4
 8004d54:	2001      	movs	r0, #1
 8004d56:	f7ff fd4f 	bl	80047f8 <acc_rss_integration_mem_calloc_debug>
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	6168      	str	r0, [r5, #20]
 8004d5e:	b140      	cbz	r0, 8004d72 <acc_radar_engine_production_create+0x2a>
 8004d60:	4630      	mov	r0, r6
 8004d62:	f7ff fbf9 	bl	8004558 <acc_base_configuration_sensor_get>
 8004d66:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <acc_radar_engine_production_create+0x30>)
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <acc_radar_engine_production_create+0x34>)
 8004d6a:	6020      	str	r0, [r4, #0]
 8004d6c:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8004d70:	2001      	movs	r0, #1
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	0800b0c4 	.word	0x0800b0c4
 8004d78:	0800b1e4 	.word	0x0800b1e4
 8004d7c:	08004c85 	.word	0x08004c85

08004d80 <internal_buffer_processed_read>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	b085      	sub	sp, #20
 8004d86:	461f      	mov	r7, r3
 8004d88:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8004d8c:	9101      	str	r1, [sp, #4]
 8004d8e:	4682      	mov	sl, r0
 8004d90:	4689      	mov	r9, r1
 8004d92:	4615      	mov	r5, r2
 8004d94:	f7ff fcb6 	bl	8004704 <acc_rss_integration_get_max_spi_transfer_size>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004d9e:	9302      	str	r3, [sp, #8]
 8004da0:	2f00      	cmp	r7, #0
 8004da2:	d03d      	beq.n	8004e20 <internal_buffer_processed_read+0xa0>
 8004da4:	429c      	cmp	r4, r3
 8004da6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004daa:	bf14      	ite	ne
 8004dac:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8004db0:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8004db4:	f1a0 0803 	sub.w	r8, r0, #3
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	fa0f fb8b 	sxth.w	fp, fp
 8004dbe:	e024      	b.n	8004e0a <internal_buffer_processed_read+0x8a>
 8004dc0:	b2a6      	uxth	r6, r4
 8004dc2:	9900      	ldr	r1, [sp, #0]
 8004dc4:	f8a9 1004 	strh.w	r1, [r9, #4]
 8004dc8:	1e72      	subs	r2, r6, #1
 8004dca:	ea4b 0305 	orr.w	r3, fp, r5
 8004dce:	f8a9 2002 	strh.w	r2, [r9, #2]
 8004dd2:	f8a9 3000 	strh.w	r3, [r9]
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	2301      	movs	r3, #1
 8004dda:	4650      	mov	r0, sl
 8004ddc:	1ce2      	adds	r2, r4, #3
 8004dde:	f7ff fcc1 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 8004de2:	9802      	ldr	r0, [sp, #8]
 8004de4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004de8:	f8c9 0000 	str.w	r0, [r9]
 8004dec:	f8a9 3004 	strh.w	r3, [r9, #4]
 8004df0:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8004df4:	442e      	add	r6, r5
 8004df6:	f8d9 0000 	ldr.w	r0, [r9]
 8004dfa:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8004dfe:	9002      	str	r0, [sp, #8]
 8004e00:	1b3f      	subs	r7, r7, r4
 8004e02:	b2b5      	uxth	r5, r6
 8004e04:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004e08:	d00a      	beq.n	8004e20 <internal_buffer_processed_read+0xa0>
 8004e0a:	45b8      	cmp	r8, r7
 8004e0c:	4644      	mov	r4, r8
 8004e0e:	bf28      	it	cs
 8004e10:	463c      	movcs	r4, r7
 8004e12:	45b8      	cmp	r8, r7
 8004e14:	d2d4      	bcs.n	8004dc0 <internal_buffer_processed_read+0x40>
 8004e16:	e000      	b.n	8004e1a <internal_buffer_processed_read+0x9a>
 8004e18:	3c01      	subs	r4, #1
 8004e1a:	07e3      	lsls	r3, r4, #31
 8004e1c:	d4fc      	bmi.n	8004e18 <internal_buffer_processed_read+0x98>
 8004e1e:	e7cf      	b.n	8004dc0 <internal_buffer_processed_read+0x40>
 8004e20:	9801      	ldr	r0, [sp, #4]
 8004e22:	3006      	adds	r0, #6
 8004e24:	b005      	add	sp, #20
 8004e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop

08004e2c <acc_sensor_r2_buffer_write>:
 8004e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	ed2d 8b02 	vpush	{d8}
 8004e34:	b083      	sub	sp, #12
 8004e36:	4699      	mov	r9, r3
 8004e38:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 8004e3c:	4683      	mov	fp, r0
 8004e3e:	468a      	mov	sl, r1
 8004e40:	4615      	mov	r5, r2
 8004e42:	f7ff fc5f 	bl	8004704 <acc_rss_integration_get_max_spi_transfer_size>
 8004e46:	0880      	lsrs	r0, r0, #2
 8004e48:	1e43      	subs	r3, r0, #1
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	b357      	cbz	r7, 8004ea4 <acc_sensor_r2_buffer_write+0x78>
 8004e4e:	f10a 0302 	add.w	r3, sl, #2
 8004e52:	ee08 3a10 	vmov	s16, r3
 8004e56:	9b01      	ldr	r3, [sp, #4]
 8004e58:	42bb      	cmp	r3, r7
 8004e5a:	bf28      	it	cs
 8004e5c:	463b      	movcs	r3, r7
 8004e5e:	461c      	mov	r4, r3
 8004e60:	005e      	lsls	r6, r3, #1
 8004e62:	f445 4380 	orr.w	r3, r5, #16384	; 0x4000
 8004e66:	4648      	mov	r0, r9
 8004e68:	ee18 1a10 	vmov	r1, s16
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	f8aa 3000 	strh.w	r3, [sl]
 8004e72:	3601      	adds	r6, #1
 8004e74:	f000 fdd4 	bl	8005a20 <acc_utils_uint32_to_transfer_buffer>
 8004e78:	4425      	add	r5, r4
 8004e7a:	4632      	mov	r2, r6
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4651      	mov	r1, sl
 8004e80:	4658      	mov	r0, fp
 8004e82:	f7ff fc6f 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 8004e86:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8004e8a:	b2ad      	uxth	r5, r5
 8004e8c:	f1b8 0f00 	cmp.w	r8, #0
 8004e90:	d006      	beq.n	8004ea0 <acc_sensor_r2_buffer_write+0x74>
 8004e92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004e96:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	e9c8 6300 	strd	r6, r3, [r8]
 8004ea0:	1b3f      	subs	r7, r7, r4
 8004ea2:	d1d8      	bne.n	8004e56 <acc_sensor_r2_buffer_write+0x2a>
 8004ea4:	b003      	add	sp, #12
 8004ea6:	ecbd 8b02 	vpop	{d8}
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	bf00      	nop

08004eb0 <acc_sensor_r2_buffer_raw_read>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	ed2d 8b02 	vpush	{d8}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	4699      	mov	r9, r3
 8004ebc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8004ec0:	4683      	mov	fp, r0
 8004ec2:	4688      	mov	r8, r1
 8004ec4:	4615      	mov	r5, r2
 8004ec6:	f7ff fc1d 	bl	8004704 <acc_rss_integration_get_max_spi_transfer_size>
 8004eca:	0880      	lsrs	r0, r0, #2
 8004ecc:	1e83      	subs	r3, r0, #2
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	b3be      	cbz	r6, 8004f42 <acc_sensor_r2_buffer_raw_read+0x92>
 8004ed2:	42b3      	cmp	r3, r6
 8004ed4:	bf28      	it	cs
 8004ed6:	4633      	movcs	r3, r6
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	461c      	mov	r4, r3
 8004ede:	d835      	bhi.n	8004f4c <acc_sensor_r2_buffer_raw_read+0x9c>
 8004ee0:	f108 0306 	add.w	r3, r8, #6
 8004ee4:	ee08 3a10 	vmov	s16, r3
 8004ee8:	e007      	b.n	8004efa <acc_sensor_r2_buffer_raw_read+0x4a>
 8004eea:	9b01      	ldr	r3, [sp, #4]
 8004eec:	42b3      	cmp	r3, r6
 8004eee:	bf28      	it	cs
 8004ef0:	4633      	movcs	r3, r6
 8004ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef6:	461c      	mov	r4, r3
 8004ef8:	d828      	bhi.n	8004f4c <acc_sensor_r2_buffer_raw_read+0x9c>
 8004efa:	0063      	lsls	r3, r4, #1
 8004efc:	f103 0a03 	add.w	sl, r3, #3
 8004f00:	f445 4110 	orr.w	r1, r5, #36864	; 0x9000
 8004f04:	3b01      	subs	r3, #1
 8004f06:	f8a8 3002 	strh.w	r3, [r8, #2]
 8004f0a:	4652      	mov	r2, sl
 8004f0c:	f8a8 1000 	strh.w	r1, [r8]
 8004f10:	4658      	mov	r0, fp
 8004f12:	4641      	mov	r1, r8
 8004f14:	2301      	movs	r3, #1
 8004f16:	f7ff fc25 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 8004f1a:	ee18 0a10 	vmov	r0, s16
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4649      	mov	r1, r9
 8004f22:	f000 fd8b 	bl	8005a3c <acc_utils_transfer_buffer_to_uint32>
 8004f26:	b137      	cbz	r7, 8004f36 <acc_sensor_r2_buffer_raw_read+0x86>
 8004f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f2c:	eb02 024a 	add.w	r2, r2, sl, lsl #1
 8004f30:	3301      	adds	r3, #1
 8004f32:	e9c7 2300 	strd	r2, r3, [r7]
 8004f36:	4425      	add	r5, r4
 8004f38:	1b36      	subs	r6, r6, r4
 8004f3a:	b2ad      	uxth	r5, r5
 8004f3c:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8004f40:	d1d3      	bne.n	8004eea <acc_sensor_r2_buffer_raw_read+0x3a>
 8004f42:	b003      	add	sp, #12
 8004f44:	ecbd 8b02 	vpop	{d8}
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <acc_sensor_r2_buffer_raw_read+0xa4>)
 8004f4e:	214e      	movs	r1, #78	; 0x4e
 8004f50:	f000 fbf0 	bl	8005734 <acc_assert_fail>
 8004f54:	0800b224 	.word	0x0800b224

08004f58 <acc_sensor_r2_conf_write_instr>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8004f60:	4604      	mov	r4, r0
 8004f62:	9201      	str	r2, [sp, #4]
 8004f64:	f10d 010a 	add.w	r1, sp, #10
 8004f68:	a801      	add	r0, sp, #4
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8004f70:	f000 fd56 	bl	8005a20 <acc_utils_uint32_to_transfer_buffer>
 8004f74:	4620      	mov	r0, r4
 8004f76:	a902      	add	r1, sp, #8
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	f7ff fbf2 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 8004f80:	b004      	add	sp, #16
 8004f82:	bd10      	pop	{r4, pc}

08004f84 <acc_sensor_r2_prepare_load_confmem>:
 8004f84:	0849      	lsrs	r1, r1, #1
 8004f86:	b538      	push	{r3, r4, r5, lr}
 8004f88:	6010      	str	r0, [r2, #0]
 8004f8a:	461c      	mov	r4, r3
 8004f8c:	6019      	str	r1, [r3, #0]
 8004f8e:	4615      	mov	r5, r2
 8004f90:	f7ff fbb8 	bl	8004704 <acc_rss_integration_get_max_spi_transfer_size>
 8004f94:	6821      	ldr	r1, [r4, #0]
 8004f96:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8004f9a:	d807      	bhi.n	8004fac <acc_sensor_r2_prepare_load_confmem+0x28>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	3901      	subs	r1, #1
 8004fa0:	f021 0101 	bic.w	r1, r1, #1
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	6021      	str	r1, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	f7ff fbaa 	bl	8004704 <acc_rss_integration_get_max_spi_transfer_size>
 8004fb0:	0841      	lsrs	r1, r0, #1
 8004fb2:	e7f3      	b.n	8004f9c <acc_sensor_r2_prepare_load_confmem+0x18>

08004fb4 <acc_sensor_r2_load_confmem>:
 8004fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	1c5d      	adds	r5, r3, #1
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	4617      	mov	r7, r2
 8004fc2:	f7ff fc4f 	bl	8004864 <acc_rss_integration_log_level>
 8004fc6:	2803      	cmp	r0, #3
 8004fc8:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8004fcc:	d908      	bls.n	8004fe0 <acc_sensor_r2_load_confmem+0x2c>
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <acc_sensor_r2_load_confmem+0x60>)
 8004fd0:	9400      	str	r4, [sp, #0]
 8004fd2:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8004fd6:	4a10      	ldr	r2, [pc, #64]	; (8005018 <acc_sensor_r2_load_confmem+0x64>)
 8004fd8:	4910      	ldr	r1, [pc, #64]	; (800501c <acc_sensor_r2_load_confmem+0x68>)
 8004fda:	4633      	mov	r3, r6
 8004fdc:	2004      	movs	r0, #4
 8004fde:	47c8      	blx	r9
 8004fe0:	f7ff fb90 	bl	8004704 <acc_rss_integration_get_max_spi_transfer_size>
 8004fe4:	4540      	cmp	r0, r8
 8004fe6:	d208      	bcs.n	8004ffa <acc_sensor_r2_load_confmem+0x46>
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <acc_sensor_r2_load_confmem+0x60>)
 8004fea:	4a0d      	ldr	r2, [pc, #52]	; (8005020 <acc_sensor_r2_load_confmem+0x6c>)
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	490b      	ldr	r1, [pc, #44]	; (800501c <acc_sensor_r2_load_confmem+0x68>)
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	b003      	add	sp, #12
 8004ff4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ff8:	4718      	bx	r3
 8004ffa:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8004ffe:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005002:	4639      	mov	r1, r7
 8005004:	4630      	mov	r0, r6
 8005006:	2300      	movs	r3, #0
 8005008:	803c      	strh	r4, [r7, #0]
 800500a:	b003      	add	sp, #12
 800500c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005010:	f7ff bba8 	b.w	8004764 <acc_rss_integration_sensor_device_transfer>
 8005014:	200003c8 	.word	0x200003c8
 8005018:	0800b234 	.word	0x0800b234
 800501c:	0800b224 	.word	0x0800b224
 8005020:	0800b25c 	.word	0x0800b25c

08005024 <acc_sensor_r2_buffer_processed_verify_size>:
 8005024:	3103      	adds	r1, #3
 8005026:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800502a:	bf2c      	ite	cs
 800502c:	2001      	movcs	r0, #1
 800502e:	2000      	movcc	r0, #0
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop

08005034 <acc_sensor_r2_buffer_processed_read>:
 8005034:	b510      	push	{r4, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	2400      	movs	r4, #0
 800503a:	9400      	str	r4, [sp, #0]
 800503c:	f7ff fea0 	bl	8004d80 <internal_buffer_processed_read>
 8005040:	b002      	add	sp, #8
 8005042:	bd10      	pop	{r4, pc}

08005044 <acc_sensor_manager_activate>:
 8005044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005048:	4e18      	ldr	r6, [pc, #96]	; (80050ac <acc_sensor_manager_activate+0x68>)
 800504a:	7834      	ldrb	r4, [r6, #0]
 800504c:	b114      	cbz	r4, 8005054 <acc_sensor_manager_activate+0x10>
 800504e:	4620      	mov	r0, r4
 8005050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005054:	f7ff fb4a 	bl	80046ec <acc_rss_integration_get_sensor_count>
 8005058:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800505c:	4914      	ldr	r1, [pc, #80]	; (80050b0 <acc_sensor_manager_activate+0x6c>)
 800505e:	4f15      	ldr	r7, [pc, #84]	; (80050b4 <acc_sensor_manager_activate+0x70>)
 8005060:	00c0      	lsls	r0, r0, #3
 8005062:	f240 1253 	movw	r2, #339	; 0x153
 8005066:	f7ff fba3 	bl	80047b0 <acc_rss_integration_mem_alloc_debug>
 800506a:	6038      	str	r0, [r7, #0]
 800506c:	2800      	cmp	r0, #0
 800506e:	d0ee      	beq.n	800504e <acc_sensor_manager_activate+0xa>
 8005070:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80050b8 <acc_sensor_manager_activate+0x74>
 8005074:	4625      	mov	r5, r4
 8005076:	e00e      	b.n	8005096 <acc_sensor_manager_activate+0x52>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800507e:	4618      	mov	r0, r3
 8005080:	2248      	movs	r2, #72	; 0x48
 8005082:	2100      	movs	r1, #0
 8005084:	f003 fa34 	bl	80084f0 <memset>
 8005088:	3401      	adds	r4, #1
 800508a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800508e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8005092:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 8005096:	f7ff fb29 	bl	80046ec <acc_rss_integration_get_sensor_count>
 800509a:	42a0      	cmp	r0, r4
 800509c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80050a0:	d8ea      	bhi.n	8005078 <acc_sensor_manager_activate+0x34>
 80050a2:	2401      	movs	r4, #1
 80050a4:	7034      	strb	r4, [r6, #0]
 80050a6:	4620      	mov	r0, r4
 80050a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ac:	200003a8 	.word	0x200003a8
 80050b0:	0800b2b8 	.word	0x0800b2b8
 80050b4:	200003ac 	.word	0x200003ac
 80050b8:	ff800000 	.word	0xff800000

080050bc <acc_sensor_manager_deactivate>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4c05      	ldr	r4, [pc, #20]	; (80050d4 <acc_sensor_manager_deactivate+0x18>)
 80050c0:	7823      	ldrb	r3, [r4, #0]
 80050c2:	b903      	cbnz	r3, 80050c6 <acc_sensor_manager_deactivate+0xa>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <acc_sensor_manager_deactivate+0x1c>)
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	f7ff fbb3 	bl	8004834 <acc_rss_integration_mem_free>
 80050ce:	2300      	movs	r3, #0
 80050d0:	7023      	strb	r3, [r4, #0]
 80050d2:	bd10      	pop	{r4, pc}
 80050d4:	200003a8 	.word	0x200003a8
 80050d8:	200003ac 	.word	0x200003ac

080050dc <acc_sensor_manager_stop_measurement>:
 80050dc:	78c3      	ldrb	r3, [r0, #3]
 80050de:	b903      	cbnz	r3, 80050e2 <acc_sensor_manager_stop_measurement+0x6>
 80050e0:	4770      	bx	lr
 80050e2:	b510      	push	{r4, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	6980      	ldr	r0, [r0, #24]
 80050e8:	f7ff fb18 	bl	800471c <acc_rss_integration_sensor_device_power_off>
 80050ec:	2300      	movs	r3, #0
 80050ee:	70e3      	strb	r3, [r4, #3]
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop

080050f4 <acc_sensor_manager_production_test>:
 80050f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f8:	b08e      	sub	sp, #56	; 0x38
 80050fa:	4606      	mov	r6, r0
 80050fc:	4688      	mov	r8, r1
 80050fe:	4617      	mov	r7, r2
 8005100:	2100      	movs	r1, #0
 8005102:	2234      	movs	r2, #52	; 0x34
 8005104:	a801      	add	r0, sp, #4
 8005106:	461d      	mov	r5, r3
 8005108:	f003 f9f2 	bl	80084f0 <memset>
 800510c:	2300      	movs	r3, #0
 800510e:	4631      	mov	r1, r6
 8005110:	a801      	add	r0, sp, #4
 8005112:	461a      	mov	r2, r3
 8005114:	f000 fa64 	bl	80055e0 <acc_sweep_manager_prepare>
 8005118:	b930      	cbnz	r0, 8005128 <acc_sensor_manager_production_test+0x34>
 800511a:	4604      	mov	r4, r0
 800511c:	b105      	cbz	r5, 8005120 <acc_sensor_manager_production_test+0x2c>
 800511e:	8028      	strh	r0, [r5, #0]
 8005120:	4620      	mov	r0, r4
 8005122:	b00e      	add	sp, #56	; 0x38
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005128:	4630      	mov	r0, r6
 800512a:	f7ff fa15 	bl	8004558 <acc_base_configuration_sensor_get>
 800512e:	4606      	mov	r6, r0
 8005130:	f7ff faee 	bl	8004710 <acc_rss_integration_sensor_device_power_on>
 8005134:	462b      	mov	r3, r5
 8005136:	463a      	mov	r2, r7
 8005138:	4641      	mov	r1, r8
 800513a:	a801      	add	r0, sp, #4
 800513c:	f000 faf2 	bl	8005724 <acc_sweep_manager_production_test>
 8005140:	4604      	mov	r4, r0
 8005142:	4630      	mov	r0, r6
 8005144:	f7ff faea 	bl	800471c <acc_rss_integration_sensor_device_power_off>
 8005148:	a801      	add	r0, sp, #4
 800514a:	f000 fae3 	bl	8005714 <acc_sweep_manager_release>
 800514e:	4620      	mov	r0, r4
 8005150:	b00e      	add	sp, #56	; 0x38
 8005152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005156:	bf00      	nop

08005158 <acc_sensor_protocol_r2_prepare_load>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	4604      	mov	r4, r0
 800515e:	4608      	mov	r0, r1
 8005160:	4611      	mov	r1, r2
 8005162:	461a      	mov	r2, r3
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	f7ff ff0d 	bl	8004f84 <acc_sensor_r2_prepare_load_confmem>
 800516a:	2300      	movs	r3, #0
 800516c:	4620      	mov	r0, r4
 800516e:	f10d 020e 	add.w	r2, sp, #14
 8005172:	212a      	movs	r1, #42	; 0x2a
 8005174:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005178:	f000 fb4a 	bl	8005810 <acc_sensor_reg_read>
 800517c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005180:	065b      	lsls	r3, r3, #25
 8005182:	d436      	bmi.n	80051f2 <acc_sensor_protocol_r2_prepare_load+0x9a>
 8005184:	f10d 020e 	add.w	r2, sp, #14
 8005188:	2500      	movs	r5, #0
 800518a:	2111      	movs	r1, #17
 800518c:	4620      	mov	r0, r4
 800518e:	f8ad 500e 	strh.w	r5, [sp, #14]
 8005192:	f000 fb3d 	bl	8005810 <acc_sensor_reg_read>
 8005196:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800519a:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 800519e:	d00c      	beq.n	80051ba <acc_sensor_protocol_r2_prepare_load+0x62>
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80051a2:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <acc_sensor_protocol_r2_prepare_load+0xbc>)
 80051a4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80051a6:	491c      	ldr	r1, [pc, #112]	; (8005218 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 80051a8:	4623      	mov	r3, r4
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b0      	blx	r6
 80051ae:	4620      	mov	r0, r4
 80051b0:	f002 fb46 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 80051b4:	4628      	mov	r0, r5
 80051b6:	b004      	add	sp, #16
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
 80051ba:	2501      	movs	r5, #1
 80051bc:	4629      	mov	r1, r5
 80051be:	4620      	mov	r0, r4
 80051c0:	9500      	str	r5, [sp, #0]
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	2202      	movs	r2, #2
 80051c6:	f000 fb49 	bl	800585c <acc_sensor_reg_field_write>
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	461a      	mov	r2, r3
 80051ce:	4620      	mov	r0, r4
 80051d0:	9600      	str	r6, [sp, #0]
 80051d2:	2107      	movs	r1, #7
 80051d4:	f000 fb42 	bl	800585c <acc_sensor_reg_field_write>
 80051d8:	462a      	mov	r2, r5
 80051da:	4620      	mov	r0, r4
 80051dc:	2105      	movs	r1, #5
 80051de:	f000 fb2d 	bl	800583c <acc_sensor_reg_write>
 80051e2:	4620      	mov	r0, r4
 80051e4:	2203      	movs	r2, #3
 80051e6:	217a      	movs	r1, #122	; 0x7a
 80051e8:	f000 fb28 	bl	800583c <acc_sensor_reg_write>
 80051ec:	4628      	mov	r0, r5
 80051ee:	b004      	add	sp, #16
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
 80051f2:	f7ff fb37 	bl	8004864 <acc_rss_integration_log_level>
 80051f6:	b130      	cbz	r0, 8005206 <acc_sensor_protocol_r2_prepare_load+0xae>
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80051fa:	4a08      	ldr	r2, [pc, #32]	; (800521c <acc_sensor_protocol_r2_prepare_load+0xc4>)
 80051fc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80051fe:	4906      	ldr	r1, [pc, #24]	; (8005218 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8005200:	4623      	mov	r3, r4
 8005202:	2001      	movs	r0, #1
 8005204:	47a8      	blx	r5
 8005206:	4620      	mov	r0, r4
 8005208:	f002 fb1a 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 800520c:	e7ba      	b.n	8005184 <acc_sensor_protocol_r2_prepare_load+0x2c>
 800520e:	bf00      	nop
 8005210:	200003c8 	.word	0x200003c8
 8005214:	0800b32c 	.word	0x0800b32c
 8005218:	0800b318 	.word	0x0800b318
 800521c:	0800b2ec 	.word	0x0800b2ec

08005220 <acc_sensor_protocol_r2_run_program>:
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	b085      	sub	sp, #20
 8005224:	4604      	mov	r4, r0
 8005226:	460e      	mov	r6, r1
 8005228:	f7ff fb1c 	bl	8004864 <acc_rss_integration_log_level>
 800522c:	2803      	cmp	r0, #3
 800522e:	d907      	bls.n	8005240 <acc_sensor_protocol_r2_run_program+0x20>
 8005230:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <acc_sensor_protocol_r2_run_program+0x8c>)
 8005232:	9600      	str	r6, [sp, #0]
 8005234:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <acc_sensor_protocol_r2_run_program+0x90>)
 8005238:	491e      	ldr	r1, [pc, #120]	; (80052b4 <acc_sensor_protocol_r2_run_program+0x94>)
 800523a:	4623      	mov	r3, r4
 800523c:	2004      	movs	r0, #4
 800523e:	47a8      	blx	r5
 8005240:	f10d 020e 	add.w	r2, sp, #14
 8005244:	2700      	movs	r7, #0
 8005246:	2111      	movs	r1, #17
 8005248:	4620      	mov	r0, r4
 800524a:	f8ad 700e 	strh.w	r7, [sp, #14]
 800524e:	f000 fadf 	bl	8005810 <acc_sensor_reg_read>
 8005252:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8005256:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 800525a:	d11a      	bne.n	8005292 <acc_sensor_protocol_r2_run_program+0x72>
 800525c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005260:	d309      	bcc.n	8005276 <acc_sensor_protocol_r2_run_program+0x56>
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <acc_sensor_protocol_r2_run_program+0x8c>)
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <acc_sensor_protocol_r2_run_program+0x98>)
 8005266:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005268:	4912      	ldr	r1, [pc, #72]	; (80052b4 <acc_sensor_protocol_r2_run_program+0x94>)
 800526a:	4628      	mov	r0, r5
 800526c:	4633      	mov	r3, r6
 800526e:	47a0      	blx	r4
 8005270:	4628      	mov	r0, r5
 8005272:	b005      	add	sp, #20
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005276:	462a      	mov	r2, r5
 8005278:	4620      	mov	r0, r4
 800527a:	2110      	movs	r1, #16
 800527c:	f000 fade 	bl	800583c <acc_sensor_reg_write>
 8005280:	4620      	mov	r0, r4
 8005282:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 8005286:	2110      	movs	r1, #16
 8005288:	f000 fad8 	bl	800583c <acc_sensor_reg_write>
 800528c:	2001      	movs	r0, #1
 800528e:	b005      	add	sp, #20
 8005290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <acc_sensor_protocol_r2_run_program+0x8c>)
 8005294:	4a09      	ldr	r2, [pc, #36]	; (80052bc <acc_sensor_protocol_r2_run_program+0x9c>)
 8005296:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8005298:	4906      	ldr	r1, [pc, #24]	; (80052b4 <acc_sensor_protocol_r2_run_program+0x94>)
 800529a:	4623      	mov	r3, r4
 800529c:	4638      	mov	r0, r7
 800529e:	47a8      	blx	r5
 80052a0:	4620      	mov	r0, r4
 80052a2:	f002 facd 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 80052a6:	4638      	mov	r0, r7
 80052a8:	b005      	add	sp, #20
 80052aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ac:	200003c8 	.word	0x200003c8
 80052b0:	0800b35c 	.word	0x0800b35c
 80052b4:	0800b318 	.word	0x0800b318
 80052b8:	0800b3b0 	.word	0x0800b3b0
 80052bc:	0800b380 	.word	0x0800b380

080052c0 <acc_sensor_protocol_r2_terminate_program>:
 80052c0:	b530      	push	{r4, r5, lr}
 80052c2:	b083      	sub	sp, #12
 80052c4:	2300      	movs	r3, #0
 80052c6:	f10d 0206 	add.w	r2, sp, #6
 80052ca:	2111      	movs	r1, #17
 80052cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80052d0:	4605      	mov	r5, r0
 80052d2:	f000 fa9d 	bl	8005810 <acc_sensor_reg_read>
 80052d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80052da:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 80052de:	d10b      	bne.n	80052f8 <acc_sensor_protocol_r2_terminate_program+0x38>
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <acc_sensor_protocol_r2_terminate_program+0x48>)
 80052e2:	4a0a      	ldr	r2, [pc, #40]	; (800530c <acc_sensor_protocol_r2_terminate_program+0x4c>)
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	490a      	ldr	r1, [pc, #40]	; (8005310 <acc_sensor_protocol_r2_terminate_program+0x50>)
 80052e8:	4620      	mov	r0, r4
 80052ea:	4798      	blx	r3
 80052ec:	4628      	mov	r0, r5
 80052ee:	f002 faa7 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 80052f2:	4620      	mov	r0, r4
 80052f4:	b003      	add	sp, #12
 80052f6:	bd30      	pop	{r4, r5, pc}
 80052f8:	4628      	mov	r0, r5
 80052fa:	2201      	movs	r2, #1
 80052fc:	2174      	movs	r1, #116	; 0x74
 80052fe:	f000 fa9d 	bl	800583c <acc_sensor_reg_write>
 8005302:	2001      	movs	r0, #1
 8005304:	b003      	add	sp, #12
 8005306:	bd30      	pop	{r4, r5, pc}
 8005308:	200003c8 	.word	0x200003c8
 800530c:	0800b3cc 	.word	0x0800b3cc
 8005310:	0800b318 	.word	0x0800b318

08005314 <acc_sensor_protocol_r2_is_sensor_running>:
 8005314:	b500      	push	{lr}
 8005316:	b083      	sub	sp, #12
 8005318:	2300      	movs	r3, #0
 800531a:	f10d 0206 	add.w	r2, sp, #6
 800531e:	2111      	movs	r1, #17
 8005320:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005324:	f000 fa74 	bl	8005810 <acc_sensor_reg_read>
 8005328:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800532c:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005330:	b003      	add	sp, #12
 8005332:	f85d fb04 	ldr.w	pc, [sp], #4
 8005336:	bf00      	nop

08005338 <acc_sensor_protocol_r2_ack_event>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	2300      	movs	r3, #0
 800533e:	f10d 0206 	add.w	r2, sp, #6
 8005342:	2138      	movs	r1, #56	; 0x38
 8005344:	4605      	mov	r5, r0
 8005346:	f8ad 3006 	strh.w	r3, [sp, #6]
 800534a:	f000 fa61 	bl	8005810 <acc_sensor_reg_read>
 800534e:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8005352:	b114      	cbz	r4, 800535a <acc_sensor_protocol_r2_ack_event+0x22>
 8005354:	2001      	movs	r0, #1
 8005356:	b002      	add	sp, #8
 8005358:	bd70      	pop	{r4, r5, r6, pc}
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <acc_sensor_protocol_r2_ack_event+0x3c>)
 800535c:	4a06      	ldr	r2, [pc, #24]	; (8005378 <acc_sensor_protocol_r2_ack_event+0x40>)
 800535e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005360:	4906      	ldr	r1, [pc, #24]	; (800537c <acc_sensor_protocol_r2_ack_event+0x44>)
 8005362:	462b      	mov	r3, r5
 8005364:	4620      	mov	r0, r4
 8005366:	47b0      	blx	r6
 8005368:	4628      	mov	r0, r5
 800536a:	f002 fa69 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 800536e:	4620      	mov	r0, r4
 8005370:	b002      	add	sp, #8
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	200003c8 	.word	0x200003c8
 8005378:	0800b400 	.word	0x0800b400
 800537c:	0800b318 	.word	0x0800b318

08005380 <acc_sensor_protocol_r2_get_event>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	460c      	mov	r4, r1
 8005384:	b084      	sub	sp, #16
 8005386:	b301      	cbz	r1, 80053ca <acc_sensor_protocol_r2_get_event+0x4a>
 8005388:	f10d 020e 	add.w	r2, sp, #14
 800538c:	2128      	movs	r1, #40	; 0x28
 800538e:	4605      	mov	r5, r0
 8005390:	f000 fa3e 	bl	8005810 <acc_sensor_reg_read>
 8005394:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8005398:	8062      	strh	r2, [r4, #2]
 800539a:	b2d3      	uxtb	r3, r2
 800539c:	2b01      	cmp	r3, #1
 800539e:	7023      	strb	r3, [r4, #0]
 80053a0:	d026      	beq.n	80053f0 <acc_sensor_protocol_r2_get_event+0x70>
 80053a2:	d80c      	bhi.n	80053be <acc_sensor_protocol_r2_get_event+0x3e>
 80053a4:	4b22      	ldr	r3, [pc, #136]	; (8005430 <acc_sensor_protocol_r2_get_event+0xb0>)
 80053a6:	4a23      	ldr	r2, [pc, #140]	; (8005434 <acc_sensor_protocol_r2_get_event+0xb4>)
 80053a8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80053aa:	4923      	ldr	r1, [pc, #140]	; (8005438 <acc_sensor_protocol_r2_get_event+0xb8>)
 80053ac:	462b      	mov	r3, r5
 80053ae:	2000      	movs	r0, #0
 80053b0:	47a0      	blx	r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	f002 fa44 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 80053b8:	2000      	movs	r0, #0
 80053ba:	b004      	add	sp, #16
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	1e9a      	subs	r2, r3, #2
 80053c0:	2a09      	cmp	r2, #9
 80053c2:	d80b      	bhi.n	80053dc <acc_sensor_protocol_r2_get_event+0x5c>
 80053c4:	2001      	movs	r0, #1
 80053c6:	b004      	add	sp, #16
 80053c8:	bd70      	pop	{r4, r5, r6, pc}
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <acc_sensor_protocol_r2_get_event+0xb0>)
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <acc_sensor_protocol_r2_get_event+0xbc>)
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	4919      	ldr	r1, [pc, #100]	; (8005438 <acc_sensor_protocol_r2_get_event+0xb8>)
 80053d2:	4620      	mov	r0, r4
 80053d4:	4798      	blx	r3
 80053d6:	4620      	mov	r0, r4
 80053d8:	b004      	add	sp, #16
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	4a14      	ldr	r2, [pc, #80]	; (8005430 <acc_sensor_protocol_r2_get_event+0xb0>)
 80053de:	9500      	str	r5, [sp, #0]
 80053e0:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80053e2:	4915      	ldr	r1, [pc, #84]	; (8005438 <acc_sensor_protocol_r2_get_event+0xb8>)
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <acc_sensor_protocol_r2_get_event+0xc0>)
 80053e6:	2000      	movs	r0, #0
 80053e8:	47b0      	blx	r6
 80053ea:	2300      	movs	r3, #0
 80053ec:	7023      	strb	r3, [r4, #0]
 80053ee:	e7e0      	b.n	80053b2 <acc_sensor_protocol_r2_get_event+0x32>
 80053f0:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 80053f4:	ea4f 2112 	mov.w	r1, r2, lsr #8
 80053f8:	d203      	bcs.n	8005402 <acc_sensor_protocol_r2_get_event+0x82>
 80053fa:	4a12      	ldr	r2, [pc, #72]	; (8005444 <acc_sensor_protocol_r2_get_event+0xc4>)
 80053fc:	408b      	lsls	r3, r1
 80053fe:	401a      	ands	r2, r3
 8005400:	b96a      	cbnz	r2, 800541e <acc_sensor_protocol_r2_get_event+0x9e>
 8005402:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <acc_sensor_protocol_r2_get_event+0xb0>)
 8005404:	f242 1301 	movw	r3, #8449	; 0x2101
 8005408:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800540a:	8063      	strh	r3, [r4, #2]
 800540c:	2320      	movs	r3, #32
 800540e:	4a0e      	ldr	r2, [pc, #56]	; (8005448 <acc_sensor_protocol_r2_get_event+0xc8>)
 8005410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005414:	4a0d      	ldr	r2, [pc, #52]	; (800544c <acc_sensor_protocol_r2_get_event+0xcc>)
 8005416:	4908      	ldr	r1, [pc, #32]	; (8005438 <acc_sensor_protocol_r2_get_event+0xb8>)
 8005418:	2000      	movs	r0, #0
 800541a:	47b0      	blx	r6
 800541c:	e7c9      	b.n	80053b2 <acc_sensor_protocol_r2_get_event+0x32>
 800541e:	1e4b      	subs	r3, r1, #1
 8005420:	4a03      	ldr	r2, [pc, #12]	; (8005430 <acc_sensor_protocol_r2_get_event+0xb0>)
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b20      	cmp	r3, #32
 8005426:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005428:	d9f1      	bls.n	800540e <acc_sensor_protocol_r2_get_event+0x8e>
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <acc_sensor_protocol_r2_get_event+0xd0>)
 800542c:	e7f2      	b.n	8005414 <acc_sensor_protocol_r2_get_event+0x94>
 800542e:	bf00      	nop
 8005430:	200003c8 	.word	0x200003c8
 8005434:	0800b458 	.word	0x0800b458
 8005438:	0800b318 	.word	0x0800b318
 800543c:	0800b444 	.word	0x0800b444
 8005440:	0800b49c 	.word	0x0800b49c
 8005444:	00010016 	.word	0x00010016
 8005448:	0800b674 	.word	0x0800b674
 800544c:	0800b47c 	.word	0x0800b47c
 8005450:	0800b434 	.word	0x0800b434

08005454 <acc_sensor_protocol_r2_wait_for_event>:
 8005454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005458:	b087      	sub	sp, #28
 800545a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8005510 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 800545e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005524 <acc_sensor_protocol_r2_wait_for_event+0xd0>
 8005462:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8005518 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	4604      	mov	r4, r0
 800546a:	460e      	mov	r6, r1
 800546c:	4690      	mov	r8, r2
 800546e:	2500      	movs	r5, #0
 8005470:	e018      	b.n	80054a4 <acc_sensor_protocol_r2_wait_for_event+0x50>
 8005472:	4620      	mov	r0, r4
 8005474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005478:	f000 f9ca 	bl	8005810 <acc_sensor_reg_read>
 800547c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005480:	065b      	lsls	r3, r3, #25
 8005482:	d434      	bmi.n	80054ee <acc_sensor_protocol_r2_wait_for_event+0x9a>
 8005484:	f7ff f9ee 	bl	8004864 <acc_rss_integration_log_level>
 8005488:	4607      	mov	r7, r0
 800548a:	4623      	mov	r3, r4
 800548c:	4652      	mov	r2, sl
 800548e:	4649      	mov	r1, r9
 8005490:	2001      	movs	r0, #1
 8005492:	b117      	cbz	r7, 800549a <acc_sensor_protocol_r2_wait_for_event+0x46>
 8005494:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8005498:	47b8      	blx	r7
 800549a:	4545      	cmp	r5, r8
 800549c:	f105 0301 	add.w	r3, r5, #1
 80054a0:	d018      	beq.n	80054d4 <acc_sensor_protocol_r2_wait_for_event+0x80>
 80054a2:	461d      	mov	r5, r3
 80054a4:	4631      	mov	r1, r6
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7ff f956 	bl	8004758 <acc_rss_integration_wait_for_sensor_interrupt>
 80054ac:	f10d 0216 	add.w	r2, sp, #22
 80054b0:	212a      	movs	r1, #42	; 0x2a
 80054b2:	2300      	movs	r3, #0
 80054b4:	4607      	mov	r7, r0
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d1db      	bne.n	8005472 <acc_sensor_protocol_r2_wait_for_event+0x1e>
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80054bc:	4a15      	ldr	r2, [pc, #84]	; (8005514 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 80054be:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80054c0:	4915      	ldr	r1, [pc, #84]	; (8005518 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80054c2:	4623      	mov	r3, r4
 80054c4:	47a8      	blx	r5
 80054c6:	4620      	mov	r0, r4
 80054c8:	f002 f9ba 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 80054cc:	4638      	mov	r0, r7
 80054ce:	b007      	add	sp, #28
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	4a0e      	ldr	r2, [pc, #56]	; (8005510 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80054d6:	9400      	str	r4, [sp, #0]
 80054d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80054da:	490f      	ldr	r1, [pc, #60]	; (8005518 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80054dc:	4a0f      	ldr	r2, [pc, #60]	; (800551c <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 80054de:	462b      	mov	r3, r5
 80054e0:	2000      	movs	r0, #0
 80054e2:	47a0      	blx	r4
 80054e4:	2700      	movs	r7, #0
 80054e6:	4638      	mov	r0, r7
 80054e8:	b007      	add	sp, #28
 80054ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ee:	9903      	ldr	r1, [sp, #12]
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7ff ff45 	bl	8005380 <acc_sensor_protocol_r2_get_event>
 80054f6:	4607      	mov	r7, r0
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d1e7      	bne.n	80054cc <acc_sensor_protocol_r2_wait_for_event+0x78>
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 8005500:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8005502:	4905      	ldr	r1, [pc, #20]	; (8005518 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8005504:	4623      	mov	r3, r4
 8005506:	47a8      	blx	r5
 8005508:	4638      	mov	r0, r7
 800550a:	b007      	add	sp, #28
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	200003c8 	.word	0x200003c8
 8005514:	0800b4cc 	.word	0x0800b4cc
 8005518:	0800b318 	.word	0x0800b318
 800551c:	0800b518 	.word	0x0800b518
 8005520:	0800b554 	.word	0x0800b554
 8005524:	0800b4f4 	.word	0x0800b4f4

08005528 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	4616      	mov	r6, r2
 800552e:	461c      	mov	r4, r3
 8005530:	2264      	movs	r2, #100	; 0x64
 8005532:	ab03      	add	r3, sp, #12
 8005534:	4605      	mov	r5, r0
 8005536:	f7ff ff8d 	bl	8005454 <acc_sensor_protocol_r2_wait_for_event>
 800553a:	b168      	cbz	r0, 8005558 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 800553c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005540:	42b3      	cmp	r3, r6
 8005542:	d00b      	beq.n	800555c <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 8005544:	e9cd 3600 	strd	r3, r6, [sp]
 8005548:	4a08      	ldr	r2, [pc, #32]	; (800556c <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 800554a:	4b09      	ldr	r3, [pc, #36]	; (8005570 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 800554c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800554e:	4909      	ldr	r1, [pc, #36]	; (8005574 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8005550:	4a09      	ldr	r2, [pc, #36]	; (8005578 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8005552:	2000      	movs	r0, #0
 8005554:	47a0      	blx	r4
 8005556:	2000      	movs	r0, #0
 8005558:	b004      	add	sp, #16
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	2c00      	cmp	r4, #0
 800555e:	d0fb      	beq.n	8005558 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8005560:	4628      	mov	r0, r5
 8005562:	f7ff fee9 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 8005566:	b004      	add	sp, #16
 8005568:	bd70      	pop	{r4, r5, r6, pc}
 800556a:	bf00      	nop
 800556c:	200003c8 	.word	0x200003c8
 8005570:	0800b6f8 	.word	0x0800b6f8
 8005574:	0800b318 	.word	0x0800b318
 8005578:	0800b57c 	.word	0x0800b57c

0800557c <acc_sensor_protocol_r2_stop>:
 800557c:	b530      	push	{r4, r5, lr}
 800557e:	b083      	sub	sp, #12
 8005580:	460c      	mov	r4, r1
 8005582:	4605      	mov	r5, r0
 8005584:	f7ff fe9c 	bl	80052c0 <acc_sensor_protocol_r2_terminate_program>
 8005588:	b910      	cbnz	r0, 8005590 <acc_sensor_protocol_r2_stop+0x14>
 800558a:	2000      	movs	r0, #0
 800558c:	b003      	add	sp, #12
 800558e:	bd30      	pop	{r4, r5, pc}
 8005590:	4628      	mov	r0, r5
 8005592:	f7ff fed1 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 8005596:	2800      	cmp	r0, #0
 8005598:	d0f7      	beq.n	800558a <acc_sensor_protocol_r2_stop+0xe>
 800559a:	4621      	mov	r1, r4
 800559c:	ab01      	add	r3, sp, #4
 800559e:	2264      	movs	r2, #100	; 0x64
 80055a0:	4628      	mov	r0, r5
 80055a2:	f7ff ff57 	bl	8005454 <acc_sensor_protocol_r2_wait_for_event>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d0ef      	beq.n	800558a <acc_sensor_protocol_r2_stop+0xe>
 80055aa:	4628      	mov	r0, r5
 80055ac:	f7ff fec4 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d0ea      	beq.n	800558a <acc_sensor_protocol_r2_stop+0xe>
 80055b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d0e7      	beq.n	800558c <acc_sensor_protocol_r2_stop+0x10>
 80055bc:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <acc_sensor_protocol_r2_stop+0x58>)
 80055be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80055c2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80055c4:	4904      	ldr	r1, [pc, #16]	; (80055d8 <acc_sensor_protocol_r2_stop+0x5c>)
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <acc_sensor_protocol_r2_stop+0x60>)
 80055c8:	2000      	movs	r0, #0
 80055ca:	47a0      	blx	r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	f002 f937 	bl	8007840 <acc_sensor_diagnostics_r2_sensor_status>
 80055d2:	e7da      	b.n	800558a <acc_sensor_protocol_r2_stop+0xe>
 80055d4:	200003c8 	.word	0x200003c8
 80055d8:	0800b318 	.word	0x0800b318
 80055dc:	0800b5a8 	.word	0x0800b5a8

080055e0 <acc_sweep_manager_prepare>:
 80055e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055e4:	4680      	mov	r8, r0
 80055e6:	b095      	sub	sp, #84	; 0x54
 80055e8:	4608      	mov	r0, r1
 80055ea:	460c      	mov	r4, r1
 80055ec:	4617      	mov	r7, r2
 80055ee:	4699      	mov	r9, r3
 80055f0:	f7fe ffb2 	bl	8004558 <acc_base_configuration_sensor_get>
 80055f4:	4601      	mov	r1, r0
 80055f6:	4620      	mov	r0, r4
 80055f8:	9101      	str	r1, [sp, #4]
 80055fa:	f7ff f817 	bl	800462c <acc_base_configuration_wg_duration_get>
 80055fe:	4603      	mov	r3, r0
 8005600:	4620      	mov	r0, r4
 8005602:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005606:	f7ff f805 	bl	8004614 <acc_base_configuration_integrator_get>
 800560a:	4603      	mov	r3, r0
 800560c:	4620      	mov	r0, r4
 800560e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005612:	f7ff f817 	bl	8004644 <acc_base_configuration_integrator_ramp_up_get>
 8005616:	4603      	mov	r3, r0
 8005618:	4620      	mov	r0, r4
 800561a:	f8ad 3010 	strh.w	r3, [sp, #16]
 800561e:	f7fe ffbd 	bl	800459c <acc_base_configuration_decrease_tx_emission_get>
 8005622:	4605      	mov	r5, r0
 8005624:	2304      	movs	r3, #4
 8005626:	9901      	ldr	r1, [sp, #4]
 8005628:	f8ad 5012 	strh.w	r5, [sp, #18]
 800562c:	aa03      	add	r2, sp, #12
 800562e:	f108 0514 	add.w	r5, r8, #20
 8005632:	2012      	movs	r0, #18
 8005634:	f000 f8ce 	bl	80057d4 <acc_probes_execute_uint16>
 8005638:	2220      	movs	r2, #32
 800563a:	2100      	movs	r1, #0
 800563c:	4628      	mov	r0, r5
 800563e:	f002 ff57 	bl	80084f0 <memset>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	4628      	mov	r0, r5
 8005646:	4621      	mov	r1, r4
 8005648:	4798      	blx	r3
 800564a:	4606      	mov	r6, r0
 800564c:	2800      	cmp	r0, #0
 800564e:	d04e      	beq.n	80056ee <acc_sweep_manager_prepare+0x10e>
 8005650:	2220      	movs	r2, #32
 8005652:	2100      	movs	r1, #0
 8005654:	a80c      	add	r0, sp, #48	; 0x30
 8005656:	f002 ff4b 	bl	80084f0 <memset>
 800565a:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 800565e:	2100      	movs	r1, #0
 8005660:	6806      	ldr	r6, [r0, #0]
 8005662:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8005666:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800566a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800566e:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 8005672:	aa0c      	add	r2, sp, #48	; 0x30
 8005674:	ab05      	add	r3, sp, #20
 8005676:	4621      	mov	r1, r4
 8005678:	4628      	mov	r0, r5
 800567a:	47b0      	blx	r6
 800567c:	4606      	mov	r6, r0
 800567e:	2800      	cmp	r0, #0
 8005680:	d039      	beq.n	80056f6 <acc_sweep_manager_prepare+0x116>
 8005682:	b137      	cbz	r7, 8005692 <acc_sweep_manager_prepare+0xb2>
 8005684:	ad0c      	add	r5, sp, #48	; 0x30
 8005686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005688:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800568a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800568e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8005692:	f1b9 0f00 	cmp.w	r9, #0
 8005696:	d011      	beq.n	80056bc <acc_sweep_manager_prepare+0xdc>
 8005698:	ad05      	add	r5, sp, #20
 800569a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800569c:	f8c9 0000 	str.w	r0, [r9]
 80056a0:	f8c9 1004 	str.w	r1, [r9, #4]
 80056a4:	cd03      	ldmia	r5!, {r0, r1}
 80056a6:	882d      	ldrh	r5, [r5, #0]
 80056a8:	f8c9 2008 	str.w	r2, [r9, #8]
 80056ac:	f8c9 300c 	str.w	r3, [r9, #12]
 80056b0:	f8a9 5018 	strh.w	r5, [r9, #24]
 80056b4:	f8c9 0010 	str.w	r0, [r9, #16]
 80056b8:	f8c9 1014 	str.w	r1, [r9, #20]
 80056bc:	4620      	mov	r0, r4
 80056be:	f7fe ff85 	bl	80045cc <acc_base_configuration_repetition_mode_get>
 80056c2:	2801      	cmp	r0, #1
 80056c4:	d020      	beq.n	8005708 <acc_sweep_manager_prepare+0x128>
 80056c6:	4620      	mov	r0, r4
 80056c8:	f7fe ff8a 	bl	80045e0 <acc_base_configuration_update_rate_get>
 80056cc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005710 <acc_sweep_manager_prepare+0x130>
 80056d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80056d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056dc:	ee17 3a90 	vmov	r3, s15
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c8 3000 	str.w	r3, [r8]
 80056e6:	f8c8 2008 	str.w	r2, [r8, #8]
 80056ea:	f8a8 2006 	strh.w	r2, [r8, #6]
 80056ee:	4630      	mov	r0, r6
 80056f0:	b015      	add	sp, #84	; 0x54
 80056f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056f6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80056fa:	4628      	mov	r0, r5
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	4798      	blx	r3
 8005700:	4630      	mov	r0, r6
 8005702:	b015      	add	sp, #84	; 0x54
 8005704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005708:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800570c:	e7e8      	b.n	80056e0 <acc_sweep_manager_prepare+0x100>
 800570e:	bf00      	nop
 8005710:	44fa0000 	.word	0x44fa0000

08005714 <acc_sweep_manager_release>:
 8005714:	b120      	cbz	r0, 8005720 <acc_sweep_manager_release+0xc>
 8005716:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005718:	b113      	cbz	r3, 8005720 <acc_sweep_manager_release+0xc>
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	3014      	adds	r0, #20
 800571e:	4718      	bx	r3
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop

08005724 <acc_sweep_manager_production_test>:
 8005724:	b410      	push	{r4}
 8005726:	4604      	mov	r4, r0
 8005728:	3014      	adds	r0, #20
 800572a:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800572c:	46a4      	mov	ip, r4
 800572e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005732:	4760      	bx	ip

08005734 <acc_assert_fail>:
 8005734:	b500      	push	{lr}
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <acc_assert_fail+0x20>)
 8005738:	4a07      	ldr	r2, [pc, #28]	; (8005758 <acc_assert_fail+0x24>)
 800573a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800573c:	b083      	sub	sp, #12
 800573e:	4603      	mov	r3, r0
 8005740:	9100      	str	r1, [sp, #0]
 8005742:	2000      	movs	r0, #0
 8005744:	4905      	ldr	r1, [pc, #20]	; (800575c <acc_assert_fail+0x28>)
 8005746:	47a0      	blx	r4
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <acc_assert_fail+0x2c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	b103      	cbz	r3, 8005750 <acc_assert_fail+0x1c>
 800574e:	4798      	blx	r3
 8005750:	e7fe      	b.n	8005750 <acc_assert_fail+0x1c>
 8005752:	bf00      	nop
 8005754:	200003c8 	.word	0x200003c8
 8005758:	0800b728 	.word	0x0800b728
 800575c:	0800b740 	.word	0x0800b740
 8005760:	200003b0 	.word	0x200003b0

08005764 <acc_diagnostic_log_set_scope>:
 8005764:	4b02      	ldr	r3, [pc, #8]	; (8005770 <acc_diagnostic_log_set_scope+0xc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b10b      	cbz	r3, 800576e <acc_diagnostic_log_set_scope+0xa>
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4718      	bx	r3
 800576e:	4770      	bx	lr
 8005770:	200003b4 	.word	0x200003b4

08005774 <acc_diagnostic_log_declare_parameter>:
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <acc_diagnostic_log_declare_parameter+0xc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b10b      	cbz	r3, 800577e <acc_diagnostic_log_declare_parameter+0xa>
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4718      	bx	r3
 800577e:	4770      	bx	lr
 8005780:	200003b4 	.word	0x200003b4

08005784 <acc_diagnostic_log_set_parameter>:
 8005784:	4b02      	ldr	r3, [pc, #8]	; (8005790 <acc_diagnostic_log_set_parameter+0xc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b10b      	cbz	r3, 800578e <acc_diagnostic_log_set_parameter+0xa>
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4718      	bx	r3
 800578e:	4770      	bx	lr
 8005790:	200003b4 	.word	0x200003b4

08005794 <acc_diagnostic_log_array>:
 8005794:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <acc_diagnostic_log_array+0xc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	b10b      	cbz	r3, 800579e <acc_diagnostic_log_array+0xa>
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4718      	bx	r3
 800579e:	4770      	bx	lr
 80057a0:	200003b4 	.word	0x200003b4

080057a4 <acc_diagnostic_log_array_sub_name>:
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <acc_diagnostic_log_array_sub_name+0xc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	b10b      	cbz	r3, 80057ae <acc_diagnostic_log_array_sub_name+0xa>
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	4718      	bx	r3
 80057ae:	4770      	bx	lr
 80057b0:	200003b4 	.word	0x200003b4

080057b4 <acc_diagnostic_log_scalar>:
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <acc_diagnostic_log_scalar+0xc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	b10b      	cbz	r3, 80057be <acc_diagnostic_log_scalar+0xa>
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	4718      	bx	r3
 80057be:	4770      	bx	lr
 80057c0:	200003b4 	.word	0x200003b4

080057c4 <acc_diagnostic_log_data_u16>:
 80057c4:	4b02      	ldr	r3, [pc, #8]	; (80057d0 <acc_diagnostic_log_data_u16+0xc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	b10b      	cbz	r3, 80057ce <acc_diagnostic_log_data_u16+0xa>
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	4718      	bx	r3
 80057ce:	4770      	bx	lr
 80057d0:	200003b4 	.word	0x200003b4

080057d4 <acc_probes_execute_uint16>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	4c0c      	ldr	r4, [pc, #48]	; (800580c <acc_probes_execute_uint16+0x38>)
 80057da:	f88d 0004 	strb.w	r0, [sp, #4]
 80057de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80057e2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80057e6:	2501      	movs	r5, #1
 80057e8:	7860      	ldrb	r0, [r4, #1]
 80057ea:	9102      	str	r1, [sp, #8]
 80057ec:	9503      	str	r5, [sp, #12]
 80057ee:	b938      	cbnz	r0, 8005800 <acc_probes_execute_uint16+0x2c>
 80057f0:	6866      	ldr	r6, [r4, #4]
 80057f2:	b13e      	cbz	r6, 8005804 <acc_probes_execute_uint16+0x30>
 80057f4:	4611      	mov	r1, r2
 80057f6:	461a      	mov	r2, r3
 80057f8:	40aa      	lsls	r2, r5
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	a801      	add	r0, sp, #4
 80057fe:	47b0      	blx	r6
 8005800:	b004      	add	sp, #16
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	4628      	mov	r0, r5
 8005806:	b004      	add	sp, #16
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	bf00      	nop
 800580c:	2000000c 	.word	0x2000000c

08005810 <acc_sensor_reg_read>:
 8005810:	b530      	push	{r4, r5, lr}
 8005812:	b083      	sub	sp, #12
 8005814:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8005818:	4614      	mov	r4, r2
 800581a:	2500      	movs	r5, #0
 800581c:	f8ad 1000 	strh.w	r1, [sp]
 8005820:	2301      	movs	r3, #1
 8005822:	2203      	movs	r2, #3
 8005824:	4669      	mov	r1, sp
 8005826:	f8ad 5002 	strh.w	r5, [sp, #2]
 800582a:	f8ad 5004 	strh.w	r5, [sp, #4]
 800582e:	f7fe ff99 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 8005832:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005836:	8023      	strh	r3, [r4, #0]
 8005838:	b003      	add	sp, #12
 800583a:	bd30      	pop	{r4, r5, pc}

0800583c <acc_sensor_reg_write>:
 800583c:	b530      	push	{r4, r5, lr}
 800583e:	b083      	sub	sp, #12
 8005840:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8005844:	4615      	mov	r5, r2
 8005846:	2300      	movs	r3, #0
 8005848:	2202      	movs	r2, #2
 800584a:	a901      	add	r1, sp, #4
 800584c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8005850:	f8ad 5006 	strh.w	r5, [sp, #6]
 8005854:	f7fe ff86 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 8005858:	b003      	add	sp, #12
 800585a:	bd30      	pop	{r4, r5, pc}

0800585c <acc_sensor_reg_field_write>:
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	461d      	mov	r5, r3
 8005864:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005868:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 800586c:	f8ad 3000 	strh.w	r3, [sp]
 8005870:	2700      	movs	r7, #0
 8005872:	468a      	mov	sl, r1
 8005874:	4691      	mov	r9, r2
 8005876:	4669      	mov	r1, sp
 8005878:	2301      	movs	r3, #1
 800587a:	2203      	movs	r2, #3
 800587c:	4680      	mov	r8, r0
 800587e:	f8ad 7002 	strh.w	r7, [sp, #2]
 8005882:	f8ad 7004 	strh.w	r7, [sp, #4]
 8005886:	f7fe ff6d 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 800588a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800588e:	fa04 f10a 	lsl.w	r1, r4, sl
 8005892:	4071      	eors	r1, r6
 8005894:	ea01 0409 	and.w	r4, r1, r9
 8005898:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800589c:	4640      	mov	r0, r8
 800589e:	463b      	mov	r3, r7
 80058a0:	4669      	mov	r1, sp
 80058a2:	4074      	eors	r4, r6
 80058a4:	2202      	movs	r2, #2
 80058a6:	f8ad 5000 	strh.w	r5, [sp]
 80058aa:	f8ad 4002 	strh.w	r4, [sp, #2]
 80058ae:	f7fe ff59 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 80058b2:	b002      	add	sp, #8
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080058b8 <acc_sensor_conf_read_instr>:
 80058b8:	b530      	push	{r4, r5, lr}
 80058ba:	b085      	sub	sp, #20
 80058bc:	2401      	movs	r4, #1
 80058be:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 80058c2:	4623      	mov	r3, r4
 80058c4:	2500      	movs	r5, #0
 80058c6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80058ca:	2205      	movs	r2, #5
 80058cc:	a901      	add	r1, sp, #4
 80058ce:	f8ad 4006 	strh.w	r4, [sp, #6]
 80058d2:	f8ad 5008 	strh.w	r5, [sp, #8]
 80058d6:	f8cd 500a 	str.w	r5, [sp, #10]
 80058da:	f7fe ff43 	bl	8004764 <acc_rss_integration_sensor_device_transfer>
 80058de:	f10d 000a 	add.w	r0, sp, #10
 80058e2:	4622      	mov	r2, r4
 80058e4:	4669      	mov	r1, sp
 80058e6:	f000 f8a9 	bl	8005a3c <acc_utils_transfer_buffer_to_uint32>
 80058ea:	9800      	ldr	r0, [sp, #0]
 80058ec:	b005      	add	sp, #20
 80058ee:	bd30      	pop	{r4, r5, pc}

080058f0 <acc_cpd_pll_divisors_calculate>:
 80058f0:	b510      	push	{r4, lr}
 80058f2:	edd0 7a00 	vldr	s15, [r0]
 80058f6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80059dc <acc_cpd_pll_divisors_calculate+0xec>
 80058fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005902:	b082      	sub	sp, #8
 8005904:	dc3c      	bgt.n	8005980 <acc_cpd_pll_divisors_calculate+0x90>
 8005906:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80059e0 <acc_cpd_pll_divisors_calculate+0xf0>
 800590a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800590e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005912:	d435      	bmi.n	8005980 <acc_cpd_pll_divisors_calculate+0x90>
 8005914:	ed9f 5a33 	vldr	s10, [pc, #204]	; 80059e4 <acc_cpd_pll_divisors_calculate+0xf4>
 8005918:	eddf 5a33 	vldr	s11, [pc, #204]	; 80059e8 <acc_cpd_pll_divisors_calculate+0xf8>
 800591c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80059ec <acc_cpd_pll_divisors_calculate+0xfc>
 8005920:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8005924:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8005928:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800592c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005930:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005934:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005938:	ee37 7a06 	vadd.f32	s14, s14, s12
 800593c:	ee16 3a90 	vmov	r3, s13
 8005940:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005944:	b29b      	uxth	r3, r3
 8005946:	f1a3 0210 	sub.w	r2, r3, #16
 800594a:	ee17 0a10 	vmov	r0, s14
 800594e:	b292      	uxth	r2, r2
 8005950:	2aef      	cmp	r2, #239	; 0xef
 8005952:	8108      	strh	r0, [r1, #8]
 8005954:	d814      	bhi.n	8005980 <acc_cpd_pll_divisors_calculate+0x90>
 8005956:	2b3f      	cmp	r3, #63	; 0x3f
 8005958:	d938      	bls.n	80059cc <acc_cpd_pll_divisors_calculate+0xdc>
 800595a:	2bbf      	cmp	r3, #191	; 0xbf
 800595c:	f04f 0201 	mov.w	r2, #1
 8005960:	bf98      	it	ls
 8005962:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 8005966:	804a      	strh	r2, [r1, #2]
 8005968:	bf8c      	ite	hi
 800596a:	08d8      	lsrhi	r0, r3, #3
 800596c:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 8005970:	f003 0207 	and.w	r2, r3, #7
 8005974:	8088      	strh	r0, [r1, #4]
 8005976:	80ca      	strh	r2, [r1, #6]
 8005978:	2001      	movs	r0, #1
 800597a:	800b      	strh	r3, [r1, #0]
 800597c:	b002      	add	sp, #8
 800597e:	bd10      	pop	{r4, pc}
 8005980:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005988:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80059f0 <acc_cpd_pll_divisors_calculate+0x100>
 800598c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80059f4 <acc_cpd_pll_divisors_calculate+0x104>
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <acc_cpd_pll_divisors_calculate+0x108>)
 8005992:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <acc_cpd_pll_divisors_calculate+0x10c>)
 8005994:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005996:	491a      	ldr	r1, [pc, #104]	; (8005a00 <acc_cpd_pll_divisors_calculate+0x110>)
 8005998:	bf4a      	itet	mi
 800599a:	4b1a      	ldrmi	r3, [pc, #104]	; (8005a04 <acc_cpd_pll_divisors_calculate+0x114>)
 800599c:	4b1a      	ldrpl	r3, [pc, #104]	; (8005a08 <acc_cpd_pll_divisors_calculate+0x118>)
 800599e:	eef1 7a67 	vnegmi.f32	s15, s15
 80059a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059a6:	2000      	movs	r0, #0
 80059a8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80059ac:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80059b0:	ed8d 7a00 	vstr	s14, [sp]
 80059b4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80059bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c0:	edcd 7a01 	vstr	s15, [sp, #4]
 80059c4:	47a0      	blx	r4
 80059c6:	2000      	movs	r0, #0
 80059c8:	b002      	add	sp, #8
 80059ca:	bd10      	pop	{r4, pc}
 80059cc:	2000      	movs	r0, #0
 80059ce:	2b2f      	cmp	r3, #47	; 0x2f
 80059d0:	bf88      	it	hi
 80059d2:	461a      	movhi	r2, r3
 80059d4:	808a      	strh	r2, [r1, #4]
 80059d6:	8048      	strh	r0, [r1, #2]
 80059d8:	80c8      	strh	r0, [r1, #6]
 80059da:	e7cd      	b.n	8005978 <acc_cpd_pll_divisors_calculate+0x88>
 80059dc:	4c989680 	.word	0x4c989680
 80059e0:	4b989680 	.word	0x4b989680
 80059e4:	4f1502f9 	.word	0x4f1502f9
 80059e8:	b55b38e8 	.word	0xb55b38e8
 80059ec:	427c0000 	.word	0x427c0000
 80059f0:	350637bd 	.word	0x350637bd
 80059f4:	49742400 	.word	0x49742400
 80059f8:	200003c8 	.word	0x200003c8
 80059fc:	0800b74c 	.word	0x0800b74c
 8005a00:	0800b778 	.word	0x0800b778
 8005a04:	0800b748 	.word	0x0800b748
 8005a08:	0800ba44 	.word	0x0800ba44

08005a0c <acc_utils_swap16_array>:
 8005a0c:	1e4a      	subs	r2, r1, #1
 8005a0e:	b131      	cbz	r1, 8005a1e <acc_utils_swap16_array+0x12>
 8005a10:	8803      	ldrh	r3, [r0, #0]
 8005a12:	3a01      	subs	r2, #1
 8005a14:	ba5b      	rev16	r3, r3
 8005a16:	f820 3b02 	strh.w	r3, [r0], #2
 8005a1a:	1c53      	adds	r3, r2, #1
 8005a1c:	d1f8      	bne.n	8005a10 <acc_utils_swap16_array+0x4>
 8005a1e:	4770      	bx	lr

08005a20 <acc_utils_uint32_to_transfer_buffer>:
 8005a20:	b152      	cbz	r2, 8005a38 <acc_utils_uint32_to_transfer_buffer+0x18>
 8005a22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005a26:	3804      	subs	r0, #4
 8005a28:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8005a2c:	804b      	strh	r3, [r1, #2]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	800b      	strh	r3, [r1, #0]
 8005a32:	3104      	adds	r1, #4
 8005a34:	4291      	cmp	r1, r2
 8005a36:	d1f7      	bne.n	8005a28 <acc_utils_uint32_to_transfer_buffer+0x8>
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <acc_utils_transfer_buffer_to_uint32>:
 8005a3c:	b17a      	cbz	r2, 8005a5e <acc_utils_transfer_buffer_to_uint32+0x22>
 8005a3e:	b410      	push	{r4}
 8005a40:	3904      	subs	r1, #4
 8005a42:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8005a46:	8802      	ldrh	r2, [r0, #0]
 8005a48:	8843      	ldrh	r3, [r0, #2]
 8005a4a:	3004      	adds	r0, #4
 8005a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a50:	4284      	cmp	r4, r0
 8005a52:	f841 3f04 	str.w	r3, [r1, #4]!
 8005a56:	d1f6      	bne.n	8005a46 <acc_utils_transfer_buffer_to_uint32+0xa>
 8005a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	4770      	bx	lr

08005a60 <acc_cpd_cbank_and_vana_calibration>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	ed2d 8b02 	vpush	{d8}
 8005a68:	4615      	mov	r5, r2
 8005a6a:	b08b      	sub	sp, #44	; 0x2c
 8005a6c:	461e      	mov	r6, r3
 8005a6e:	ab09      	add	r3, sp, #36	; 0x24
 8005a70:	2400      	movs	r4, #0
 8005a72:	ee08 1a10 	vmov	s16, r1
 8005a76:	4683      	mov	fp, r0
 8005a78:	460a      	mov	r2, r1
 8005a7a:	4601      	mov	r1, r0
 8005a7c:	6828      	ldr	r0, [r5, #0]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	ab08      	add	r3, sp, #32
 8005a82:	e9cd 6407 	strd	r6, r4, [sp, #28]
 8005a86:	9409      	str	r4, [sp, #36]	; 0x24
 8005a88:	f7ff fb66 	bl	8005158 <acc_sensor_protocol_r2_prepare_load>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d067      	beq.n	8005b60 <acc_cpd_cbank_and_vana_calibration+0x100>
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8005db0 <acc_cpd_cbank_and_vana_calibration+0x350>
 8005a96:	461e      	mov	r6, r3
 8005a98:	f5c4 63ae 	rsb	r3, r4, #1392	; 0x570
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	429e      	cmp	r6, r3
 8005aa0:	bf28      	it	cs
 8005aa2:	461e      	movcs	r6, r3
 8005aa4:	9f08      	ldr	r7, [sp, #32]
 8005aa6:	4bb6      	ldr	r3, [pc, #728]	; (8005d80 <acc_cpd_cbank_and_vana_calibration+0x320>)
 8005aa8:	ea4f 0954 	mov.w	r9, r4, lsr #1
 8005aac:	0872      	lsrs	r2, r6, #1
 8005aae:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	f002 fade 	bl	8008074 <acc_confprogram_copy>
 8005ab8:	686b      	ldr	r3, [r5, #4]
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	201b      	movs	r0, #27
 8005abe:	b2b2      	uxth	r2, r6
 8005ac0:	b2a1      	uxth	r1, r4
 8005ac2:	9000      	str	r0, [sp, #0]
 8005ac4:	4643      	mov	r3, r8
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	9206      	str	r2, [sp, #24]
 8005aca:	9105      	str	r1, [sp, #20]
 8005acc:	f04f 0a19 	mov.w	sl, #25
 8005ad0:	f002 f9de 	bl	8007e90 <acc_confprogram_patch_offset>
 8005ad4:	68ab      	ldr	r3, [r5, #8]
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8005adc:	4638      	mov	r0, r7
 8005ade:	4643      	mov	r3, r8
 8005ae0:	f8cd a000 	str.w	sl, [sp]
 8005ae4:	f002 f9d4 	bl	8007e90 <acc_confprogram_patch_offset>
 8005ae8:	68eb      	ldr	r3, [r5, #12]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	231a      	movs	r3, #26
 8005aee:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8005af2:	4638      	mov	r0, r7
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	4643      	mov	r3, r8
 8005af8:	f002 f9ca 	bl	8007e90 <acc_confprogram_patch_offset>
 8005afc:	8a2b      	ldrh	r3, [r5, #16]
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	2317      	movs	r3, #23
 8005b02:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8005b06:	4638      	mov	r0, r7
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	4643      	mov	r3, r8
 8005b0c:	f002 f9c0 	bl	8007e90 <acc_confprogram_patch_offset>
 8005b10:	2310      	movs	r3, #16
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	2300      	movs	r3, #0
 8005b16:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	4643      	mov	r3, r8
 8005b20:	f002 f9b6 	bl	8007e90 <acc_confprogram_patch_offset>
 8005b24:	4633      	mov	r3, r6
 8005b26:	6828      	ldr	r0, [r5, #0]
 8005b28:	465a      	mov	r2, fp
 8005b2a:	fa1f f189 	uxth.w	r1, r9
 8005b2e:	f7ff fa41 	bl	8004fb4 <acc_sensor_r2_load_confmem>
 8005b32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b34:	f240 5373 	movw	r3, #1395	; 0x573
 8005b38:	4434      	add	r4, r6
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d9ac      	bls.n	8005a98 <acc_cpd_cbank_and_vana_calibration+0x38>
 8005b3e:	6828      	ldr	r0, [r5, #0]
 8005b40:	4651      	mov	r1, sl
 8005b42:	f7ff fb6d 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 8005b46:	4606      	mov	r6, r0
 8005b48:	b9b0      	cbnz	r0, 8005b78 <acc_cpd_cbank_and_vana_calibration+0x118>
 8005b4a:	4b8e      	ldr	r3, [pc, #568]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005b4c:	4a8e      	ldr	r2, [pc, #568]	; (8005d88 <acc_cpd_cbank_and_vana_calibration+0x328>)
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	498e      	ldr	r1, [pc, #568]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005b52:	4798      	blx	r3
 8005b54:	4630      	mov	r0, r6
 8005b56:	b00b      	add	sp, #44	; 0x2c
 8005b58:	ecbd 8b02 	vpop	{d8}
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b60:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005b62:	4a8b      	ldr	r2, [pc, #556]	; (8005d90 <acc_cpd_cbank_and_vana_calibration+0x330>)
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	4989      	ldr	r1, [pc, #548]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005b68:	4606      	mov	r6, r0
 8005b6a:	4798      	blx	r3
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	b00b      	add	sp, #44	; 0x2c
 8005b70:	ecbd 8b02 	vpop	{d8}
 8005b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b78:	4886      	ldr	r0, [pc, #536]	; (8005d94 <acc_cpd_cbank_and_vana_calibration+0x334>)
 8005b7a:	f7ff fdf3 	bl	8005764 <acc_diagnostic_log_set_scope>
 8005b7e:	6829      	ldr	r1, [r5, #0]
 8005b80:	4885      	ldr	r0, [pc, #532]	; (8005d98 <acc_cpd_cbank_and_vana_calibration+0x338>)
 8005b82:	f7ff fe17 	bl	80057b4 <acc_diagnostic_log_scalar>
 8005b86:	4885      	ldr	r0, [pc, #532]	; (8005d9c <acc_cpd_cbank_and_vana_calibration+0x33c>)
 8005b88:	2203      	movs	r2, #3
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	f7ff fdf2 	bl	8005774 <acc_diagnostic_log_declare_parameter>
 8005b90:	682c      	ldr	r4, [r5, #0]
 8005b92:	2300      	movs	r3, #0
 8005b94:	4620      	mov	r0, r4
 8005b96:	2203      	movs	r2, #3
 8005b98:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005b9c:	f7ff fcc4 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 8005ba0:	b960      	cbnz	r0, 8005bbc <acc_cpd_cbank_and_vana_calibration+0x15c>
 8005ba2:	4b78      	ldr	r3, [pc, #480]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005ba4:	4a7e      	ldr	r2, [pc, #504]	; (8005da0 <acc_cpd_cbank_and_vana_calibration+0x340>)
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	4978      	ldr	r1, [pc, #480]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005baa:	2000      	movs	r0, #0
 8005bac:	4798      	blx	r3
 8005bae:	2600      	movs	r6, #0
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	b00b      	add	sp, #44	; 0x2c
 8005bb4:	ecbd 8b02 	vpop	{d8}
 8005bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbc:	aa09      	add	r2, sp, #36	; 0x24
 8005bbe:	219d      	movs	r1, #157	; 0x9d
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f7ff fe25 	bl	8005810 <acc_sensor_reg_read>
 8005bc6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8005bca:	aa09      	add	r2, sp, #36	; 0x24
 8005bcc:	f006 0607 	and.w	r6, r6, #7
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	2006      	movs	r0, #6
 8005bd6:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8005bda:	f7ff fdfb 	bl	80057d4 <acc_probes_execute_uint16>
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fbaa 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0dc      	beq.n	8005ba2 <acc_cpd_cbank_and_vana_calibration+0x142>
 8005be8:	682c      	ldr	r4, [r5, #0]
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8005bf0:	601e      	str	r6, [r3, #0]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005bf8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8005bfc:	f7ff fb8a 	bl	8005314 <acc_sensor_protocol_r2_is_sensor_running>
 8005c00:	4605      	mov	r5, r0
 8005c02:	b168      	cbz	r0, 8005c20 <acc_cpd_cbank_and_vana_calibration+0x1c0>
 8005c04:	4e5f      	ldr	r6, [pc, #380]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005c06:	4a67      	ldr	r2, [pc, #412]	; (8005da4 <acc_cpd_cbank_and_vana_calibration+0x344>)
 8005c08:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8005c0a:	4960      	ldr	r1, [pc, #384]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	2000      	movs	r0, #0
 8005c10:	47a8      	blx	r5
 8005c12:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005c14:	4a64      	ldr	r2, [pc, #400]	; (8005da8 <acc_cpd_cbank_and_vana_calibration+0x348>)
 8005c16:	495d      	ldr	r1, [pc, #372]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005c18:	2000      	movs	r0, #0
 8005c1a:	4798      	blx	r3
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	e7a5      	b.n	8005b6c <acc_cpd_cbank_and_vana_calibration+0x10c>
 8005c20:	9601      	str	r6, [sp, #4]
 8005c22:	2311      	movs	r3, #17
 8005c24:	4e61      	ldr	r6, [pc, #388]	; (8005dac <acc_cpd_cbank_and_vana_calibration+0x34c>)
 8005c26:	4956      	ldr	r1, [pc, #344]	; (8005d80 <acc_cpd_cbank_and_vana_calibration+0x320>)
 8005c28:	9602      	str	r6, [sp, #8]
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4b5f      	ldr	r3, [pc, #380]	; (8005db0 <acc_cpd_cbank_and_vana_calibration+0x350>)
 8005c32:	f002 f9b3 	bl	8007f9c <acc_confprogram_live_patch>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	4950      	ldr	r1, [pc, #320]	; (8005d80 <acc_cpd_cbank_and_vana_calibration+0x320>)
 8005c40:	4b5b      	ldr	r3, [pc, #364]	; (8005db0 <acc_cpd_cbank_and_vana_calibration+0x350>)
 8005c42:	462a      	mov	r2, r5
 8005c44:	4620      	mov	r0, r4
 8005c46:	f002 f9a9 	bl	8007f9c <acc_confprogram_live_patch>
 8005c4a:	462e      	mov	r6, r5
 8005c4c:	4853      	ldr	r0, [pc, #332]	; (8005d9c <acc_cpd_cbank_and_vana_calibration+0x33c>)
 8005c4e:	4629      	mov	r1, r5
 8005c50:	f7ff fd98 	bl	8005784 <acc_diagnostic_log_set_parameter>
 8005c54:	4a55      	ldr	r2, [pc, #340]	; (8005dac <acc_cpd_cbank_and_vana_calibration+0x34c>)
 8005c56:	494a      	ldr	r1, [pc, #296]	; (8005d80 <acc_cpd_cbank_and_vana_calibration+0x320>)
 8005c58:	231f      	movs	r3, #31
 8005c5a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4620      	mov	r0, r4
 8005c62:	4b53      	ldr	r3, [pc, #332]	; (8005db0 <acc_cpd_cbank_and_vana_calibration+0x350>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	f002 f999 	bl	8007f9c <acc_confprogram_live_patch>
 8005c6a:	f240 11d1 	movw	r1, #465	; 0x1d1
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7ff fad6 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	f000 80bf 	beq.w	8005df8 <acc_cpd_cbank_and_vana_calibration+0x398>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2209      	movs	r2, #9
 8005c7e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff fc50 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 8005c88:	b938      	cbnz	r0, 8005c9a <acc_cpd_cbank_and_vana_calibration+0x23a>
 8005c8a:	4e3e      	ldr	r6, [pc, #248]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005c8c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8005c8e:	4a49      	ldr	r2, [pc, #292]	; (8005db4 <acc_cpd_cbank_and_vana_calibration+0x354>)
 8005c90:	493e      	ldr	r1, [pc, #248]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005c92:	462b      	mov	r3, r5
 8005c94:	2000      	movs	r0, #0
 8005c96:	47a0      	blx	r4
 8005c98:	e7bb      	b.n	8005c12 <acc_cpd_cbank_and_vana_calibration+0x1b2>
 8005c9a:	ee18 0a10 	vmov	r0, s16
 8005c9e:	2110      	movs	r1, #16
 8005ca0:	f7ff f9c0 	bl	8005024 <acc_sensor_r2_buffer_processed_verify_size>
 8005ca4:	b928      	cbnz	r0, 8005cb2 <acc_cpd_cbank_and_vana_calibration+0x252>
 8005ca6:	4e37      	ldr	r6, [pc, #220]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005ca8:	4a43      	ldr	r2, [pc, #268]	; (8005db8 <acc_cpd_cbank_and_vana_calibration+0x358>)
 8005caa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005cac:	4937      	ldr	r1, [pc, #220]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005cae:	4798      	blx	r3
 8005cb0:	e7ec      	b.n	8005c8c <acc_cpd_cbank_and_vana_calibration+0x22c>
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f7ff f9bb 	bl	8005034 <acc_sensor_r2_buffer_processed_read>
 8005cbe:	2310      	movs	r3, #16
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7ff fd84 	bl	80057d4 <acc_probes_execute_uint16>
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7ff fb33 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 8005cd2:	4680      	mov	r8, r0
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d0d8      	beq.n	8005c8a <acc_cpd_cbank_and_vana_calibration+0x22a>
 8005cd8:	2700      	movs	r7, #0
 8005cda:	46b9      	mov	r9, r7
 8005cdc:	4651      	mov	r1, sl
 8005cde:	f10a 0c1e 	add.w	ip, sl, #30
 8005ce2:	884b      	ldrh	r3, [r1, #2]
 8005ce4:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	4499      	add	r9, r3
 8005cec:	bf34      	ite	cc
 8005cee:	1ad3      	subcc	r3, r2, r3
 8005cf0:	1a9b      	subcs	r3, r3, r2
 8005cf2:	429f      	cmp	r7, r3
 8005cf4:	bf38      	it	cc
 8005cf6:	461f      	movcc	r7, r3
 8005cf8:	458c      	cmp	ip, r1
 8005cfa:	d1f2      	bne.n	8005ce2 <acc_cpd_cbank_and_vana_calibration+0x282>
 8005cfc:	4927      	ldr	r1, [pc, #156]	; (8005d9c <acc_cpd_cbank_and_vana_calibration+0x33c>)
 8005cfe:	482f      	ldr	r0, [pc, #188]	; (8005dbc <acc_cpd_cbank_and_vana_calibration+0x35c>)
 8005d00:	f7ff fd48 	bl	8005794 <acc_diagnostic_log_array>
 8005d04:	2110      	movs	r1, #16
 8005d06:	4650      	mov	r0, sl
 8005d08:	f7ff fd5c 	bl	80057c4 <acc_diagnostic_log_data_u16>
 8005d0c:	f8ba 3000 	ldrh.w	r3, [sl]
 8005d10:	4499      	add	r9, r3
 8005d12:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8005d16:	f5a9 43f2 	sub.w	r3, r9, #30976	; 0x7900
 8005d1a:	3b18      	subs	r3, #24
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005d22:	428b      	cmp	r3, r1
 8005d24:	d852      	bhi.n	8005dcc <acc_cpd_cbank_and_vana_calibration+0x36c>
 8005d26:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
 8005d2a:	d84f      	bhi.n	8005dcc <acc_cpd_cbank_and_vana_calibration+0x36c>
 8005d2c:	f7fe fd9a 	bl	8004864 <acc_rss_integration_log_level>
 8005d30:	2803      	cmp	r0, #3
 8005d32:	4646      	mov	r6, r8
 8005d34:	d90a      	bls.n	8005d4c <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005d38:	9701      	str	r7, [sp, #4]
 8005d3a:	fa1f f389 	uxth.w	r3, r9
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	4912      	ldr	r1, [pc, #72]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005d42:	4623      	mov	r3, r4
 8005d44:	2004      	movs	r0, #4
 8005d46:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005d48:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <acc_cpd_cbank_and_vana_calibration+0x360>)
 8005d4a:	47a0      	blx	r4
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	711d      	strb	r5, [r3, #4]
 8005d50:	f7fe fd88 	bl	8004864 <acc_rss_integration_log_level>
 8005d54:	2801      	cmp	r0, #1
 8005d56:	d909      	bls.n	8005d6c <acc_cpd_cbank_and_vana_calibration+0x30c>
 8005d58:	9907      	ldr	r1, [sp, #28]
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005d5c:	790b      	ldrb	r3, [r1, #4]
 8005d5e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	680b      	ldr	r3, [r1, #0]
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <acc_cpd_cbank_and_vana_calibration+0x364>)
 8005d66:	4909      	ldr	r1, [pc, #36]	; (8005d8c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005d68:	2002      	movs	r0, #2
 8005d6a:	47a0      	blx	r4
 8005d6c:	9c07      	ldr	r4, [sp, #28]
 8005d6e:	4816      	ldr	r0, [pc, #88]	; (8005dc8 <acc_cpd_cbank_and_vana_calibration+0x368>)
 8005d70:	6821      	ldr	r1, [r4, #0]
 8005d72:	f7ff fd1f 	bl	80057b4 <acc_diagnostic_log_scalar>
 8005d76:	7921      	ldrb	r1, [r4, #4]
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <acc_cpd_cbank_and_vana_calibration+0x33c>)
 8005d7a:	f7ff fd1b 	bl	80057b4 <acc_diagnostic_log_scalar>
 8005d7e:	e6f5      	b.n	8005b6c <acc_cpd_cbank_and_vana_calibration+0x10c>
 8005d80:	080096d8 	.word	0x080096d8
 8005d84:	200003c8 	.word	0x200003c8
 8005d88:	0800b7f0 	.word	0x0800b7f0
 8005d8c:	0800b7d0 	.word	0x0800b7d0
 8005d90:	0800b78c 	.word	0x0800b78c
 8005d94:	0800b7d4 	.word	0x0800b7d4
 8005d98:	0800b064 	.word	0x0800b064
 8005d9c:	0800b824 	.word	0x0800b824
 8005da0:	0800b830 	.word	0x0800b830
 8005da4:	0800b848 	.word	0x0800b848
 8005da8:	0800b910 	.word	0x0800b910
 8005dac:	08004f59 	.word	0x08004f59
 8005db0:	0800cfc4 	.word	0x0800cfc4
 8005db4:	0800b8e4 	.word	0x0800b8e4
 8005db8:	0800b8bc 	.word	0x0800b8bc
 8005dbc:	0800b8d4 	.word	0x0800b8d4
 8005dc0:	0800b948 	.word	0x0800b948
 8005dc4:	0800b928 	.word	0x0800b928
 8005dc8:	0800b93c 	.word	0x0800b93c
 8005dcc:	f7fe fd4a 	bl	8004864 <acc_rss_integration_log_level>
 8005dd0:	2803      	cmp	r0, #3
 8005dd2:	d90a      	bls.n	8005dea <acc_cpd_cbank_and_vana_calibration+0x38a>
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 8005dd6:	9701      	str	r7, [sp, #4]
 8005dd8:	fa1f f289 	uxth.w	r2, r9
 8005ddc:	9200      	str	r2, [sp, #0]
 8005dde:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <acc_cpd_cbank_and_vana_calibration+0x3ac>)
 8005de2:	490b      	ldr	r1, [pc, #44]	; (8005e10 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 8005de4:	4623      	mov	r3, r4
 8005de6:	2004      	movs	r0, #4
 8005de8:	47a8      	blx	r5
 8005dea:	b10e      	cbz	r6, 8005df0 <acc_cpd_cbank_and_vana_calibration+0x390>
 8005dec:	4e06      	ldr	r6, [pc, #24]	; (8005e08 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 8005dee:	e710      	b.n	8005c12 <acc_cpd_cbank_and_vana_calibration+0x1b2>
 8005df0:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8005df4:	2601      	movs	r6, #1
 8005df6:	e729      	b.n	8005c4c <acc_cpd_cbank_and_vana_calibration+0x1ec>
 8005df8:	4e03      	ldr	r6, [pc, #12]	; (8005e08 <acc_cpd_cbank_and_vana_calibration+0x3a8>)
 8005dfa:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <acc_cpd_cbank_and_vana_calibration+0x3b4>)
 8005dfc:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8005dfe:	4904      	ldr	r1, [pc, #16]	; (8005e10 <acc_cpd_cbank_and_vana_calibration+0x3b0>)
 8005e00:	462b      	mov	r3, r5
 8005e02:	47a0      	blx	r4
 8005e04:	e705      	b.n	8005c12 <acc_cpd_cbank_and_vana_calibration+0x1b2>
 8005e06:	bf00      	nop
 8005e08:	200003c8 	.word	0x200003c8
 8005e0c:	0800b948 	.word	0x0800b948
 8005e10:	0800b7d0 	.word	0x0800b7d0
 8005e14:	0800b87c 	.word	0x0800b87c

08005e18 <acc_cpd_clock_test>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	6917      	ldr	r7, [r2, #16]
 8005e20:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005ee8 <acc_cpd_clock_test+0xd0>
 8005e24:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8005ef8 <acc_cpd_clock_test+0xe0>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	4688      	mov	r8, r1
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	492c      	ldr	r1, [pc, #176]	; (8005ee0 <acc_cpd_clock_test+0xc8>)
 8005e30:	702b      	strb	r3, [r5, #0]
 8005e32:	4616      	mov	r6, r2
 8005e34:	4683      	mov	fp, r0
 8005e36:	706b      	strb	r3, [r5, #1]
 8005e38:	2400      	movs	r4, #0
 8005e3a:	b19f      	cbz	r7, 8005e64 <acc_cpd_clock_test+0x4c>
 8005e3c:	5d3b      	ldrb	r3, [r7, r4]
 8005e3e:	b96b      	cbnz	r3, 8005e5c <acc_cpd_clock_test+0x44>
 8005e40:	b9b4      	cbnz	r4, 8005e70 <acc_cpd_clock_test+0x58>
 8005e42:	89b3      	ldrh	r3, [r6, #12]
 8005e44:	3b02      	subs	r3, #2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d92e      	bls.n	8005eaa <acc_cpd_clock_test+0x92>
 8005e4c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8005e50:	4652      	mov	r2, sl
 8005e52:	2000      	movs	r0, #0
 8005e54:	4798      	blx	r3
 8005e56:	2303      	movs	r3, #3
 8005e58:	4921      	ldr	r1, [pc, #132]	; (8005ee0 <acc_cpd_clock_test+0xc8>)
 8005e5a:	702b      	strb	r3, [r5, #0]
 8005e5c:	bb0c      	cbnz	r4, 8005ea2 <acc_cpd_clock_test+0x8a>
 8005e5e:	2401      	movs	r4, #1
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	d1eb      	bne.n	8005e3c <acc_cpd_clock_test+0x24>
 8005e64:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <acc_cpd_clock_test+0xcc>)
 8005e66:	5ce3      	ldrb	r3, [r4, r3]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f7      	bne.n	8005e5c <acc_cpd_clock_test+0x44>
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	d0e8      	beq.n	8005e42 <acc_cpd_clock_test+0x2a>
 8005e70:	88b3      	ldrh	r3, [r6, #4]
 8005e72:	6832      	ldr	r2, [r6, #0]
 8005e74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005e78:	e9d6 4302 	ldrd	r4, r3, [r6, #8]
 8005e7c:	9200      	str	r2, [sp, #0]
 8005e7e:	88f2      	ldrh	r2, [r6, #6]
 8005e80:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005e84:	4641      	mov	r1, r8
 8005e86:	4658      	mov	r0, fp
 8005e88:	466a      	mov	r2, sp
 8005e8a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005e8e:	f000 fd95 	bl	80069bc <acc_cpd_refclk_stability_test>
 8005e92:	b9c0      	cbnz	r0, 8005ec6 <acc_cpd_clock_test+0xae>
 8005e94:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <acc_cpd_clock_test+0xd0>)
 8005e96:	4a15      	ldr	r2, [pc, #84]	; (8005eec <acc_cpd_clock_test+0xd4>)
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	4911      	ldr	r1, [pc, #68]	; (8005ee0 <acc_cpd_clock_test+0xc8>)
 8005e9c:	4798      	blx	r3
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	706b      	strb	r3, [r5, #1]
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	b005      	add	sp, #20
 8005ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eaa:	f7fe fcdb 	bl	8004864 <acc_rss_integration_log_level>
 8005eae:	2801      	cmp	r0, #1
 8005eb0:	490b      	ldr	r1, [pc, #44]	; (8005ee0 <acc_cpd_clock_test+0xc8>)
 8005eb2:	d905      	bls.n	8005ec0 <acc_cpd_clock_test+0xa8>
 8005eb4:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8005eb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <acc_cpd_clock_test+0xd8>)
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4798      	blx	r3
 8005ebe:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <acc_cpd_clock_test+0xc8>)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	702b      	strb	r3, [r5, #0]
 8005ec4:	e7ca      	b.n	8005e5c <acc_cpd_clock_test+0x44>
 8005ec6:	f7fe fccd 	bl	8004864 <acc_rss_integration_log_level>
 8005eca:	2801      	cmp	r0, #1
 8005ecc:	d905      	bls.n	8005eda <acc_cpd_clock_test+0xc2>
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <acc_cpd_clock_test+0xd0>)
 8005ed0:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <acc_cpd_clock_test+0xdc>)
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	4902      	ldr	r1, [pc, #8]	; (8005ee0 <acc_cpd_clock_test+0xc8>)
 8005ed6:	2002      	movs	r0, #2
 8005ed8:	4798      	blx	r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	706b      	strb	r3, [r5, #1]
 8005ede:	e7e0      	b.n	8005ea2 <acc_cpd_clock_test+0x8a>
 8005ee0:	0800b980 	.word	0x0800b980
 8005ee4:	0800b9d0 	.word	0x0800b9d0
 8005ee8:	200003c8 	.word	0x200003c8
 8005eec:	0800b9bc 	.word	0x0800b9bc
 8005ef0:	0800b968 	.word	0x0800b968
 8005ef4:	0800b9a8 	.word	0x0800b9a8
 8005ef8:	0800b990 	.word	0x0800b990

08005efc <acc_cpd_communication_test>:
 8005efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	ed2d 8b08 	vpush	{d8-d11}
 8005f04:	4614      	mov	r4, r2
 8005f06:	b099      	sub	sp, #100	; 0x64
 8005f08:	68a4      	ldr	r4, [r4, #8]
 8005f0a:	920c      	str	r2, [sp, #48]	; 0x30
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	9308      	str	r3, [sp, #32]
 8005f10:	9406      	str	r4, [sp, #24]
 8005f12:	2302      	movs	r3, #2
 8005f14:	7013      	strb	r3, [r2, #0]
 8005f16:	7053      	strb	r3, [r2, #1]
 8005f18:	7093      	strb	r3, [r2, #2]
 8005f1a:	70d3      	strb	r3, [r2, #3]
 8005f1c:	7113      	strb	r3, [r2, #4]
 8005f1e:	9b06      	ldr	r3, [sp, #24]
 8005f20:	f8df b310 	ldr.w	fp, [pc, #784]	; 8006234 <acc_cpd_communication_test+0x338>
 8005f24:	910d      	str	r1, [sp, #52]	; 0x34
 8005f26:	f04f 0800 	mov.w	r8, #0
 8005f2a:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
 8005f2e:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
 8005f32:	ee08 0a10 	vmov	s16, r0
 8005f36:	46c2      	mov	sl, r8
 8005f38:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f3c:	4647      	mov	r7, r8
 8005f3e:	b15b      	cbz	r3, 8005f58 <acc_cpd_communication_test+0x5c>
 8005f40:	9b06      	ldr	r3, [sp, #24]
 8005f42:	f813 300a 	ldrb.w	r3, [r3, sl]
 8005f46:	b163      	cbz	r3, 8005f62 <acc_cpd_communication_test+0x66>
 8005f48:	f1ba 0f04 	cmp.w	sl, #4
 8005f4c:	d014      	beq.n	8005f78 <acc_cpd_communication_test+0x7c>
 8005f4e:	9b06      	ldr	r3, [sp, #24]
 8005f50:	f10a 0a01 	add.w	sl, sl, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f3      	bne.n	8005f40 <acc_cpd_communication_test+0x44>
 8005f58:	4bb5      	ldr	r3, [pc, #724]	; (8006230 <acc_cpd_communication_test+0x334>)
 8005f5a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f2      	bne.n	8005f48 <acc_cpd_communication_test+0x4c>
 8005f62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	f200 8229 	bhi.w	80063be <acc_cpd_communication_test+0x4c2>
 8005f6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005f70:	004200d5 	.word	0x004200d5
 8005f74:	00130027 	.word	0x00130027
 8005f78:	46ba      	mov	sl, r7
 8005f7a:	9b08      	ldr	r3, [sp, #32]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	b923      	cbnz	r3, 8005f8a <acc_cpd_communication_test+0x8e>
 8005f80:	9b08      	ldr	r3, [sp, #32]
 8005f82:	789b      	ldrb	r3, [r3, #2]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8183 	beq.w	8006290 <acc_cpd_communication_test+0x394>
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	b019      	add	sp, #100	; 0x64
 8005f8e:	ecbd 8b08 	vpop	{d8-d11}
 8005f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	ee18 1a10 	vmov	r1, s16
 8005fa0:	46ba      	mov	sl, r7
 8005fa2:	f000 fa4b 	bl	800643c <acc_cpd_hibernate_test>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f040 81f7 	bne.w	800639a <acc_cpd_communication_test+0x49e>
 8005fac:	4ba1      	ldr	r3, [pc, #644]	; (8006234 <acc_cpd_communication_test+0x338>)
 8005fae:	4aa2      	ldr	r2, [pc, #648]	; (8006238 <acc_cpd_communication_test+0x33c>)
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	49a2      	ldr	r1, [pc, #648]	; (800623c <acc_cpd_communication_test+0x340>)
 8005fb4:	4798      	blx	r3
 8005fb6:	9a08      	ldr	r2, [sp, #32]
 8005fb8:	2303      	movs	r3, #3
 8005fba:	7113      	strb	r3, [r2, #4]
 8005fbc:	e7dd      	b.n	8005f7a <acc_cpd_communication_test+0x7e>
 8005fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fc2:	6853      	ldr	r3, [r2, #4]
 8005fc4:	7b10      	ldrb	r0, [r2, #12]
 8005fc6:	6814      	ldr	r4, [r2, #0]
 8005fc8:	9315      	str	r3, [sp, #84]	; 0x54
 8005fca:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
 8005fce:	ab12      	add	r3, sp, #72	; 0x48
 8005fd0:	ee18 0a10 	vmov	r0, s16
 8005fd4:	aa14      	add	r2, sp, #80	; 0x50
 8005fd6:	9414      	str	r4, [sp, #80]	; 0x50
 8005fd8:	f000 fac6 	bl	8006568 <acc_cpd_interrupt_test>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f040 81b3 	bne.w	8006348 <acc_cpd_communication_test+0x44c>
 8005fe2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8005fe6:	4a96      	ldr	r2, [pc, #600]	; (8006240 <acc_cpd_communication_test+0x344>)
 8005fe8:	4994      	ldr	r1, [pc, #592]	; (800623c <acc_cpd_communication_test+0x340>)
 8005fea:	4798      	blx	r3
 8005fec:	9a08      	ldr	r2, [sp, #32]
 8005fee:	2303      	movs	r3, #3
 8005ff0:	70d3      	strb	r3, [r2, #3]
 8005ff2:	e7ac      	b.n	8005f4e <acc_cpd_communication_test+0x52>
 8005ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ff6:	4b93      	ldr	r3, [pc, #588]	; (8006244 <acc_cpd_communication_test+0x348>)
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	ee08 2a90 	vmov	s17, r2
 8005ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006000:	ac18      	add	r4, sp, #96	; 0x60
 8006002:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8006006:	498d      	ldr	r1, [pc, #564]	; (800623c <acc_cpd_communication_test+0x340>)
 8006008:	22f6      	movs	r2, #246	; 0xf6
 800600a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800600e:	f7fe fbcf 	bl	80047b0 <acc_rss_integration_mem_alloc_debug>
 8006012:	4680      	mov	r8, r0
 8006014:	2800      	cmp	r0, #0
 8006016:	f000 81ce 	beq.w	80063b6 <acc_cpd_communication_test+0x4ba>
 800601a:	2300      	movs	r3, #0
 800601c:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8006020:	1f01      	subs	r1, r0, #4
 8006022:	910a      	str	r1, [sp, #40]	; 0x28
 8006024:	f003 0203 	and.w	r2, r3, #3
 8006028:	a818      	add	r0, sp, #96	; 0x60
 800602a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800602e:	3301      	adds	r3, #1
 8006030:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8006034:	f841 2f04 	str.w	r2, [r1, #4]!
 8006038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603c:	d1f2      	bne.n	8006024 <acc_cpd_communication_test+0x128>
 800603e:	f7fe fc0b 	bl	8004858 <acc_rss_integration_get_time>
 8006042:	2300      	movs	r3, #0
 8006044:	9307      	str	r3, [sp, #28]
 8006046:	ab12      	add	r3, sp, #72	; 0x48
 8006048:	9009      	str	r0, [sp, #36]	; 0x24
 800604a:	930b      	str	r3, [sp, #44]	; 0x2c
 800604c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006050:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006052:	f8df a204 	ldr.w	sl, [pc, #516]	; 8006258 <acc_cpd_communication_test+0x35c>
 8006056:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 800623c <acc_cpd_communication_test+0x340>
 800605a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800605e:	e9cd 4500 	strd	r4, r5, [sp]
 8006062:	ee18 1a10 	vmov	r1, s16
 8006066:	ee18 0a90 	vmov	r0, s17
 800606a:	4643      	mov	r3, r8
 800606c:	2200      	movs	r2, #0
 800606e:	f7fe fedd 	bl	8004e2c <acc_sensor_r2_buffer_write>
 8006072:	e9cd 4500 	strd	r4, r5, [sp]
 8006076:	ee18 1a10 	vmov	r1, s16
 800607a:	ee18 0a90 	vmov	r0, s17
 800607e:	4643      	mov	r3, r8
 8006080:	2200      	movs	r2, #0
 8006082:	f7fe ff15 	bl	8004eb0 <acc_sensor_r2_buffer_raw_read>
 8006086:	2500      	movs	r5, #0
 8006088:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800608a:	9505      	str	r5, [sp, #20]
 800608c:	462c      	mov	r4, r5
 800608e:	aa18      	add	r2, sp, #96	; 0x60
 8006090:	f004 0303 	and.w	r3, r4, #3
 8006094:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006098:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800609c:	f853 7c10 	ldr.w	r7, [r3, #-16]
 80060a0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
 80060a4:	4297      	cmp	r7, r2
 80060a6:	d011      	beq.n	80060cc <acc_cpd_communication_test+0x1d0>
 80060a8:	f7fe fbdc 	bl	8004864 <acc_rss_integration_log_level>
 80060ac:	2803      	cmp	r0, #3
 80060ae:	4623      	mov	r3, r4
 80060b0:	4652      	mov	r2, sl
 80060b2:	4649      	mov	r1, r9
 80060b4:	f04f 0004 	mov.w	r0, #4
 80060b8:	d905      	bls.n	80060c6 <acc_cpd_communication_test+0x1ca>
 80060ba:	6835      	ldr	r5, [r6, #0]
 80060bc:	e9cd 7500 	strd	r7, r5, [sp]
 80060c0:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 80060c4:	47b8      	blx	r7
 80060c6:	9b05      	ldr	r3, [sp, #20]
 80060c8:	3301      	adds	r3, #1
 80060ca:	9305      	str	r3, [sp, #20]
 80060cc:	3401      	adds	r4, #1
 80060ce:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80060d2:	d1dc      	bne.n	800608e <acc_cpd_communication_test+0x192>
 80060d4:	9d05      	ldr	r5, [sp, #20]
 80060d6:	f7fe fbbf 	bl	8004858 <acc_rss_integration_get_time>
 80060da:	9b07      	ldr	r3, [sp, #28]
 80060dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	f040 808b 	bne.w	80061fe <acc_cpd_communication_test+0x302>
 80060e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ea:	1ac0      	subs	r0, r0, r3
 80060ec:	2813      	cmp	r0, #19
 80060ee:	d9af      	bls.n	8006050 <acc_cpd_communication_test+0x154>
 80060f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80060f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060f6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80060fa:	930a      	str	r3, [sp, #40]	; 0x28
 80060fc:	4607      	mov	r7, r0
 80060fe:	f7fe fbb1 	bl	8004864 <acc_rss_integration_log_level>
 8006102:	2801      	cmp	r0, #1
 8006104:	d905      	bls.n	8006112 <acc_cpd_communication_test+0x216>
 8006106:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800610a:	4a4f      	ldr	r2, [pc, #316]	; (8006248 <acc_cpd_communication_test+0x34c>)
 800610c:	494b      	ldr	r1, [pc, #300]	; (800623c <acc_cpd_communication_test+0x340>)
 800610e:	2002      	movs	r0, #2
 8006110:	4798      	blx	r3
 8006112:	9a08      	ldr	r2, [sp, #32]
 8006114:	2300      	movs	r3, #0
 8006116:	7093      	strb	r3, [r2, #2]
 8006118:	e086      	b.n	8006228 <acc_cpd_communication_test+0x32c>
 800611a:	2300      	movs	r3, #0
 800611c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8006120:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 8006124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006126:	4a49      	ldr	r2, [pc, #292]	; (800624c <acc_cpd_communication_test+0x350>)
 8006128:	f8d3 8000 	ldr.w	r8, [r3]
 800612c:	9215      	str	r2, [sp, #84]	; 0x54
 800612e:	f7fe fb93 	bl	8004858 <acc_rss_integration_get_time>
 8006132:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800625c <acc_cpd_communication_test+0x360>
 8006136:	f8cd a014 	str.w	sl, [sp, #20]
 800613a:	ab12      	add	r3, sp, #72	; 0x48
 800613c:	9007      	str	r0, [sp, #28]
 800613e:	2608      	movs	r6, #8
 8006140:	9709      	str	r7, [sp, #36]	; 0x24
 8006142:	469a      	mov	sl, r3
 8006144:	9c05      	ldr	r4, [sp, #20]
 8006146:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800614a:	2500      	movs	r5, #0
 800614c:	463a      	mov	r2, r7
 800614e:	2121      	movs	r1, #33	; 0x21
 8006150:	4640      	mov	r0, r8
 8006152:	f7ff fb73 	bl	800583c <acc_sensor_reg_write>
 8006156:	4652      	mov	r2, sl
 8006158:	2121      	movs	r1, #33	; 0x21
 800615a:	4640      	mov	r0, r8
 800615c:	f7ff fb58 	bl	8005810 <acc_sensor_reg_read>
 8006160:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8006164:	42bb      	cmp	r3, r7
 8006166:	d01e      	beq.n	80061a6 <acc_cpd_communication_test+0x2aa>
 8006168:	f7fe fb7c 	bl	8004864 <acc_rss_integration_log_level>
 800616c:	f04f 0c04 	mov.w	ip, #4
 8006170:	2803      	cmp	r0, #3
 8006172:	4932      	ldr	r1, [pc, #200]	; (800623c <acc_cpd_communication_test+0x340>)
 8006174:	4623      	mov	r3, r4
 8006176:	464a      	mov	r2, r9
 8006178:	4660      	mov	r0, ip
 800617a:	d908      	bls.n	800618e <acc_cpd_communication_test+0x292>
 800617c:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8006180:	f8cd e008 	str.w	lr, [sp, #8]
 8006184:	e9cd c700 	strd	ip, r7, [sp]
 8006188:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 800618c:	47b8      	blx	r7
 800618e:	4623      	mov	r3, r4
 8006190:	3401      	adds	r4, #1
 8006192:	aa18      	add	r2, sp, #96	; 0x60
 8006194:	2c05      	cmp	r4, #5
 8006196:	f105 0501 	add.w	r5, r5, #1
 800619a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800619e:	d009      	beq.n	80061b4 <acc_cpd_communication_test+0x2b8>
 80061a0:	f833 7c10 	ldrh.w	r7, [r3, #-16]
 80061a4:	e7d2      	b.n	800614c <acc_cpd_communication_test+0x250>
 80061a6:	4623      	mov	r3, r4
 80061a8:	3401      	adds	r4, #1
 80061aa:	aa18      	add	r2, sp, #96	; 0x60
 80061ac:	2c05      	cmp	r4, #5
 80061ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80061b2:	d1f5      	bne.n	80061a0 <acc_cpd_communication_test+0x2a4>
 80061b4:	f7fe fb50 	bl	8004858 <acc_rss_integration_get_time>
 80061b8:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80061bc:	b93d      	cbnz	r5, 80061ce <acc_cpd_communication_test+0x2d2>
 80061be:	9b07      	ldr	r3, [sp, #28]
 80061c0:	1ac0      	subs	r0, r0, r3
 80061c2:	2813      	cmp	r0, #19
 80061c4:	f106 0308 	add.w	r3, r6, #8
 80061c8:	d84a      	bhi.n	8006260 <acc_cpd_communication_test+0x364>
 80061ca:	461e      	mov	r6, r3
 80061cc:	e7ba      	b.n	8006144 <acc_cpd_communication_test+0x248>
 80061ce:	e9cd 260e 	strd	r2, r6, [sp, #56]	; 0x38
 80061d2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80061d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061d8:	f7fe fb3e 	bl	8004858 <acc_rss_integration_get_time>
 80061dc:	462b      	mov	r3, r5
 80061de:	9d07      	ldr	r5, [sp, #28]
 80061e0:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 80061e4:	4915      	ldr	r1, [pc, #84]	; (800623c <acc_cpd_communication_test+0x340>)
 80061e6:	4606      	mov	r6, r0
 80061e8:	2204      	movs	r2, #4
 80061ea:	9200      	str	r2, [sp, #0]
 80061ec:	2000      	movs	r0, #0
 80061ee:	4a18      	ldr	r2, [pc, #96]	; (8006250 <acc_cpd_communication_test+0x354>)
 80061f0:	1b75      	subs	r5, r6, r5
 80061f2:	9510      	str	r5, [sp, #64]	; 0x40
 80061f4:	47a0      	blx	r4
 80061f6:	9a08      	ldr	r2, [sp, #32]
 80061f8:	2303      	movs	r3, #3
 80061fa:	7053      	strb	r3, [r2, #1]
 80061fc:	e6a7      	b.n	8005f4e <acc_cpd_communication_test+0x52>
 80061fe:	4607      	mov	r7, r0
 8006200:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006202:	9b07      	ldr	r3, [sp, #28]
 8006204:	900b      	str	r0, [sp, #44]	; 0x2c
 8006206:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006208:	4a12      	ldr	r2, [pc, #72]	; (8006254 <acc_cpd_communication_test+0x358>)
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	900a      	str	r0, [sp, #40]	; 0x28
 800620e:	462b      	mov	r3, r5
 8006210:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 8006214:	4909      	ldr	r1, [pc, #36]	; (800623c <acc_cpd_communication_test+0x340>)
 8006216:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006218:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800621c:	2000      	movs	r0, #0
 800621e:	47a0      	blx	r4
 8006220:	9a08      	ldr	r2, [sp, #32]
 8006222:	2303      	movs	r3, #3
 8006224:	1b7f      	subs	r7, r7, r5
 8006226:	7093      	strb	r3, [r2, #2]
 8006228:	4640      	mov	r0, r8
 800622a:	f7fe fb03 	bl	8004834 <acc_rss_integration_mem_free>
 800622e:	e68e      	b.n	8005f4e <acc_cpd_communication_test+0x52>
 8006230:	0800bc88 	.word	0x0800bc88
 8006234:	200003c8 	.word	0x200003c8
 8006238:	0800bba0 	.word	0x0800bba0
 800623c:	0800b9f0 	.word	0x0800b9f0
 8006240:	0800bb50 	.word	0x0800bb50
 8006244:	080096bc 	.word	0x080096bc
 8006248:	0800bb2c 	.word	0x0800bb2c
 800624c:	aaaa5555 	.word	0xaaaa5555
 8006250:	0800bc0c 	.word	0x0800bc0c
 8006254:	0800bc4c 	.word	0x0800bc4c
 8006258:	0800badc 	.word	0x0800badc
 800625c:	0800ba48 	.word	0x0800ba48
 8006260:	e9cd 260e 	strd	r2, r6, [sp, #56]	; 0x38
 8006264:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006268:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800626a:	f7fe faf5 	bl	8004858 <acc_rss_integration_get_time>
 800626e:	9b07      	ldr	r3, [sp, #28]
 8006270:	1ac3      	subs	r3, r0, r3
 8006272:	9310      	str	r3, [sp, #64]	; 0x40
 8006274:	f7fe faf6 	bl	8004864 <acc_rss_integration_log_level>
 8006278:	2801      	cmp	r0, #1
 800627a:	d905      	bls.n	8006288 <acc_cpd_communication_test+0x38c>
 800627c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8006280:	4a63      	ldr	r2, [pc, #396]	; (8006410 <acc_cpd_communication_test+0x514>)
 8006282:	4964      	ldr	r1, [pc, #400]	; (8006414 <acc_cpd_communication_test+0x518>)
 8006284:	2002      	movs	r0, #2
 8006286:	4798      	blx	r3
 8006288:	9a08      	ldr	r2, [sp, #32]
 800628a:	2300      	movs	r3, #0
 800628c:	7053      	strb	r3, [r2, #1]
 800628e:	e65e      	b.n	8005f4e <acc_cpd_communication_test+0x52>
 8006290:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8006294:	eef8 8a67 	vcvt.f32.u32	s17, s15
 8006298:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800629c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80062a0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80062a4:	eef8 9a67 	vcvt.f32.u32	s19, s15
 80062a8:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80062ac:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80062b0:	ee07 aa10 	vmov	s14, sl
 80062b4:	ee69 7a8a 	vmul.f32	s15, s19, s20
 80062b8:	ee28 9a88 	vmul.f32	s18, s17, s16
 80062bc:	eef8 aa47 	vcvt.f32.u32	s21, s14
 80062c0:	ee39 9a67 	vsub.f32	s18, s18, s15
 80062c4:	f7fe face 	bl	8004864 <acc_rss_integration_log_level>
 80062c8:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80062cc:	2801      	cmp	r0, #1
 80062ce:	eeb8 ba67 	vcvt.f32.u32	s22, s15
 80062d2:	d919      	bls.n	8006308 <acc_cpd_communication_test+0x40c>
 80062d4:	ee68 8aaa 	vmul.f32	s17, s17, s21
 80062d8:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80062dc:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 80062e0:	ee78 8aca 	vsub.f32	s17, s17, s20
 80062e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80062e8:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80062ec:	4b4a      	ldr	r3, [pc, #296]	; (8006418 <acc_cpd_communication_test+0x51c>)
 80062ee:	4a4b      	ldr	r2, [pc, #300]	; (800641c <acc_cpd_communication_test+0x520>)
 80062f0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80062f2:	4948      	ldr	r1, [pc, #288]	; (8006414 <acc_cpd_communication_test+0x518>)
 80062f4:	2002      	movs	r0, #2
 80062f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80062fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006302:	ee17 3a90 	vmov	r3, s15
 8006306:	47a0      	blx	r4
 8006308:	f7fe faac 	bl	8004864 <acc_rss_integration_log_level>
 800630c:	2801      	cmp	r0, #1
 800630e:	f67f ae3c 	bls.w	8005f8a <acc_cpd_communication_test+0x8e>
 8006312:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006316:	ee69 9aaa 	vmul.f32	s19, s19, s21
 800631a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8006420 <acc_cpd_communication_test+0x524>
 800631e:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <acc_cpd_communication_test+0x51c>)
 8006320:	4a40      	ldr	r2, [pc, #256]	; (8006424 <acc_cpd_communication_test+0x528>)
 8006322:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006324:	493b      	ldr	r1, [pc, #236]	; (8006414 <acc_cpd_communication_test+0x518>)
 8006326:	ee38 8a69 	vsub.f32	s16, s16, s19
 800632a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800632e:	eec8 7a09 	vdiv.f32	s15, s16, s18
 8006332:	2002      	movs	r0, #2
 8006334:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800633c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006340:	ee17 3a90 	vmov	r3, s15
 8006344:	47a0      	blx	r4
 8006346:	e620      	b.n	8005f8a <acc_cpd_communication_test+0x8e>
 8006348:	f7fe fa8c 	bl	8004864 <acc_rss_integration_log_level>
 800634c:	2801      	cmp	r0, #1
 800634e:	d905      	bls.n	800635c <acc_cpd_communication_test+0x460>
 8006350:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8006354:	4a34      	ldr	r2, [pc, #208]	; (8006428 <acc_cpd_communication_test+0x52c>)
 8006356:	492f      	ldr	r1, [pc, #188]	; (8006414 <acc_cpd_communication_test+0x518>)
 8006358:	2002      	movs	r0, #2
 800635a:	4798      	blx	r3
 800635c:	9b08      	ldr	r3, [sp, #32]
 800635e:	2400      	movs	r4, #0
 8006360:	70dc      	strb	r4, [r3, #3]
 8006362:	f7fe fa7f 	bl	8004864 <acc_rss_integration_log_level>
 8006366:	2801      	cmp	r0, #1
 8006368:	d908      	bls.n	800637c <acc_cpd_communication_test+0x480>
 800636a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4a2f      	ldr	r2, [pc, #188]	; (800642c <acc_cpd_communication_test+0x530>)
 8006370:	4928      	ldr	r1, [pc, #160]	; (8006414 <acc_cpd_communication_test+0x518>)
 8006372:	4623      	mov	r3, r4
 8006374:	2002      	movs	r0, #2
 8006376:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800637a:	47a0      	blx	r4
 800637c:	f7fe fa72 	bl	8004864 <acc_rss_integration_log_level>
 8006380:	2801      	cmp	r0, #1
 8006382:	f67f ade4 	bls.w	8005f4e <acc_cpd_communication_test+0x52>
 8006386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800638e:	4a27      	ldr	r2, [pc, #156]	; (800642c <acc_cpd_communication_test+0x530>)
 8006390:	4920      	ldr	r1, [pc, #128]	; (8006414 <acc_cpd_communication_test+0x518>)
 8006392:	2301      	movs	r3, #1
 8006394:	2002      	movs	r0, #2
 8006396:	47a0      	blx	r4
 8006398:	e5d9      	b.n	8005f4e <acc_cpd_communication_test+0x52>
 800639a:	f7fe fa63 	bl	8004864 <acc_rss_integration_log_level>
 800639e:	2801      	cmp	r0, #1
 80063a0:	d905      	bls.n	80063ae <acc_cpd_communication_test+0x4b2>
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <acc_cpd_communication_test+0x51c>)
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <acc_cpd_communication_test+0x534>)
 80063a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a8:	491a      	ldr	r1, [pc, #104]	; (8006414 <acc_cpd_communication_test+0x518>)
 80063aa:	2002      	movs	r0, #2
 80063ac:	4798      	blx	r3
 80063ae:	9a08      	ldr	r2, [sp, #32]
 80063b0:	2300      	movs	r3, #0
 80063b2:	7113      	strb	r3, [r2, #4]
 80063b4:	e5e1      	b.n	8005f7a <acc_cpd_communication_test+0x7e>
 80063b6:	9a08      	ldr	r2, [sp, #32]
 80063b8:	2303      	movs	r3, #3
 80063ba:	7093      	strb	r3, [r2, #2]
 80063bc:	e5c7      	b.n	8005f4e <acc_cpd_communication_test+0x52>
 80063be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063c0:	2400      	movs	r4, #0
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
 80063c8:	aa14      	add	r2, sp, #80	; 0x50
 80063ca:	4621      	mov	r1, r4
 80063cc:	f7ff fa20 	bl	8005810 <acc_sensor_reg_read>
 80063d0:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80063d4:	f241 1312 	movw	r3, #4370	; 0x1112
 80063d8:	429a      	cmp	r2, r3
 80063da:	d00a      	beq.n	80063f2 <acc_cpd_communication_test+0x4f6>
 80063dc:	9200      	str	r2, [sp, #0]
 80063de:	4620      	mov	r0, r4
 80063e0:	4a14      	ldr	r2, [pc, #80]	; (8006434 <acc_cpd_communication_test+0x538>)
 80063e2:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 80063e6:	490b      	ldr	r1, [pc, #44]	; (8006414 <acc_cpd_communication_test+0x518>)
 80063e8:	47a0      	blx	r4
 80063ea:	9a08      	ldr	r2, [sp, #32]
 80063ec:	2303      	movs	r3, #3
 80063ee:	7013      	strb	r3, [r2, #0]
 80063f0:	e5aa      	b.n	8005f48 <acc_cpd_communication_test+0x4c>
 80063f2:	f7fe fa37 	bl	8004864 <acc_rss_integration_log_level>
 80063f6:	2801      	cmp	r0, #1
 80063f8:	d905      	bls.n	8006406 <acc_cpd_communication_test+0x50a>
 80063fa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80063fe:	4a0e      	ldr	r2, [pc, #56]	; (8006438 <acc_cpd_communication_test+0x53c>)
 8006400:	4904      	ldr	r1, [pc, #16]	; (8006414 <acc_cpd_communication_test+0x518>)
 8006402:	2002      	movs	r0, #2
 8006404:	4798      	blx	r3
 8006406:	9a08      	ldr	r2, [sp, #32]
 8006408:	2300      	movs	r3, #0
 800640a:	7013      	strb	r3, [r2, #0]
 800640c:	e59c      	b.n	8005f48 <acc_cpd_communication_test+0x4c>
 800640e:	bf00      	nop
 8006410:	0800bab4 	.word	0x0800bab4
 8006414:	0800b9f0 	.word	0x0800b9f0
 8006418:	200003c8 	.word	0x200003c8
 800641c:	0800bbd0 	.word	0x0800bbd0
 8006420:	447a0000 	.word	0x447a0000
 8006424:	0800bbf0 	.word	0x0800bbf0
 8006428:	0800bb68 	.word	0x0800bb68
 800642c:	0800bb80 	.word	0x0800bb80
 8006430:	0800bbb8 	.word	0x0800bbb8
 8006434:	0800ba08 	.word	0x0800ba08
 8006438:	0800b9d4 	.word	0x0800b9d4

0800643c <acc_cpd_hibernate_test>:
 800643c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006440:	b085      	sub	sp, #20
 8006442:	ab03      	add	r3, sp, #12
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	2400      	movs	r4, #0
 8006448:	ab02      	add	r3, sp, #8
 800644a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800644e:	4606      	mov	r6, r0
 8006450:	460f      	mov	r7, r1
 8006452:	f7fe fe81 	bl	8005158 <acc_sensor_protocol_r2_prepare_load>
 8006456:	b350      	cbz	r0, 80064ae <acc_cpd_hibernate_test+0x72>
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800650c <acc_cpd_hibernate_test+0xd0>
 800645e:	9902      	ldr	r1, [sp, #8]
 8006460:	f5c4 75d5 	rsb	r5, r4, #426	; 0x1aa
 8006464:	429d      	cmp	r5, r3
 8006466:	bf28      	it	cs
 8006468:	461d      	movcs	r5, r3
 800646a:	ea4f 0954 	mov.w	r9, r4, lsr #1
 800646e:	086a      	lsrs	r2, r5, #1
 8006470:	eb08 0089 	add.w	r0, r8, r9, lsl #2
 8006474:	f001 fdfe 	bl	8008074 <acc_confprogram_copy>
 8006478:	462b      	mov	r3, r5
 800647a:	463a      	mov	r2, r7
 800647c:	fa1f f189 	uxth.w	r1, r9
 8006480:	4630      	mov	r0, r6
 8006482:	f7fe fd97 	bl	8004fb4 <acc_sensor_r2_load_confmem>
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	441c      	add	r4, r3
 800648a:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
 800648e:	d3e6      	bcc.n	800645e <acc_cpd_hibernate_test+0x22>
 8006490:	2145      	movs	r1, #69	; 0x45
 8006492:	4630      	mov	r0, r6
 8006494:	f7fe fec4 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 8006498:	4605      	mov	r5, r0
 800649a:	b990      	cbnz	r0, 80064c2 <acc_cpd_hibernate_test+0x86>
 800649c:	4b17      	ldr	r3, [pc, #92]	; (80064fc <acc_cpd_hibernate_test+0xc0>)
 800649e:	4a18      	ldr	r2, [pc, #96]	; (8006500 <acc_cpd_hibernate_test+0xc4>)
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	4918      	ldr	r1, [pc, #96]	; (8006504 <acc_cpd_hibernate_test+0xc8>)
 80064a4:	4798      	blx	r3
 80064a6:	4628      	mov	r0, r5
 80064a8:	b005      	add	sp, #20
 80064aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <acc_cpd_hibernate_test+0xc0>)
 80064b0:	4a15      	ldr	r2, [pc, #84]	; (8006508 <acc_cpd_hibernate_test+0xcc>)
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	4913      	ldr	r1, [pc, #76]	; (8006504 <acc_cpd_hibernate_test+0xc8>)
 80064b6:	4605      	mov	r5, r0
 80064b8:	4798      	blx	r3
 80064ba:	4628      	mov	r0, r5
 80064bc:	b005      	add	sp, #20
 80064be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064c2:	2301      	movs	r3, #1
 80064c4:	220b      	movs	r2, #11
 80064c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7ff f82c 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 80064d0:	4605      	mov	r5, r0
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d0f1      	beq.n	80064ba <acc_cpd_hibernate_test+0x7e>
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7fe f926 	bl	8004728 <acc_rss_integration_sensor_device_hibernate_enter>
 80064dc:	4630      	mov	r0, r6
 80064de:	f7fe f92b 	bl	8004738 <acc_rss_integration_sensor_device_hibernate_exit>
 80064e2:	4630      	mov	r0, r6
 80064e4:	2301      	movs	r3, #1
 80064e6:	2202      	movs	r2, #2
 80064e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80064ec:	f7ff f81c 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 80064f0:	4605      	mov	r5, r0
 80064f2:	4628      	mov	r0, r5
 80064f4:	b005      	add	sp, #20
 80064f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064fa:	bf00      	nop
 80064fc:	200003c8 	.word	0x200003c8
 8006500:	0800bcdc 	.word	0x0800bcdc
 8006504:	0800bcc8 	.word	0x0800bcc8
 8006508:	0800bc90 	.word	0x0800bc90
 800650c:	0800a1c0 	.word	0x0800a1c0

08006510 <wait_for_event.constprop.0>:
 8006510:	b530      	push	{r4, r5, lr}
 8006512:	2a00      	cmp	r2, #0
 8006514:	bf18      	it	ne
 8006516:	2205      	movne	r2, #5
 8006518:	b083      	sub	sp, #12
 800651a:	bf08      	it	eq
 800651c:	2200      	moveq	r2, #0
 800651e:	2b00      	cmp	r3, #0
 8006520:	460c      	mov	r4, r1
 8006522:	bf18      	it	ne
 8006524:	2264      	movne	r2, #100	; 0x64
 8006526:	ab01      	add	r3, sp, #4
 8006528:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800652c:	4605      	mov	r5, r0
 800652e:	f7fe ff91 	bl	8005454 <acc_sensor_protocol_r2_wait_for_event>
 8006532:	b158      	cbz	r0, 800654c <wait_for_event.constprop.0+0x3c>
 8006534:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006538:	42a3      	cmp	r3, r4
 800653a:	b29a      	uxth	r2, r3
 800653c:	d008      	beq.n	8006550 <wait_for_event.constprop.0+0x40>
 800653e:	4907      	ldr	r1, [pc, #28]	; (800655c <wait_for_event.constprop.0+0x4c>)
 8006540:	4a07      	ldr	r2, [pc, #28]	; (8006560 <wait_for_event.constprop.0+0x50>)
 8006542:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8006544:	4907      	ldr	r1, [pc, #28]	; (8006564 <wait_for_event.constprop.0+0x54>)
 8006546:	2000      	movs	r0, #0
 8006548:	47a0      	blx	r4
 800654a:	2000      	movs	r0, #0
 800654c:	b003      	add	sp, #12
 800654e:	bd30      	pop	{r4, r5, pc}
 8006550:	2a02      	cmp	r2, #2
 8006552:	d1fb      	bne.n	800654c <wait_for_event.constprop.0+0x3c>
 8006554:	4628      	mov	r0, r5
 8006556:	f7fe feef 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 800655a:	e7f7      	b.n	800654c <wait_for_event.constprop.0+0x3c>
 800655c:	200003c8 	.word	0x200003c8
 8006560:	0800bd08 	.word	0x0800bd08
 8006564:	0800bd34 	.word	0x0800bd34

08006568 <acc_cpd_interrupt_test>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	ed2d 8b02 	vpush	{d8}
 8006570:	f8d2 a000 	ldr.w	sl, [r2]
 8006574:	ed92 8a01 	vldr	s16, [r2, #4]
 8006578:	b091      	sub	sp, #68	; 0x44
 800657a:	4683      	mov	fp, r0
 800657c:	ac0e      	add	r4, sp, #56	; 0x38
 800657e:	461d      	mov	r5, r3
 8006580:	9203      	str	r2, [sp, #12]
 8006582:	9400      	str	r4, [sp, #0]
 8006584:	460a      	mov	r2, r1
 8006586:	2400      	movs	r4, #0
 8006588:	4650      	mov	r0, sl
 800658a:	4659      	mov	r1, fp
 800658c:	ab0d      	add	r3, sp, #52	; 0x34
 800658e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8006592:	950b      	str	r5, [sp, #44]	; 0x2c
 8006594:	f7fe fde0 	bl	8005158 <acc_sensor_protocol_r2_prepare_load>
 8006598:	2800      	cmp	r0, #0
 800659a:	f000 8131 	beq.w	8006800 <acc_cpd_interrupt_test+0x298>
 800659e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800686c <acc_cpd_interrupt_test+0x304>
 80065a2:	eddf 7ab3 	vldr	s15, [pc, #716]	; 8006870 <acc_cpd_interrupt_test+0x308>
 80065a6:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8006874 <acc_cpd_interrupt_test+0x30c>
 80065aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80065ac:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 80068a8 <acc_cpd_interrupt_test+0x340>
 80065b0:	ee68 6a26 	vmul.f32	s13, s16, s13
 80065b4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80065b8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80065bc:	ee28 7a07 	vmul.f32	s14, s16, s14
 80065c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c4:	ee16 3a90 	vmov	r3, s13
 80065c8:	ee17 1a90 	vmov	r1, s15
 80065cc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80065d0:	b29e      	uxth	r6, r3
 80065d2:	0c1b      	lsrs	r3, r3, #16
 80065d4:	ee17 5a90 	vmov	r5, s15
 80065d8:	3b01      	subs	r3, #1
 80065da:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80065de:	3901      	subs	r1, #1
 80065e0:	9308      	str	r3, [sp, #32]
 80065e2:	b28b      	uxth	r3, r1
 80065e4:	ee17 2a90 	vmov	r2, s15
 80065e8:	9306      	str	r3, [sp, #24]
 80065ea:	0c2b      	lsrs	r3, r5, #16
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	b2ab      	uxth	r3, r5
 80065f0:	930a      	str	r3, [sp, #40]	; 0x28
 80065f2:	b293      	uxth	r3, r2
 80065f4:	3e01      	subs	r6, #1
 80065f6:	9304      	str	r3, [sp, #16]
 80065f8:	0c13      	lsrs	r3, r2, #16
 80065fa:	ee08 aa10 	vmov	s16, sl
 80065fe:	9607      	str	r6, [sp, #28]
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	46da      	mov	sl, fp
 8006604:	f5c4 78d5 	rsb	r8, r4, #426	; 0x1aa
 8006608:	4580      	cmp	r8, r0
 800660a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800660c:	4b9a      	ldr	r3, [pc, #616]	; (8006878 <acc_cpd_interrupt_test+0x310>)
 800660e:	bf28      	it	cs
 8006610:	4680      	movcs	r8, r0
 8006612:	ea4f 0b54 	mov.w	fp, r4, lsr #1
 8006616:	4629      	mov	r1, r5
 8006618:	eb03 008b 	add.w	r0, r3, fp, lsl #2
 800661c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8006620:	f001 fd28 	bl	8008074 <acc_confprogram_copy>
 8006624:	9b05      	ldr	r3, [sp, #20]
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	b2a6      	uxth	r6, r4
 800662a:	fa1f f788 	uxth.w	r7, r8
 800662e:	2300      	movs	r3, #0
 8006630:	4628      	mov	r0, r5
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	463a      	mov	r2, r7
 8006636:	4631      	mov	r1, r6
 8006638:	464b      	mov	r3, r9
 800663a:	f001 fc29 	bl	8007e90 <acc_confprogram_patch_offset>
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	2301      	movs	r3, #1
 8006644:	4628      	mov	r0, r5
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	463a      	mov	r2, r7
 800664a:	4631      	mov	r1, r6
 800664c:	464b      	mov	r3, r9
 800664e:	f001 fc1f 	bl	8007e90 <acc_confprogram_patch_offset>
 8006652:	9b06      	ldr	r3, [sp, #24]
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	2310      	movs	r3, #16
 8006658:	4628      	mov	r0, r5
 800665a:	463a      	mov	r2, r7
 800665c:	4631      	mov	r1, r6
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	464b      	mov	r3, r9
 8006662:	f001 fc15 	bl	8007e90 <acc_confprogram_patch_offset>
 8006666:	9a08      	ldr	r2, [sp, #32]
 8006668:	9201      	str	r2, [sp, #4]
 800666a:	2311      	movs	r3, #17
 800666c:	4628      	mov	r0, r5
 800666e:	463a      	mov	r2, r7
 8006670:	4631      	mov	r1, r6
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	464b      	mov	r3, r9
 8006676:	f001 fc0b 	bl	8007e90 <acc_confprogram_patch_offset>
 800667a:	9a07      	ldr	r2, [sp, #28]
 800667c:	9201      	str	r2, [sp, #4]
 800667e:	2312      	movs	r3, #18
 8006680:	4628      	mov	r0, r5
 8006682:	463a      	mov	r2, r7
 8006684:	4631      	mov	r1, r6
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	464b      	mov	r3, r9
 800668a:	f001 fc01 	bl	8007e90 <acc_confprogram_patch_offset>
 800668e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006690:	9201      	str	r2, [sp, #4]
 8006692:	2309      	movs	r3, #9
 8006694:	4628      	mov	r0, r5
 8006696:	463a      	mov	r2, r7
 8006698:	4631      	mov	r1, r6
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	464b      	mov	r3, r9
 800669e:	f001 fbf7 	bl	8007e90 <acc_confprogram_patch_offset>
 80066a2:	4628      	mov	r0, r5
 80066a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80066a6:	230a      	movs	r3, #10
 80066a8:	e9cd 3500 	strd	r3, r5, [sp]
 80066ac:	463a      	mov	r2, r7
 80066ae:	4631      	mov	r1, r6
 80066b0:	464b      	mov	r3, r9
 80066b2:	f001 fbed 	bl	8007e90 <acc_confprogram_patch_offset>
 80066b6:	9803      	ldr	r0, [sp, #12]
 80066b8:	4643      	mov	r3, r8
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	4652      	mov	r2, sl
 80066be:	fa1f f18b 	uxth.w	r1, fp
 80066c2:	f7fe fc77 	bl	8004fb4 <acc_sensor_r2_load_confmem>
 80066c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80066c8:	4404      	add	r4, r0
 80066ca:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
 80066ce:	d399      	bcc.n	8006604 <acc_cpd_interrupt_test+0x9c>
 80066d0:	ee18 0a10 	vmov	r0, s16
 80066d4:	2110      	movs	r1, #16
 80066d6:	f7fe fda3 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 80066da:	ee18 aa10 	vmov	sl, s16
 80066de:	4605      	mov	r5, r0
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f000 8099 	beq.w	8006818 <acc_cpd_interrupt_test+0x2b0>
 80066e6:	2400      	movs	r4, #0
 80066e8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8006888 <acc_cpd_interrupt_test+0x320>
 80066ec:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80068ac <acc_cpd_interrupt_test+0x344>
 80066f0:	ed9f 8a62 	vldr	s16, [pc, #392]	; 800687c <acc_cpd_interrupt_test+0x314>
 80066f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80066f8:	4625      	mov	r5, r4
 80066fa:	f7fe f8b3 	bl	8004864 <acc_rss_integration_log_level>
 80066fe:	2803      	cmp	r0, #3
 8006700:	b2a6      	uxth	r6, r4
 8006702:	d907      	bls.n	8006714 <acc_cpd_interrupt_test+0x1ac>
 8006704:	ee18 1a10 	vmov	r1, s16
 8006708:	f8d8 7034 	ldr.w	r7, [r8, #52]	; 0x34
 800670c:	1c63      	adds	r3, r4, #1
 800670e:	464a      	mov	r2, r9
 8006710:	2004      	movs	r0, #4
 8006712:	47b8      	blx	r7
 8006714:	fab6 f386 	clz	r3, r6
 8006718:	f89b 2008 	ldrb.w	r2, [fp, #8]
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	210a      	movs	r1, #10
 8006720:	4650      	mov	r0, sl
 8006722:	f7ff fef5 	bl	8006510 <wait_for_event.constprop.0>
 8006726:	2800      	cmp	r0, #0
 8006728:	f000 8081 	beq.w	800682e <acc_cpd_interrupt_test+0x2c6>
 800672c:	b16c      	cbz	r4, 800674a <acc_cpd_interrupt_test+0x1e2>
 800672e:	aa0d      	add	r2, sp, #52	; 0x34
 8006730:	21ed      	movs	r1, #237	; 0xed
 8006732:	4650      	mov	r0, sl
 8006734:	f7ff f86c 	bl	8005810 <acc_sensor_reg_read>
 8006738:	ab10      	add	r3, sp, #64	; 0x40
 800673a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800673e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8006742:	f823 2c08 	strh.w	r2, [r3, #-8]
 8006746:	3501      	adds	r5, #1
 8006748:	b2ad      	uxth	r5, r5
 800674a:	4650      	mov	r0, sl
 800674c:	aa0d      	add	r2, sp, #52	; 0x34
 800674e:	2127      	movs	r1, #39	; 0x27
 8006750:	f7ff f85e 	bl	8005810 <acc_sensor_reg_read>
 8006754:	4650      	mov	r0, sl
 8006756:	f7fe fdef 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 800675a:	2800      	cmp	r0, #0
 800675c:	d06d      	beq.n	800683a <acc_cpd_interrupt_test+0x2d2>
 800675e:	f7fe f881 	bl	8004864 <acc_rss_integration_log_level>
 8006762:	2803      	cmp	r0, #3
 8006764:	d908      	bls.n	8006778 <acc_cpd_interrupt_test+0x210>
 8006766:	f8d8 6034 	ldr.w	r6, [r8, #52]	; 0x34
 800676a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800676e:	4a44      	ldr	r2, [pc, #272]	; (8006880 <acc_cpd_interrupt_test+0x318>)
 8006770:	ee18 1a10 	vmov	r1, s16
 8006774:	2004      	movs	r0, #4
 8006776:	47b0      	blx	r6
 8006778:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800677c:	3401      	adds	r4, #1
 800677e:	42a3      	cmp	r3, r4
 8006780:	d15d      	bne.n	800683e <acc_cpd_interrupt_test+0x2d6>
 8006782:	f7fe f86f 	bl	8004864 <acc_rss_integration_log_level>
 8006786:	2803      	cmp	r0, #3
 8006788:	d906      	bls.n	8006798 <acc_cpd_interrupt_test+0x230>
 800678a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800678e:	4a3d      	ldr	r2, [pc, #244]	; (8006884 <acc_cpd_interrupt_test+0x31c>)
 8006790:	ee18 1a10 	vmov	r1, s16
 8006794:	2004      	movs	r0, #4
 8006796:	4798      	blx	r3
 8006798:	2c05      	cmp	r4, #5
 800679a:	d1ae      	bne.n	80066fa <acc_cpd_interrupt_test+0x192>
 800679c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80067a0:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 80067a4:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80067a8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80067ac:	9a03      	ldr	r2, [sp, #12]
 80067ae:	1a1b      	subs	r3, r3, r0
 80067b0:	1b09      	subs	r1, r1, r4
 80067b2:	b289      	uxth	r1, r1
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ee07 1a10 	vmov	s14, r1
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80067c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067c6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80067ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 80067ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80067d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d4:	7a12      	ldrb	r2, [r2, #8]
 80067d6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80067da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067de:	ed83 7a00 	vstr	s14, [r3]
 80067e2:	edc3 7a01 	vstr	s15, [r3, #4]
 80067e6:	4650      	mov	r0, sl
 80067e8:	2300      	movs	r3, #0
 80067ea:	2102      	movs	r1, #2
 80067ec:	f7ff fe90 	bl	8006510 <wait_for_event.constprop.0>
 80067f0:	4605      	mov	r5, r0
 80067f2:	b958      	cbnz	r0, 800680c <acc_cpd_interrupt_test+0x2a4>
 80067f4:	4b24      	ldr	r3, [pc, #144]	; (8006888 <acc_cpd_interrupt_test+0x320>)
 80067f6:	4a25      	ldr	r2, [pc, #148]	; (800688c <acc_cpd_interrupt_test+0x324>)
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	4920      	ldr	r1, [pc, #128]	; (800687c <acc_cpd_interrupt_test+0x314>)
 80067fc:	4798      	blx	r3
 80067fe:	e005      	b.n	800680c <acc_cpd_interrupt_test+0x2a4>
 8006800:	4b21      	ldr	r3, [pc, #132]	; (8006888 <acc_cpd_interrupt_test+0x320>)
 8006802:	4a23      	ldr	r2, [pc, #140]	; (8006890 <acc_cpd_interrupt_test+0x328>)
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	491d      	ldr	r1, [pc, #116]	; (800687c <acc_cpd_interrupt_test+0x314>)
 8006808:	4605      	mov	r5, r0
 800680a:	4798      	blx	r3
 800680c:	4628      	mov	r0, r5
 800680e:	b011      	add	sp, #68	; 0x44
 8006810:	ecbd 8b02 	vpop	{d8}
 8006814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <acc_cpd_interrupt_test+0x320>)
 800681a:	4a1e      	ldr	r2, [pc, #120]	; (8006894 <acc_cpd_interrupt_test+0x32c>)
 800681c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681e:	4917      	ldr	r1, [pc, #92]	; (800687c <acc_cpd_interrupt_test+0x314>)
 8006820:	4798      	blx	r3
 8006822:	4628      	mov	r0, r5
 8006824:	b011      	add	sp, #68	; 0x44
 8006826:	ecbd 8b02 	vpop	{d8}
 800682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682e:	4b16      	ldr	r3, [pc, #88]	; (8006888 <acc_cpd_interrupt_test+0x320>)
 8006830:	b9be      	cbnz	r6, 8006862 <acc_cpd_interrupt_test+0x2fa>
 8006832:	4a19      	ldr	r2, [pc, #100]	; (8006898 <acc_cpd_interrupt_test+0x330>)
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006836:	4911      	ldr	r1, [pc, #68]	; (800687c <acc_cpd_interrupt_test+0x314>)
 8006838:	4798      	blx	r3
 800683a:	2500      	movs	r5, #0
 800683c:	e7e6      	b.n	800680c <acc_cpd_interrupt_test+0x2a4>
 800683e:	4c12      	ldr	r4, [pc, #72]	; (8006888 <acc_cpd_interrupt_test+0x320>)
 8006840:	490e      	ldr	r1, [pc, #56]	; (800687c <acc_cpd_interrupt_test+0x314>)
 8006842:	4a16      	ldr	r2, [pc, #88]	; (800689c <acc_cpd_interrupt_test+0x334>)
 8006844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006846:	2000      	movs	r0, #0
 8006848:	4798      	blx	r3
 800684a:	4650      	mov	r0, sl
 800684c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006850:	f7fe fe94 	bl	800557c <acc_sensor_protocol_r2_stop>
 8006854:	2800      	cmp	r0, #0
 8006856:	d1f0      	bne.n	800683a <acc_cpd_interrupt_test+0x2d2>
 8006858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800685a:	4a11      	ldr	r2, [pc, #68]	; (80068a0 <acc_cpd_interrupt_test+0x338>)
 800685c:	4907      	ldr	r1, [pc, #28]	; (800687c <acc_cpd_interrupt_test+0x314>)
 800685e:	4798      	blx	r3
 8006860:	e7eb      	b.n	800683a <acc_cpd_interrupt_test+0x2d2>
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <acc_cpd_interrupt_test+0x33c>)
 8006864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006866:	4905      	ldr	r1, [pc, #20]	; (800687c <acc_cpd_interrupt_test+0x314>)
 8006868:	4798      	blx	r3
 800686a:	e7e6      	b.n	800683a <acc_cpd_interrupt_test+0x2d2>
 800686c:	3dcccccd 	.word	0x3dcccccd
 8006870:	3751b717 	.word	0x3751b717
 8006874:	36a7c5ac 	.word	0x36a7c5ac
 8006878:	0800a1c0 	.word	0x0800a1c0
 800687c:	0800bd34 	.word	0x0800bd34
 8006880:	0800be8c 	.word	0x0800be8c
 8006884:	0800bea8 	.word	0x0800bea8
 8006888:	200003c8 	.word	0x200003c8
 800688c:	0800bf40 	.word	0x0800bf40
 8006890:	0800bd48 	.word	0x0800bd48
 8006894:	0800bd80 	.word	0x0800bd80
 8006898:	0800bdc4 	.word	0x0800bdc4
 800689c:	0800bed8 	.word	0x0800bed8
 80068a0:	0800bf2c 	.word	0x0800bf2c
 80068a4:	0800be1c 	.word	0x0800be1c
 80068a8:	0800d1d4 	.word	0x0800d1d4
 80068ac:	0800bdac 	.word	0x0800bdac

080068b0 <acc_cpd_power_cycle_test>:
 80068b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	4605      	mov	r5, r0
 80068b8:	f7fd ffd4 	bl	8004864 <acc_rss_integration_log_level>
 80068bc:	2801      	cmp	r0, #1
 80068be:	d905      	bls.n	80068cc <acc_cpd_power_cycle_test+0x1c>
 80068c0:	4b35      	ldr	r3, [pc, #212]	; (8006998 <acc_cpd_power_cycle_test+0xe8>)
 80068c2:	4a36      	ldr	r2, [pc, #216]	; (800699c <acc_cpd_power_cycle_test+0xec>)
 80068c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c6:	4936      	ldr	r1, [pc, #216]	; (80069a0 <acc_cpd_power_cycle_test+0xf0>)
 80068c8:	2002      	movs	r0, #2
 80068ca:	4798      	blx	r3
 80068cc:	4f35      	ldr	r7, [pc, #212]	; (80069a4 <acc_cpd_power_cycle_test+0xf4>)
 80068ce:	2421      	movs	r4, #33	; 0x21
 80068d0:	f241 2634 	movw	r6, #4660	; 0x1234
 80068d4:	f04f 0800 	mov.w	r8, #0
 80068d8:	e002      	b.n	80068e0 <acc_cpd_power_cycle_test+0x30>
 80068da:	f837 6b02 	ldrh.w	r6, [r7], #2
 80068de:	b29c      	uxth	r4, r3
 80068e0:	4632      	mov	r2, r6
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	f7fe ffa9 	bl	800583c <acc_sensor_reg_write>
 80068ea:	f10d 0206 	add.w	r2, sp, #6
 80068ee:	4621      	mov	r1, r4
 80068f0:	4628      	mov	r0, r5
 80068f2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80068f6:	f7fe ff8b 	bl	8005810 <acc_sensor_reg_read>
 80068fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80068fe:	42b3      	cmp	r3, r6
 8006900:	f104 0301 	add.w	r3, r4, #1
 8006904:	d13a      	bne.n	800697c <acc_cpd_power_cycle_test+0xcc>
 8006906:	2c28      	cmp	r4, #40	; 0x28
 8006908:	d1e7      	bne.n	80068da <acc_cpd_power_cycle_test+0x2a>
 800690a:	f7fd ffab 	bl	8004864 <acc_rss_integration_log_level>
 800690e:	2801      	cmp	r0, #1
 8006910:	d905      	bls.n	800691e <acc_cpd_power_cycle_test+0x6e>
 8006912:	4b21      	ldr	r3, [pc, #132]	; (8006998 <acc_cpd_power_cycle_test+0xe8>)
 8006914:	4a24      	ldr	r2, [pc, #144]	; (80069a8 <acc_cpd_power_cycle_test+0xf8>)
 8006916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006918:	4921      	ldr	r1, [pc, #132]	; (80069a0 <acc_cpd_power_cycle_test+0xf0>)
 800691a:	2002      	movs	r0, #2
 800691c:	4798      	blx	r3
 800691e:	4628      	mov	r0, r5
 8006920:	f7fd fefc 	bl	800471c <acc_rss_integration_sensor_device_power_off>
 8006924:	4628      	mov	r0, r5
 8006926:	f7fd fef3 	bl	8004710 <acc_rss_integration_sensor_device_power_on>
 800692a:	f7fd ff9b 	bl	8004864 <acc_rss_integration_log_level>
 800692e:	2801      	cmp	r0, #1
 8006930:	d905      	bls.n	800693e <acc_cpd_power_cycle_test+0x8e>
 8006932:	4b19      	ldr	r3, [pc, #100]	; (8006998 <acc_cpd_power_cycle_test+0xe8>)
 8006934:	4a1d      	ldr	r2, [pc, #116]	; (80069ac <acc_cpd_power_cycle_test+0xfc>)
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	4919      	ldr	r1, [pc, #100]	; (80069a0 <acc_cpd_power_cycle_test+0xf0>)
 800693a:	2002      	movs	r0, #2
 800693c:	4798      	blx	r3
 800693e:	f7fd ff91 	bl	8004864 <acc_rss_integration_log_level>
 8006942:	2801      	cmp	r0, #1
 8006944:	d905      	bls.n	8006952 <acc_cpd_power_cycle_test+0xa2>
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <acc_cpd_power_cycle_test+0xe8>)
 8006948:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <acc_cpd_power_cycle_test+0x100>)
 800694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694c:	4914      	ldr	r1, [pc, #80]	; (80069a0 <acc_cpd_power_cycle_test+0xf0>)
 800694e:	2002      	movs	r0, #2
 8006950:	4798      	blx	r3
 8006952:	2421      	movs	r4, #33	; 0x21
 8006954:	2600      	movs	r6, #0
 8006956:	4621      	mov	r1, r4
 8006958:	f10d 0206 	add.w	r2, sp, #6
 800695c:	4628      	mov	r0, r5
 800695e:	f8ad 6006 	strh.w	r6, [sp, #6]
 8006962:	f7fe ff55 	bl	8005810 <acc_sensor_reg_read>
 8006966:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800696a:	3401      	adds	r4, #1
 800696c:	b2a4      	uxth	r4, r4
 800696e:	b97b      	cbnz	r3, 8006990 <acc_cpd_power_cycle_test+0xe0>
 8006970:	2c29      	cmp	r4, #41	; 0x29
 8006972:	d1f0      	bne.n	8006956 <acc_cpd_power_cycle_test+0xa6>
 8006974:	2001      	movs	r0, #1
 8006976:	b002      	add	sp, #8
 8006978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <acc_cpd_power_cycle_test+0xe8>)
 800697e:	4a0d      	ldr	r2, [pc, #52]	; (80069b4 <acc_cpd_power_cycle_test+0x104>)
 8006980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006982:	4907      	ldr	r1, [pc, #28]	; (80069a0 <acc_cpd_power_cycle_test+0xf0>)
 8006984:	2000      	movs	r0, #0
 8006986:	4798      	blx	r3
 8006988:	2000      	movs	r0, #0
 800698a:	b002      	add	sp, #8
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <acc_cpd_power_cycle_test+0xe8>)
 8006992:	4a09      	ldr	r2, [pc, #36]	; (80069b8 <acc_cpd_power_cycle_test+0x108>)
 8006994:	e7f4      	b.n	8006980 <acc_cpd_power_cycle_test+0xd0>
 8006996:	bf00      	nop
 8006998:	200003c8 	.word	0x200003c8
 800699c:	0800bf60 	.word	0x0800bf60
 80069a0:	0800bf78 	.word	0x0800bf78
 80069a4:	0800bffa 	.word	0x0800bffa
 80069a8:	0800bfac 	.word	0x0800bfac
 80069ac:	0800bfbc 	.word	0x0800bfbc
 80069b0:	0800bfc8 	.word	0x0800bfc8
 80069b4:	0800bf90 	.word	0x0800bf90
 80069b8:	0800bfe0 	.word	0x0800bfe0

080069bc <acc_cpd_refclk_stability_test>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	ed2d 8b08 	vpush	{d8-d11}
 80069c4:	4614      	mov	r4, r2
 80069c6:	b08f      	sub	sp, #60	; 0x3c
 80069c8:	4683      	mov	fp, r0
 80069ca:	4892      	ldr	r0, [pc, #584]	; (8006c14 <acc_cpd_refclk_stability_test+0x258>)
 80069cc:	460d      	mov	r5, r1
 80069ce:	ee0b 1a10 	vmov	s22, r1
 80069d2:	f7fe fec7 	bl	8005764 <acc_diagnostic_log_set_scope>
 80069d6:	6821      	ldr	r1, [r4, #0]
 80069d8:	488f      	ldr	r0, [pc, #572]	; (8006c18 <acc_cpd_refclk_stability_test+0x25c>)
 80069da:	f7fe feeb 	bl	80057b4 <acc_diagnostic_log_scalar>
 80069de:	ab0b      	add	r3, sp, #44	; 0x2c
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2700      	movs	r7, #0
 80069e6:	462a      	mov	r2, r5
 80069e8:	4659      	mov	r1, fp
 80069ea:	ab09      	add	r3, sp, #36	; 0x24
 80069ec:	9709      	str	r7, [sp, #36]	; 0x24
 80069ee:	970b      	str	r7, [sp, #44]	; 0x2c
 80069f0:	f7fe fbb2 	bl	8005158 <acc_sensor_protocol_r2_prepare_load>
 80069f4:	4605      	mov	r5, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d076      	beq.n	8006ae8 <acc_cpd_refclk_stability_test+0x12c>
 80069fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fc:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8006c5c <acc_cpd_refclk_stability_test+0x2a0>
 8006a00:	463d      	mov	r5, r7
 8006a02:	461f      	mov	r7, r3
 8006a04:	f5c5 7300 	rsb	r3, r5, #512	; 0x200
 8006a08:	429f      	cmp	r7, r3
 8006a0a:	bf28      	it	cs
 8006a0c:	461f      	movcs	r7, r3
 8006a0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006a10:	4b82      	ldr	r3, [pc, #520]	; (8006c1c <acc_cpd_refclk_stability_test+0x260>)
 8006a12:	ea4f 0955 	mov.w	r9, r5, lsr #1
 8006a16:	087a      	lsrs	r2, r7, #1
 8006a18:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	f001 fb29 	bl	8008074 <acc_confprogram_copy>
 8006a22:	8923      	ldrh	r3, [r4, #8]
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	201a      	movs	r0, #26
 8006a28:	b2ba      	uxth	r2, r7
 8006a2a:	b2a9      	uxth	r1, r5
 8006a2c:	9000      	str	r0, [sp, #0]
 8006a2e:	4643      	mov	r3, r8
 8006a30:	4630      	mov	r0, r6
 8006a32:	9207      	str	r2, [sp, #28]
 8006a34:	9106      	str	r1, [sp, #24]
 8006a36:	f001 fa2b 	bl	8007e90 <acc_confprogram_patch_offset>
 8006a3a:	88a3      	ldrh	r3, [r4, #4]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	2218      	movs	r2, #24
 8006a40:	9200      	str	r2, [sp, #0]
 8006a42:	4630      	mov	r0, r6
 8006a44:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006a48:	4643      	mov	r3, r8
 8006a4a:	f001 fa21 	bl	8007e90 <acc_confprogram_patch_offset>
 8006a4e:	f04f 0a19 	mov.w	sl, #25
 8006a52:	88e3      	ldrh	r3, [r4, #6]
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	4643      	mov	r3, r8
 8006a5e:	f8cd a000 	str.w	sl, [sp]
 8006a62:	f001 fa15 	bl	8007e90 <acc_confprogram_patch_offset>
 8006a66:	8963      	ldrh	r3, [r4, #10]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	2316      	movs	r3, #22
 8006a6c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006a70:	4630      	mov	r0, r6
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	4643      	mov	r3, r8
 8006a76:	f001 fa0b 	bl	8007e90 <acc_confprogram_patch_offset>
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	2310      	movs	r3, #16
 8006a80:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006a84:	4630      	mov	r0, r6
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4643      	mov	r3, r8
 8006a8a:	f001 fa01 	bl	8007e90 <acc_confprogram_patch_offset>
 8006a8e:	89e3      	ldrh	r3, [r4, #14]
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	231e      	movs	r3, #30
 8006a94:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006a98:	4630      	mov	r0, r6
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	4643      	mov	r3, r8
 8006a9e:	f001 f9f7 	bl	8007e90 <acc_confprogram_patch_offset>
 8006aa2:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006aac:	e9cd 3c00 	strd	r3, ip, [sp]
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4643      	mov	r3, r8
 8006ab4:	f001 f9ec 	bl	8007e90 <acc_confprogram_patch_offset>
 8006ab8:	463b      	mov	r3, r7
 8006aba:	6820      	ldr	r0, [r4, #0]
 8006abc:	465a      	mov	r2, fp
 8006abe:	fa1f f189 	uxth.w	r1, r9
 8006ac2:	f7fe fa77 	bl	8004fb4 <acc_sensor_r2_load_confmem>
 8006ac6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006ac8:	443d      	add	r5, r7
 8006aca:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006ace:	d399      	bcc.n	8006a04 <acc_cpd_refclk_stability_test+0x48>
 8006ad0:	6826      	ldr	r6, [r4, #0]
 8006ad2:	4651      	mov	r1, sl
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7fe fba3 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 8006ada:	4605      	mov	r5, r0
 8006adc:	b950      	cbnz	r0, 8006af4 <acc_cpd_refclk_stability_test+0x138>
 8006ade:	4b50      	ldr	r3, [pc, #320]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006ae0:	4a50      	ldr	r2, [pc, #320]	; (8006c24 <acc_cpd_refclk_stability_test+0x268>)
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	4950      	ldr	r1, [pc, #320]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006ae6:	4798      	blx	r3
 8006ae8:	4628      	mov	r0, r5
 8006aea:	b00f      	add	sp, #60	; 0x3c
 8006aec:	ecbd 8b08 	vpop	{d8-d11}
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af4:	f7fd feb6 	bl	8004864 <acc_rss_integration_log_level>
 8006af8:	2803      	cmp	r0, #3
 8006afa:	d905      	bls.n	8006b08 <acc_cpd_refclk_stability_test+0x14c>
 8006afc:	4d48      	ldr	r5, [pc, #288]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006afe:	4a4b      	ldr	r2, [pc, #300]	; (8006c2c <acc_cpd_refclk_stability_test+0x270>)
 8006b00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006b02:	4949      	ldr	r1, [pc, #292]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006b04:	2004      	movs	r0, #4
 8006b06:	4798      	blx	r3
 8006b08:	4630      	mov	r0, r6
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b12:	f7fe fd09 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 8006b16:	b930      	cbnz	r0, 8006b26 <acc_cpd_refclk_stability_test+0x16a>
 8006b18:	2500      	movs	r5, #0
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	b00f      	add	sp, #60	; 0x3c
 8006b1e:	ecbd 8b08 	vpop	{d8-d11}
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	f7fd fe9d 	bl	8004864 <acc_rss_integration_log_level>
 8006b2a:	2803      	cmp	r0, #3
 8006b2c:	d905      	bls.n	8006b3a <acc_cpd_refclk_stability_test+0x17e>
 8006b2e:	4d3c      	ldr	r5, [pc, #240]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006b30:	4a3f      	ldr	r2, [pc, #252]	; (8006c30 <acc_cpd_refclk_stability_test+0x274>)
 8006b32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006b34:	493c      	ldr	r1, [pc, #240]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006b36:	2004      	movs	r0, #4
 8006b38:	4798      	blx	r3
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	; (8006c34 <acc_cpd_refclk_stability_test+0x278>)
 8006b3c:	89a2      	ldrh	r2, [r4, #12]
 8006b3e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8006b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b46:	ab0b      	add	r3, sp, #44	; 0x2c
 8006b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006b4c:	f04f 0807 	mov.w	r8, #7
 8006b50:	2600      	movs	r6, #0
 8006b52:	eddf aa39 	vldr	s21, [pc, #228]	; 8006c38 <acc_cpd_refclk_stability_test+0x27c>
 8006b56:	ed9f aa39 	vldr	s20, [pc, #228]	; 8006c3c <acc_cpd_refclk_stability_test+0x280>
 8006b5a:	ed9f 9a39 	vldr	s18, [pc, #228]	; 8006c40 <acc_cpd_refclk_stability_test+0x284>
 8006b5e:	eddf 8a39 	vldr	s17, [pc, #228]	; 8006c44 <acc_cpd_refclk_stability_test+0x288>
 8006b62:	eddf 9a39 	vldr	s19, [pc, #228]	; 8006c48 <acc_cpd_refclk_stability_test+0x28c>
 8006b66:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 8006b6a:	469a      	mov	sl, r3
 8006b6c:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8006b70:	9406      	str	r4, [sp, #24]
 8006b72:	9b06      	ldr	r3, [sp, #24]
 8006b74:	681f      	ldr	r7, [r3, #0]
 8006b76:	4638      	mov	r0, r7
 8006b78:	f7fe fbcc 	bl	8005314 <acc_sensor_protocol_r2_is_sensor_running>
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	b190      	cbz	r0, 8006ba6 <acc_cpd_refclk_stability_test+0x1ea>
 8006b80:	4d27      	ldr	r5, [pc, #156]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006b82:	4a32      	ldr	r2, [pc, #200]	; (8006c4c <acc_cpd_refclk_stability_test+0x290>)
 8006b84:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8006b86:	4928      	ldr	r1, [pc, #160]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006b88:	463b      	mov	r3, r7
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	47a0      	blx	r4
 8006b8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006b90:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <acc_cpd_refclk_stability_test+0x294>)
 8006b92:	4925      	ldr	r1, [pc, #148]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006b94:	2000      	movs	r0, #0
 8006b96:	4798      	blx	r3
 8006b98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006b9a:	4a2e      	ldr	r2, [pc, #184]	; (8006c54 <acc_cpd_refclk_stability_test+0x298>)
 8006b9c:	4922      	ldr	r1, [pc, #136]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	4798      	blx	r3
 8006ba2:	2500      	movs	r5, #0
 8006ba4:	e7b9      	b.n	8006b1a <acc_cpd_refclk_stability_test+0x15e>
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <acc_cpd_refclk_stability_test+0x29c>)
 8006ba8:	491c      	ldr	r1, [pc, #112]	; (8006c1c <acc_cpd_refclk_stability_test+0x260>)
 8006baa:	2310      	movs	r3, #16
 8006bac:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <acc_cpd_refclk_stability_test+0x2a0>)
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	f001 f9f0 	bl	8007f9c <acc_confprogram_live_patch>
 8006bbc:	2144      	movs	r1, #68	; 0x44
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7fe fb2e 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 8006bc4:	b928      	cbnz	r0, 8006bd2 <acc_cpd_refclk_stability_test+0x216>
 8006bc6:	4d16      	ldr	r5, [pc, #88]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006bc8:	4a25      	ldr	r2, [pc, #148]	; (8006c60 <acc_cpd_refclk_stability_test+0x2a4>)
 8006bca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006bcc:	4916      	ldr	r1, [pc, #88]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006bce:	4798      	blx	r3
 8006bd0:	e7dd      	b.n	8006b8e <acc_cpd_refclk_stability_test+0x1d2>
 8006bd2:	f7fd fe47 	bl	8004864 <acc_rss_integration_log_level>
 8006bd6:	2803      	cmp	r0, #3
 8006bd8:	d905      	bls.n	8006be6 <acc_cpd_refclk_stability_test+0x22a>
 8006bda:	4911      	ldr	r1, [pc, #68]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006bdc:	4a21      	ldr	r2, [pc, #132]	; (8006c64 <acc_cpd_refclk_stability_test+0x2a8>)
 8006bde:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006be0:	4911      	ldr	r1, [pc, #68]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006be2:	2004      	movs	r0, #4
 8006be4:	4798      	blx	r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	2209      	movs	r2, #9
 8006bea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7fe fc9a 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 8006bf4:	b158      	cbz	r0, 8006c0e <acc_cpd_refclk_stability_test+0x252>
 8006bf6:	ee1b 0a10 	vmov	r0, s22
 8006bfa:	2180      	movs	r1, #128	; 0x80
 8006bfc:	f7fe fa12 	bl	8005024 <acc_sensor_r2_buffer_processed_verify_size>
 8006c00:	bba0      	cbnz	r0, 8006c6c <acc_cpd_refclk_stability_test+0x2b0>
 8006c02:	4d07      	ldr	r5, [pc, #28]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006c04:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <acc_cpd_refclk_stability_test+0x2ac>)
 8006c06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006c08:	4907      	ldr	r1, [pc, #28]	; (8006c28 <acc_cpd_refclk_stability_test+0x26c>)
 8006c0a:	4798      	blx	r3
 8006c0c:	e7bf      	b.n	8006b8e <acc_cpd_refclk_stability_test+0x1d2>
 8006c0e:	4d04      	ldr	r5, [pc, #16]	; (8006c20 <acc_cpd_refclk_stability_test+0x264>)
 8006c10:	e7bd      	b.n	8006b8e <acc_cpd_refclk_stability_test+0x1d2>
 8006c12:	bf00      	nop
 8006c14:	0800c008 	.word	0x0800c008
 8006c18:	0800b064 	.word	0x0800b064
 8006c1c:	0800a514 	.word	0x0800a514
 8006c20:	200003c8 	.word	0x200003c8
 8006c24:	0800c01c 	.word	0x0800c01c
 8006c28:	0800c060 	.word	0x0800c060
 8006c2c:	0800c07c 	.word	0x0800c07c
 8006c30:	0800c0bc 	.word	0x0800c0bc
 8006c34:	080096cc 	.word	0x080096cc
 8006c38:	37800000 	.word	0x37800000
 8006c3c:	3f99999a 	.word	0x3f99999a
 8006c40:	350637bd 	.word	0x350637bd
 8006c44:	49742400 	.word	0x49742400
 8006c48:	3f19999a 	.word	0x3f19999a
 8006c4c:	0800b848 	.word	0x0800b848
 8006c50:	0800c718 	.word	0x0800c718
 8006c54:	0800c208 	.word	0x0800c208
 8006c58:	08004f59 	.word	0x08004f59
 8006c5c:	0800d3fc 	.word	0x0800d3fc
 8006c60:	0800c0fc 	.word	0x0800c0fc
 8006c64:	0800c144 	.word	0x0800c144
 8006c68:	0800b8bc 	.word	0x0800b8bc
 8006c6c:	2380      	movs	r3, #128	; 0x80
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4659      	mov	r1, fp
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7fe f9de 	bl	8005034 <acc_sensor_r2_buffer_processed_read>
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	4681      	mov	r9, r0
 8006c7e:	4639      	mov	r1, r7
 8006c80:	2000      	movs	r0, #0
 8006c82:	f7fe fda7 	bl	80057d4 <acc_probes_execute_uint16>
 8006c86:	4638      	mov	r0, r7
 8006c88:	f7fe fb56 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d0be      	beq.n	8006c0e <acc_cpd_refclk_stability_test+0x252>
 8006c90:	f7fd fde8 	bl	8004864 <acc_rss_integration_log_level>
 8006c94:	2803      	cmp	r0, #3
 8006c96:	d905      	bls.n	8006ca4 <acc_cpd_refclk_stability_test+0x2e8>
 8006c98:	4991      	ldr	r1, [pc, #580]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006c9a:	4a92      	ldr	r2, [pc, #584]	; (8006ee4 <acc_cpd_refclk_stability_test+0x528>)
 8006c9c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006c9e:	4992      	ldr	r1, [pc, #584]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006ca0:	2004      	movs	r0, #4
 8006ca2:	4798      	blx	r3
 8006ca4:	4991      	ldr	r1, [pc, #580]	; (8006eec <acc_cpd_refclk_stability_test+0x530>)
 8006ca6:	4892      	ldr	r0, [pc, #584]	; (8006ef0 <acc_cpd_refclk_stability_test+0x534>)
 8006ca8:	f7fe fd74 	bl	8005794 <acc_diagnostic_log_array>
 8006cac:	4648      	mov	r0, r9
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	f7fe fd88 	bl	80057c4 <acc_diagnostic_log_data_u16>
 8006cb4:	9c06      	ldr	r4, [sp, #24]
 8006cb6:	f1a9 0302 	sub.w	r3, r9, #2
 8006cba:	f109 00fe 	add.w	r0, r9, #254	; 0xfe
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8006cc4:	4298      	cmp	r0, r3
 8006cc6:	440a      	add	r2, r1
 8006cc8:	d1fa      	bne.n	8006cc0 <acc_cpd_refclk_stability_test+0x304>
 8006cca:	9406      	str	r4, [sp, #24]
 8006ccc:	ea4f 19d2 	mov.w	r9, r2, lsr #7
 8006cd0:	f7fd fdc8 	bl	8004864 <acc_rss_integration_log_level>
 8006cd4:	2803      	cmp	r0, #3
 8006cd6:	d909      	bls.n	8006cec <acc_cpd_refclk_stability_test+0x330>
 8006cd8:	4981      	ldr	r1, [pc, #516]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006cda:	f8cd 9000 	str.w	r9, [sp]
 8006cde:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006ce0:	4a84      	ldr	r2, [pc, #528]	; (8006ef4 <acc_cpd_refclk_stability_test+0x538>)
 8006ce2:	4981      	ldr	r1, [pc, #516]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006ce4:	461c      	mov	r4, r3
 8006ce6:	2004      	movs	r0, #4
 8006ce8:	463b      	mov	r3, r7
 8006cea:	47a0      	blx	r4
 8006cec:	ee07 9a90 	vmov	s15, r9
 8006cf0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006cf4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006cf8:	ee28 8a2a 	vmul.f32	s16, s16, s21
 8006cfc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006d00:	f7fd fdb0 	bl	8004864 <acc_rss_integration_log_level>
 8006d04:	2803      	cmp	r0, #3
 8006d06:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8006d0a:	d925      	bls.n	8006d58 <acc_cpd_refclk_stability_test+0x39c>
 8006d0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d14:	bf4c      	ite	mi
 8006d16:	eef1 7a48 	vnegmi.f32	s15, s16
 8006d1a:	eef0 7a48 	vmovpl.f32	s15, s16
 8006d1e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8006d22:	496f      	ldr	r1, [pc, #444]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006d24:	bf48      	it	mi
 8006d26:	4b74      	ldrmi	r3, [pc, #464]	; (8006ef8 <acc_cpd_refclk_stability_test+0x53c>)
 8006d28:	f8d1 9034 	ldr.w	r9, [r1, #52]	; 0x34
 8006d2c:	bf58      	it	pl
 8006d2e:	4b6f      	ldrpl	r3, [pc, #444]	; (8006eec <acc_cpd_refclk_stability_test+0x530>)
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006d36:	4a71      	ldr	r2, [pc, #452]	; (8006efc <acc_cpd_refclk_stability_test+0x540>)
 8006d38:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006d3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006d40:	4969      	ldr	r1, [pc, #420]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d46:	463b      	mov	r3, r7
 8006d48:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8006d4c:	2004      	movs	r0, #4
 8006d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d52:	edcd 7a02 	vstr	s15, [sp, #8]
 8006d56:	47c8      	blx	r9
 8006d58:	ee39 8ac8 	vsub.f32	s16, s19, s16
 8006d5c:	ecaa 8a01 	vstmia	sl!, {s16}
 8006d60:	f7fd fd80 	bl	8004864 <acc_rss_integration_log_level>
 8006d64:	2803      	cmp	r0, #3
 8006d66:	d925      	bls.n	8006db4 <acc_cpd_refclk_stability_test+0x3f8>
 8006d68:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d70:	bf4c      	ite	mi
 8006d72:	eef1 7a48 	vnegmi.f32	s15, s16
 8006d76:	eef0 7a48 	vmovpl.f32	s15, s16
 8006d7a:	ee77 7a89 	vadd.f32	s15, s15, s18
 8006d7e:	4958      	ldr	r1, [pc, #352]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006d80:	bf48      	it	mi
 8006d82:	4b5d      	ldrmi	r3, [pc, #372]	; (8006ef8 <acc_cpd_refclk_stability_test+0x53c>)
 8006d84:	f8d1 9034 	ldr.w	r9, [r1, #52]	; 0x34
 8006d88:	bf58      	it	pl
 8006d8a:	4b58      	ldrpl	r3, [pc, #352]	; (8006eec <acc_cpd_refclk_stability_test+0x530>)
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006d92:	4a5b      	ldr	r2, [pc, #364]	; (8006f00 <acc_cpd_refclk_stability_test+0x544>)
 8006d94:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006d98:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006d9c:	4952      	ldr	r1, [pc, #328]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006da2:	463b      	mov	r3, r7
 8006da4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8006da8:	2004      	movs	r0, #4
 8006daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dae:	edcd 7a02 	vstr	s15, [sp, #8]
 8006db2:	47c8      	blx	r9
 8006db4:	f7fd fd56 	bl	8004864 <acc_rss_integration_log_level>
 8006db8:	2803      	cmp	r0, #3
 8006dba:	d925      	bls.n	8006e08 <acc_cpd_refclk_stability_test+0x44c>
 8006dbc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc4:	bf48      	it	mi
 8006dc6:	eeb1 8a48 	vnegmi.f32	s16, s16
 8006dca:	ee38 8a09 	vadd.f32	s16, s16, s18
 8006dce:	4944      	ldr	r1, [pc, #272]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006dd0:	9b06      	ldr	r3, [sp, #24]
 8006dd2:	bf4c      	ite	mi
 8006dd4:	4a48      	ldrmi	r2, [pc, #288]	; (8006ef8 <acc_cpd_refclk_stability_test+0x53c>)
 8006dd6:	4a45      	ldrpl	r2, [pc, #276]	; (8006eec <acc_cpd_refclk_stability_test+0x530>)
 8006dd8:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4942      	ldr	r1, [pc, #264]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006dde:	9200      	str	r2, [sp, #0]
 8006de0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8006de4:	4a47      	ldr	r2, [pc, #284]	; (8006f04 <acc_cpd_refclk_stability_test+0x548>)
 8006de6:	9604      	str	r6, [sp, #16]
 8006de8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006df0:	ee38 8a47 	vsub.f32	s16, s16, s14
 8006df4:	edcd 7a01 	vstr	s15, [sp, #4]
 8006df8:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006dfc:	2004      	movs	r0, #4
 8006dfe:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8006e02:	ed8d 8a02 	vstr	s16, [sp, #8]
 8006e06:	47b8      	blx	r7
 8006e08:	3601      	adds	r6, #1
 8006e0a:	2e03      	cmp	r6, #3
 8006e0c:	d003      	beq.n	8006e16 <acc_cpd_refclk_stability_test+0x45a>
 8006e0e:	ab09      	add	r3, sp, #36	; 0x24
 8006e10:	f833 8016 	ldrh.w	r8, [r3, r6, lsl #1]
 8006e14:	e6ad      	b.n	8006b72 <acc_cpd_refclk_stability_test+0x1b6>
 8006e16:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8006e1a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006f08 <acc_cpd_refclk_stability_test+0x54c>
 8006e1e:	9c06      	ldr	r4, [sp, #24]
 8006e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	dd14      	ble.n	8006e54 <acc_cpd_refclk_stability_test+0x498>
 8006e2a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006f0c <acc_cpd_refclk_stability_test+0x550>
 8006e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e36:	d50d      	bpl.n	8006e54 <acc_cpd_refclk_stability_test+0x498>
 8006e38:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8006e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e44:	dd06      	ble.n	8006e54 <acc_cpd_refclk_stability_test+0x498>
 8006e46:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8006e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e52:	d40c      	bmi.n	8006e6e <acc_cpd_refclk_stability_test+0x4b2>
 8006e54:	f7fd fd06 	bl	8004864 <acc_rss_integration_log_level>
 8006e58:	2803      	cmp	r0, #3
 8006e5a:	f67f ae45 	bls.w	8006ae8 <acc_cpd_refclk_stability_test+0x12c>
 8006e5e:	4a20      	ldr	r2, [pc, #128]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	4921      	ldr	r1, [pc, #132]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006e64:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006e66:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <acc_cpd_refclk_stability_test+0x554>)
 8006e68:	2004      	movs	r0, #4
 8006e6a:	47a0      	blx	r4
 8006e6c:	e63c      	b.n	8006ae8 <acc_cpd_refclk_stability_test+0x12c>
 8006e6e:	f7fd fcf9 	bl	8004864 <acc_rss_integration_log_level>
 8006e72:	2803      	cmp	r0, #3
 8006e74:	d906      	bls.n	8006e84 <acc_cpd_refclk_stability_test+0x4c8>
 8006e76:	4a1a      	ldr	r2, [pc, #104]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8006e7c:	491a      	ldr	r1, [pc, #104]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006e7e:	4a25      	ldr	r2, [pc, #148]	; (8006f14 <acc_cpd_refclk_stability_test+0x558>)
 8006e80:	2004      	movs	r0, #4
 8006e82:	47a8      	blx	r5
 8006e84:	6824      	ldr	r4, [r4, #0]
 8006e86:	2138      	movs	r1, #56	; 0x38
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7fe f9c9 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 8006e8e:	4605      	mov	r5, r0
 8006e90:	b928      	cbnz	r0, 8006e9e <acc_cpd_refclk_stability_test+0x4e2>
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006e94:	4a20      	ldr	r2, [pc, #128]	; (8006f18 <acc_cpd_refclk_stability_test+0x55c>)
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	4913      	ldr	r1, [pc, #76]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006e9a:	4798      	blx	r3
 8006e9c:	e624      	b.n	8006ae8 <acc_cpd_refclk_stability_test+0x12c>
 8006e9e:	f7fd fce1 	bl	8004864 <acc_rss_integration_log_level>
 8006ea2:	2803      	cmp	r0, #3
 8006ea4:	d905      	bls.n	8006eb2 <acc_cpd_refclk_stability_test+0x4f6>
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006ea8:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <acc_cpd_refclk_stability_test+0x560>)
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	490e      	ldr	r1, [pc, #56]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006eae:	2004      	movs	r0, #4
 8006eb0:	4798      	blx	r3
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006ebc:	f7fe fb34 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	f43f ae28 	beq.w	8006b18 <acc_cpd_refclk_stability_test+0x15c>
 8006ec8:	f7fd fccc 	bl	8004864 <acc_rss_integration_log_level>
 8006ecc:	2803      	cmp	r0, #3
 8006ece:	f67f ae0b 	bls.w	8006ae8 <acc_cpd_refclk_stability_test+0x12c>
 8006ed2:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <acc_cpd_refclk_stability_test+0x524>)
 8006ed4:	4a12      	ldr	r2, [pc, #72]	; (8006f20 <acc_cpd_refclk_stability_test+0x564>)
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed8:	4903      	ldr	r1, [pc, #12]	; (8006ee8 <acc_cpd_refclk_stability_test+0x52c>)
 8006eda:	2004      	movs	r0, #4
 8006edc:	4798      	blx	r3
 8006ede:	e603      	b.n	8006ae8 <acc_cpd_refclk_stability_test+0x12c>
 8006ee0:	200003c8 	.word	0x200003c8
 8006ee4:	0800c184 	.word	0x0800c184
 8006ee8:	0800c060 	.word	0x0800c060
 8006eec:	0800ba44 	.word	0x0800ba44
 8006ef0:	0800c1c4 	.word	0x0800c1c4
 8006ef4:	0800c1d4 	.word	0x0800c1d4
 8006ef8:	0800b748 	.word	0x0800b748
 8006efc:	0800c1e8 	.word	0x0800c1e8
 8006f00:	0800c23c 	.word	0x0800c23c
 8006f04:	0800c258 	.word	0x0800c258
 8006f08:	3e19999a 	.word	0x3e19999a
 8006f0c:	3f866666 	.word	0x3f866666
 8006f10:	0800c2c0 	.word	0x0800c2c0
 8006f14:	0800c290 	.word	0x0800c290
 8006f18:	0800c2f8 	.word	0x0800c2f8
 8006f1c:	0800c340 	.word	0x0800c340
 8006f20:	0800c384 	.word	0x0800c384

08006f24 <measure>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	ed2d 8b02 	vpush	{d8}
 8006f2c:	b089      	sub	sp, #36	; 0x24
 8006f2e:	4604      	mov	r4, r0
 8006f30:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 8006f34:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
 8006f38:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
 8006f3c:	9105      	str	r1, [sp, #20]
 8006f3e:	f106 3cff 	add.w	ip, r6, #4294967295
 8006f42:	f1bc 0f06 	cmp.w	ip, #6
 8006f46:	4693      	mov	fp, r2
 8006f48:	461d      	mov	r5, r3
 8006f4a:	d911      	bls.n	8006f70 <measure+0x4c>
 8006f4c:	f1a6 0211 	sub.w	r2, r6, #17
 8006f50:	2a06      	cmp	r2, #6
 8006f52:	d92e      	bls.n	8006fb2 <measure+0x8e>
 8006f54:	4ab4      	ldr	r2, [pc, #720]	; (8007228 <measure+0x304>)
 8006f56:	9600      	str	r6, [sp, #0]
 8006f58:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006f5a:	49b4      	ldr	r1, [pc, #720]	; (800722c <measure+0x308>)
 8006f5c:	4ab4      	ldr	r2, [pc, #720]	; (8007230 <measure+0x30c>)
 8006f5e:	2000      	movs	r0, #0
 8006f60:	47a0      	blx	r4
 8006f62:	2600      	movs	r6, #0
 8006f64:	4630      	mov	r0, r6
 8006f66:	b009      	add	sp, #36	; 0x24
 8006f68:	ecbd 8b02 	vpop	{d8}
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f70:	f7fd fc78 	bl	8004864 <acc_rss_integration_log_level>
 8006f74:	2803      	cmp	r0, #3
 8006f76:	f04f 0900 	mov.w	r9, #0
 8006f7a:	d823      	bhi.n	8006fc4 <measure+0xa0>
 8006f7c:	f7fd fc72 	bl	8004864 <acc_rss_integration_log_level>
 8006f80:	2803      	cmp	r0, #3
 8006f82:	d909      	bls.n	8006f98 <measure+0x74>
 8006f84:	4ba8      	ldr	r3, [pc, #672]	; (8007228 <measure+0x304>)
 8006f86:	f8cd 9000 	str.w	r9, [sp]
 8006f8a:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8006f8e:	4aa9      	ldr	r2, [pc, #676]	; (8007234 <measure+0x310>)
 8006f90:	49a6      	ldr	r1, [pc, #664]	; (800722c <measure+0x308>)
 8006f92:	462b      	mov	r3, r5
 8006f94:	2004      	movs	r0, #4
 8006f96:	47d0      	blx	sl
 8006f98:	2f0f      	cmp	r7, #15
 8006f9a:	d01d      	beq.n	8006fd8 <measure+0xb4>
 8006f9c:	f1a7 0319 	sub.w	r3, r7, #25
 8006fa0:	2b06      	cmp	r3, #6
 8006fa2:	f200 8095 	bhi.w	80070d0 <measure+0x1ac>
 8006fa6:	3f18      	subs	r7, #24
 8006fa8:	b2fb      	uxtb	r3, r7
 8006faa:	9307      	str	r3, [sp, #28]
 8006fac:	2300      	movs	r3, #0
 8006fae:	9306      	str	r3, [sp, #24]
 8006fb0:	e016      	b.n	8006fe0 <measure+0xbc>
 8006fb2:	f7fd fc57 	bl	8004864 <acc_rss_integration_log_level>
 8006fb6:	3e10      	subs	r6, #16
 8006fb8:	2803      	cmp	r0, #3
 8006fba:	fa5f f986 	uxtb.w	r9, r6
 8006fbe:	f04f 0600 	mov.w	r6, #0
 8006fc2:	d9db      	bls.n	8006f7c <measure+0x58>
 8006fc4:	4b98      	ldr	r3, [pc, #608]	; (8007228 <measure+0x304>)
 8006fc6:	9600      	str	r6, [sp, #0]
 8006fc8:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8006fcc:	4a9a      	ldr	r2, [pc, #616]	; (8007238 <measure+0x314>)
 8006fce:	4997      	ldr	r1, [pc, #604]	; (800722c <measure+0x308>)
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	2004      	movs	r0, #4
 8006fd4:	47d0      	blx	sl
 8006fd6:	e7d1      	b.n	8006f7c <measure+0x58>
 8006fd8:	2307      	movs	r3, #7
 8006fda:	2200      	movs	r2, #0
 8006fdc:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8006fe0:	f7fd fc40 	bl	8004864 <acc_rss_integration_log_level>
 8006fe4:	2803      	cmp	r0, #3
 8006fe6:	d908      	bls.n	8006ffa <measure+0xd6>
 8006fe8:	4b8f      	ldr	r3, [pc, #572]	; (8007228 <measure+0x304>)
 8006fea:	9a06      	ldr	r2, [sp, #24]
 8006fec:	9200      	str	r2, [sp, #0]
 8006fee:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006ff0:	4a92      	ldr	r2, [pc, #584]	; (800723c <measure+0x318>)
 8006ff2:	498e      	ldr	r1, [pc, #568]	; (800722c <measure+0x308>)
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	2004      	movs	r0, #4
 8006ff8:	47b8      	blx	r7
 8006ffa:	f7fd fc33 	bl	8004864 <acc_rss_integration_log_level>
 8006ffe:	2803      	cmp	r0, #3
 8007000:	d908      	bls.n	8007014 <measure+0xf0>
 8007002:	4b89      	ldr	r3, [pc, #548]	; (8007228 <measure+0x304>)
 8007004:	9a07      	ldr	r2, [sp, #28]
 8007006:	9200      	str	r2, [sp, #0]
 8007008:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800700a:	4a8d      	ldr	r2, [pc, #564]	; (8007240 <measure+0x31c>)
 800700c:	4987      	ldr	r1, [pc, #540]	; (800722c <measure+0x308>)
 800700e:	462b      	mov	r3, r5
 8007010:	2004      	movs	r0, #4
 8007012:	47b8      	blx	r7
 8007014:	4620      	mov	r0, r4
 8007016:	f7fe f97d 	bl	8005314 <acc_sensor_protocol_r2_is_sensor_running>
 800701a:	4607      	mov	r7, r0
 800701c:	b168      	cbz	r0, 800703a <measure+0x116>
 800701e:	4b82      	ldr	r3, [pc, #520]	; (8007228 <measure+0x304>)
 8007020:	4a88      	ldr	r2, [pc, #544]	; (8007244 <measure+0x320>)
 8007022:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007024:	4981      	ldr	r1, [pc, #516]	; (800722c <measure+0x308>)
 8007026:	4623      	mov	r3, r4
 8007028:	2000      	movs	r0, #0
 800702a:	47a8      	blx	r5
 800702c:	2600      	movs	r6, #0
 800702e:	4630      	mov	r0, r6
 8007030:	b009      	add	sp, #36	; 0x24
 8007032:	ecbd 8b02 	vpop	{d8}
 8007036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703a:	f8df a244 	ldr.w	sl, [pc, #580]	; 8007280 <measure+0x35c>
 800703e:	4982      	ldr	r1, [pc, #520]	; (8007248 <measure+0x324>)
 8007040:	9601      	str	r6, [sp, #4]
 8007042:	2307      	movs	r3, #7
 8007044:	4602      	mov	r2, r0
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	4620      	mov	r0, r4
 800704a:	4b80      	ldr	r3, [pc, #512]	; (800724c <measure+0x328>)
 800704c:	f8cd a008 	str.w	sl, [sp, #8]
 8007050:	f000 ffa4 	bl	8007f9c <acc_confprogram_live_patch>
 8007054:	9a06      	ldr	r2, [sp, #24]
 8007056:	497c      	ldr	r1, [pc, #496]	; (8007248 <measure+0x324>)
 8007058:	f8cd a008 	str.w	sl, [sp, #8]
 800705c:	2308      	movs	r3, #8
 800705e:	e9cd 3200 	strd	r3, r2, [sp]
 8007062:	4620      	mov	r0, r4
 8007064:	463a      	mov	r2, r7
 8007066:	4b79      	ldr	r3, [pc, #484]	; (800724c <measure+0x328>)
 8007068:	f000 ff98 	bl	8007f9c <acc_confprogram_live_patch>
 800706c:	2309      	movs	r3, #9
 800706e:	463a      	mov	r2, r7
 8007070:	4975      	ldr	r1, [pc, #468]	; (8007248 <measure+0x324>)
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4620      	mov	r0, r4
 8007076:	4b75      	ldr	r3, [pc, #468]	; (800724c <measure+0x328>)
 8007078:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800707c:	f000 ff8e 	bl	8007f9c <acc_confprogram_live_patch>
 8007080:	9a07      	ldr	r2, [sp, #28]
 8007082:	4971      	ldr	r1, [pc, #452]	; (8007248 <measure+0x324>)
 8007084:	f8cd a008 	str.w	sl, [sp, #8]
 8007088:	230a      	movs	r3, #10
 800708a:	e9cd 3200 	strd	r3, r2, [sp]
 800708e:	4620      	mov	r0, r4
 8007090:	463a      	mov	r2, r7
 8007092:	4b6e      	ldr	r3, [pc, #440]	; (800724c <measure+0x328>)
 8007094:	f000 ff82 	bl	8007f9c <acc_confprogram_live_patch>
 8007098:	463a      	mov	r2, r7
 800709a:	4b6c      	ldr	r3, [pc, #432]	; (800724c <measure+0x328>)
 800709c:	496a      	ldr	r1, [pc, #424]	; (8007248 <measure+0x324>)
 800709e:	9700      	str	r7, [sp, #0]
 80070a0:	4620      	mov	r0, r4
 80070a2:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 80070a6:	f000 ff79 	bl	8007f9c <acc_confprogram_live_patch>
 80070aa:	2144      	movs	r1, #68	; 0x44
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7fe f8b7 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 80070b2:	4647      	mov	r7, r8
 80070b4:	4606      	mov	r6, r0
 80070b6:	b978      	cbnz	r0, 80070d8 <measure+0x1b4>
 80070b8:	4b5b      	ldr	r3, [pc, #364]	; (8007228 <measure+0x304>)
 80070ba:	4a65      	ldr	r2, [pc, #404]	; (8007250 <measure+0x32c>)
 80070bc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80070be:	495b      	ldr	r1, [pc, #364]	; (800722c <measure+0x308>)
 80070c0:	462b      	mov	r3, r5
 80070c2:	47a0      	blx	r4
 80070c4:	4630      	mov	r0, r6
 80070c6:	b009      	add	sp, #36	; 0x24
 80070c8:	ecbd 8b02 	vpop	{d8}
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d0:	2300      	movs	r3, #0
 80070d2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80070d6:	e783      	b.n	8006fe0 <measure+0xbc>
 80070d8:	f7fd fbc4 	bl	8004864 <acc_rss_integration_log_level>
 80070dc:	2803      	cmp	r0, #3
 80070de:	d906      	bls.n	80070ee <measure+0x1ca>
 80070e0:	4b51      	ldr	r3, [pc, #324]	; (8007228 <measure+0x304>)
 80070e2:	4a5c      	ldr	r2, [pc, #368]	; (8007254 <measure+0x330>)
 80070e4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80070e6:	4951      	ldr	r1, [pc, #324]	; (800722c <measure+0x308>)
 80070e8:	462b      	mov	r3, r5
 80070ea:	2004      	movs	r0, #4
 80070ec:	47b0      	blx	r6
 80070ee:	2300      	movs	r3, #0
 80070f0:	2209      	movs	r2, #9
 80070f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7fe fa16 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 80070fc:	b158      	cbz	r0, 8007116 <measure+0x1f2>
 80070fe:	4658      	mov	r0, fp
 8007100:	4641      	mov	r1, r8
 8007102:	f7fd ff8f 	bl	8005024 <acc_sensor_r2_buffer_processed_verify_size>
 8007106:	4606      	mov	r6, r0
 8007108:	b938      	cbnz	r0, 800711a <measure+0x1f6>
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <measure+0x304>)
 800710c:	4a52      	ldr	r2, [pc, #328]	; (8007258 <measure+0x334>)
 800710e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007110:	4946      	ldr	r1, [pc, #280]	; (800722c <measure+0x308>)
 8007112:	4798      	blx	r3
 8007114:	e726      	b.n	8006f64 <measure+0x40>
 8007116:	2600      	movs	r6, #0
 8007118:	e724      	b.n	8006f64 <measure+0x40>
 800711a:	9905      	ldr	r1, [sp, #20]
 800711c:	4643      	mov	r3, r8
 800711e:	2200      	movs	r2, #0
 8007120:	4620      	mov	r0, r4
 8007122:	f7fd ff87 	bl	8005034 <acc_sensor_r2_buffer_processed_read>
 8007126:	4643      	mov	r3, r8
 8007128:	4602      	mov	r2, r0
 800712a:	4621      	mov	r1, r4
 800712c:	4681      	mov	r9, r0
 800712e:	2000      	movs	r0, #0
 8007130:	f7fe fb50 	bl	80057d4 <acc_probes_execute_uint16>
 8007134:	4620      	mov	r0, r4
 8007136:	f7fe f8ff 	bl	8005338 <acc_sensor_protocol_r2_ack_event>
 800713a:	4606      	mov	r6, r0
 800713c:	2800      	cmp	r0, #0
 800713e:	d0ea      	beq.n	8007116 <measure+0x1f2>
 8007140:	f7fd fb90 	bl	8004864 <acc_rss_integration_log_level>
 8007144:	2803      	cmp	r0, #3
 8007146:	d907      	bls.n	8007158 <measure+0x234>
 8007148:	4b37      	ldr	r3, [pc, #220]	; (8007228 <measure+0x304>)
 800714a:	4a44      	ldr	r2, [pc, #272]	; (800725c <measure+0x338>)
 800714c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8007150:	4936      	ldr	r1, [pc, #216]	; (800722c <measure+0x308>)
 8007152:	462b      	mov	r3, r5
 8007154:	2004      	movs	r0, #4
 8007156:	47d0      	blx	sl
 8007158:	4941      	ldr	r1, [pc, #260]	; (8007260 <measure+0x33c>)
 800715a:	4a42      	ldr	r2, [pc, #264]	; (8007264 <measure+0x340>)
 800715c:	4628      	mov	r0, r5
 800715e:	f7fe fb21 	bl	80057a4 <acc_diagnostic_log_array_sub_name>
 8007162:	4641      	mov	r1, r8
 8007164:	4648      	mov	r0, r9
 8007166:	f7fe fb2d 	bl	80057c4 <acc_diagnostic_log_data_u16>
 800716a:	f1b8 0f00 	cmp.w	r8, #0
 800716e:	d058      	beq.n	8007222 <measure+0x2fe>
 8007170:	4648      	mov	r0, r9
 8007172:	eb09 0248 	add.w	r2, r9, r8, lsl #1
 8007176:	2700      	movs	r7, #0
 8007178:	f830 3b02 	ldrh.w	r3, [r0], #2
 800717c:	4290      	cmp	r0, r2
 800717e:	441f      	add	r7, r3
 8007180:	d1fa      	bne.n	8007178 <measure+0x254>
 8007182:	fbb7 f7f8 	udiv	r7, r7, r8
 8007186:	b2bb      	uxth	r3, r7
 8007188:	ee08 3a10 	vmov	s16, r3
 800718c:	f7fd fb6a 	bl	8004864 <acc_rss_integration_log_level>
 8007190:	2803      	cmp	r0, #3
 8007192:	d909      	bls.n	80071a8 <measure+0x284>
 8007194:	4b24      	ldr	r3, [pc, #144]	; (8007228 <measure+0x304>)
 8007196:	9500      	str	r5, [sp, #0]
 8007198:	b2bf      	uxth	r7, r7
 800719a:	9701      	str	r7, [sp, #4]
 800719c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800719e:	4a32      	ldr	r2, [pc, #200]	; (8007268 <measure+0x344>)
 80071a0:	4922      	ldr	r1, [pc, #136]	; (800722c <measure+0x308>)
 80071a2:	4623      	mov	r3, r4
 80071a4:	2004      	movs	r0, #4
 80071a6:	47b8      	blx	r7
 80071a8:	eebb 8ac8 	vcvt.f32.u32	s16, s16, #16
 80071ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80071b0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800726c <measure+0x348>
 80071b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071b6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80071ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071be:	edc3 7a00 	vstr	s15, [r3]
 80071c2:	f7fd fb4f 	bl	8004864 <acc_rss_integration_log_level>
 80071c6:	2803      	cmp	r0, #3
 80071c8:	f67f aecc 	bls.w	8006f64 <measure+0x40>
 80071cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007270 <measure+0x34c>
 80071d2:	edd2 7a00 	vldr	s15, [r2]
 80071d6:	eddf 6a27 	vldr	s13, [pc, #156]	; 8007274 <measure+0x350>
 80071da:	4b13      	ldr	r3, [pc, #76]	; (8007228 <measure+0x304>)
 80071dc:	4a26      	ldr	r2, [pc, #152]	; (8007278 <measure+0x354>)
 80071de:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80071e0:	4912      	ldr	r1, [pc, #72]	; (800722c <measure+0x308>)
 80071e2:	9500      	str	r5, [sp, #0]
 80071e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ec:	bf48      	it	mi
 80071ee:	eef1 7a67 	vnegmi.f32	s15, s15
 80071f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071f6:	bf4c      	ite	mi
 80071f8:	4b20      	ldrmi	r3, [pc, #128]	; (800727c <measure+0x358>)
 80071fa:	4b1a      	ldrpl	r3, [pc, #104]	; (8007264 <measure+0x340>)
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007202:	4623      	mov	r3, r4
 8007204:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007208:	ed8d 7a02 	vstr	s14, [sp, #8]
 800720c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007210:	2004      	movs	r0, #4
 8007212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721a:	edcd 7a03 	vstr	s15, [sp, #12]
 800721e:	47b8      	blx	r7
 8007220:	e6a0      	b.n	8006f64 <measure+0x40>
 8007222:	ee08 8a10 	vmov	s16, r8
 8007226:	e7b1      	b.n	800718c <measure+0x268>
 8007228:	200003c8 	.word	0x200003c8
 800722c:	0800c408 	.word	0x0800c408
 8007230:	0800c3c4 	.word	0x0800c3c4
 8007234:	0800c45c 	.word	0x0800c45c
 8007238:	0800c418 	.word	0x0800c418
 800723c:	0800c4a0 	.word	0x0800c4a0
 8007240:	0800c4e4 	.word	0x0800c4e4
 8007244:	0800b848 	.word	0x0800b848
 8007248:	0800a914 	.word	0x0800a914
 800724c:	0800d690 	.word	0x0800d690
 8007250:	0800c528 	.word	0x0800c528
 8007254:	0800c564 	.word	0x0800c564
 8007258:	0800b8bc 	.word	0x0800b8bc
 800725c:	0800c598 	.word	0x0800c598
 8007260:	0800c5d0 	.word	0x0800c5d0
 8007264:	0800ba44 	.word	0x0800ba44
 8007268:	0800c5dc 	.word	0x0800c5dc
 800726c:	3f99999a 	.word	0x3f99999a
 8007270:	350637bd 	.word	0x350637bd
 8007274:	49742400 	.word	0x49742400
 8007278:	0800c5f4 	.word	0x0800c5f4
 800727c:	0800b748 	.word	0x0800b748
 8007280:	08004f59 	.word	0x08004f59

08007284 <acc_cpd_supply_test>:
 8007284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	ed2d 8b06 	vpush	{d8-d10}
 800728c:	4615      	mov	r5, r2
 800728e:	b091      	sub	sp, #68	; 0x44
 8007290:	4683      	mov	fp, r0
 8007292:	48b0      	ldr	r0, [pc, #704]	; (8007554 <acc_cpd_supply_test+0x2d0>)
 8007294:	930d      	str	r3, [sp, #52]	; 0x34
 8007296:	461c      	mov	r4, r3
 8007298:	ee0a 1a10 	vmov	s20, r1
 800729c:	f7fe fa62 	bl	8005764 <acc_diagnostic_log_set_scope>
 80072a0:	6829      	ldr	r1, [r5, #0]
 80072a2:	48ad      	ldr	r0, [pc, #692]	; (8007558 <acc_cpd_supply_test+0x2d4>)
 80072a4:	f7fe fa86 	bl	80057b4 <acc_diagnostic_log_scalar>
 80072a8:	1e63      	subs	r3, r4, #1
 80072aa:	1d61      	adds	r1, r4, #5
 80072ac:	2202      	movs	r2, #2
 80072ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072b2:	4299      	cmp	r1, r3
 80072b4:	d1fb      	bne.n	80072ae <acc_cpd_supply_test+0x2a>
 80072b6:	ab0f      	add	r3, sp, #60	; 0x3c
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	ee1a 2a10 	vmov	r2, s20
 80072be:	6828      	ldr	r0, [r5, #0]
 80072c0:	2600      	movs	r6, #0
 80072c2:	ab0e      	add	r3, sp, #56	; 0x38
 80072c4:	4659      	mov	r1, fp
 80072c6:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
 80072ca:	f7fd ff45 	bl	8005158 <acc_sensor_protocol_r2_prepare_load>
 80072ce:	4604      	mov	r4, r0
 80072d0:	2800      	cmp	r0, #0
 80072d2:	f000 810e 	beq.w	80074f2 <acc_cpd_supply_test+0x26e>
 80072d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072d8:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8007580 <acc_cpd_supply_test+0x2fc>
 80072dc:	4f9f      	ldr	r7, [pc, #636]	; (800755c <acc_cpd_supply_test+0x2d8>)
 80072de:	46b0      	mov	r8, r6
 80072e0:	461e      	mov	r6, r3
 80072e2:	e014      	b.n	800730e <acc_cpd_supply_test+0x8a>
 80072e4:	3801      	subs	r0, #1
 80072e6:	2300      	movs	r3, #0
 80072e8:	9001      	str	r0, [sp, #4]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	4620      	mov	r0, r4
 80072ee:	463b      	mov	r3, r7
 80072f0:	f000 fdce 	bl	8007e90 <acc_confprogram_patch_offset>
 80072f4:	4633      	mov	r3, r6
 80072f6:	6828      	ldr	r0, [r5, #0]
 80072f8:	465a      	mov	r2, fp
 80072fa:	fa1f f189 	uxth.w	r1, r9
 80072fe:	f7fd fe59 	bl	8004fb4 <acc_sensor_r2_load_confmem>
 8007302:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007304:	44b0      	add	r8, r6
 8007306:	f5b8 7fff 	cmp.w	r8, #510	; 0x1fe
 800730a:	f080 80f8 	bcs.w	80074fe <acc_cpd_supply_test+0x27a>
 800730e:	f5c8 73ff 	rsb	r3, r8, #510	; 0x1fe
 8007312:	429e      	cmp	r6, r3
 8007314:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007316:	bf28      	it	cs
 8007318:	461e      	movcs	r6, r3
 800731a:	ea4f 0958 	mov.w	r9, r8, lsr #1
 800731e:	0872      	lsrs	r2, r6, #1
 8007320:	4621      	mov	r1, r4
 8007322:	eb0a 0089 	add.w	r0, sl, r9, lsl #2
 8007326:	f000 fea5 	bl	8008074 <acc_confprogram_copy>
 800732a:	88ab      	ldrh	r3, [r5, #4]
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	201e      	movs	r0, #30
 8007330:	b2b2      	uxth	r2, r6
 8007332:	fa1f f188 	uxth.w	r1, r8
 8007336:	9000      	str	r0, [sp, #0]
 8007338:	463b      	mov	r3, r7
 800733a:	4620      	mov	r0, r4
 800733c:	920c      	str	r2, [sp, #48]	; 0x30
 800733e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007340:	f000 fda6 	bl	8007e90 <acc_confprogram_patch_offset>
 8007344:	88eb      	ldrh	r3, [r5, #6]
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	221c      	movs	r2, #28
 800734a:	9200      	str	r2, [sp, #0]
 800734c:	4620      	mov	r0, r4
 800734e:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 8007352:	463b      	mov	r3, r7
 8007354:	f000 fd9c 	bl	8007e90 <acc_confprogram_patch_offset>
 8007358:	892b      	ldrh	r3, [r5, #8]
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	231d      	movs	r3, #29
 800735e:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 8007362:	4620      	mov	r0, r4
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	463b      	mov	r3, r7
 8007368:	f000 fd92 	bl	8007e90 <acc_confprogram_patch_offset>
 800736c:	896b      	ldrh	r3, [r5, #10]
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	231a      	movs	r3, #26
 8007372:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 8007376:	4620      	mov	r0, r4
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	463b      	mov	r3, r7
 800737c:	f000 fd88 	bl	8007e90 <acc_confprogram_patch_offset>
 8007380:	89ab      	ldrh	r3, [r5, #12]
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	2314      	movs	r3, #20
 8007386:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800738a:	4620      	mov	r0, r4
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	463b      	mov	r3, r7
 8007390:	f000 fd7e 	bl	8007e90 <acc_confprogram_patch_offset>
 8007394:	89eb      	ldrh	r3, [r5, #14]
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	2322      	movs	r3, #34	; 0x22
 800739a:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 800739e:	4620      	mov	r0, r4
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	463b      	mov	r3, r7
 80073a4:	f000 fd74 	bl	8007e90 <acc_confprogram_patch_offset>
 80073a8:	8a28      	ldrh	r0, [r5, #16]
 80073aa:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d198      	bne.n	80072e4 <acc_cpd_supply_test+0x60>
 80073b2:	207f      	movs	r0, #127	; 0x7f
 80073b4:	e797      	b.n	80072e6 <acc_cpd_supply_test+0x62>
 80073b6:	ab0f      	add	r3, sp, #60	; 0x3c
 80073b8:	210f      	movs	r1, #15
 80073ba:	2212      	movs	r2, #18
 80073bc:	9303      	str	r3, [sp, #12]
 80073be:	f8cd 8008 	str.w	r8, [sp, #8]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4650      	mov	r0, sl
 80073c6:	e9cd 2100 	strd	r2, r1, [sp]
 80073ca:	462a      	mov	r2, r5
 80073cc:	4659      	mov	r1, fp
 80073ce:	f7ff fda9 	bl	8006f24 <measure>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f000 81e5 	beq.w	80077a2 <acc_cpd_supply_test+0x51e>
 80073d8:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80073dc:	ee77 7aa9 	vadd.f32	s15, s15, s19
 80073e0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80073e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073e8:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80073ec:	f1b9 0f00 	cmp.w	r9, #0
 80073f0:	f000 811d 	beq.w	800762e <acc_cpd_supply_test+0x3aa>
 80073f4:	eb09 03c4 	add.w	r3, r9, r4, lsl #3
 80073f8:	ed93 7a00 	vldr	s14, [r3]
 80073fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8007400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007408:	dc05      	bgt.n	8007416 <acc_cpd_supply_test+0x192>
 800740a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800740e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007412:	f140 8165 	bpl.w	80076e0 <acc_cpd_supply_test+0x45c>
 8007416:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	bf48      	it	mi
 8007420:	eeb1 7a47 	vnegmi.f32	s14, s14
 8007424:	4a4e      	ldr	r2, [pc, #312]	; (8007560 <acc_cpd_supply_test+0x2dc>)
 8007426:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800742a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800742c:	bf4c      	ite	mi
 800742e:	4a4d      	ldrmi	r2, [pc, #308]	; (8007564 <acc_cpd_supply_test+0x2e0>)
 8007430:	4a4d      	ldrpl	r2, [pc, #308]	; (8007568 <acc_cpd_supply_test+0x2e4>)
 8007432:	9200      	str	r2, [sp, #0]
 8007434:	ee37 7a28 	vadd.f32	s14, s14, s17
 8007438:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800743c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007440:	eebc 6ac7 	vcvt.u32.f32	s12, s14
 8007444:	bf48      	it	mi
 8007446:	eef1 6a66 	vnegmi.f32	s13, s13
 800744a:	eef8 5a46 	vcvt.f32.u32	s11, s12
 800744e:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8007452:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007456:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 800745a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800745e:	eeb8 5a65 	vcvt.f32.u32	s10, s11
 8007462:	bf4c      	ite	mi
 8007464:	493f      	ldrmi	r1, [pc, #252]	; (8007564 <acc_cpd_supply_test+0x2e0>)
 8007466:	4940      	ldrpl	r1, [pc, #256]	; (8007568 <acc_cpd_supply_test+0x2e4>)
 8007468:	edcd 5a04 	vstr	s11, [sp, #16]
 800746c:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8007470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007474:	ee66 6a88 	vmul.f32	s13, s13, s16
 8007478:	bf48      	it	mi
 800747a:	eef1 7a67 	vnegmi.f32	s15, s15
 800747e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007482:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8007486:	edcd 6a05 	vstr	s13, [sp, #20]
 800748a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800748e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8007492:	eef8 5a66 	vcvt.f32.u32	s11, s13
 8007496:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800749a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800749e:	bf4c      	ite	mi
 80074a0:	4830      	ldrmi	r0, [pc, #192]	; (8007564 <acc_cpd_supply_test+0x2e0>)
 80074a2:	4831      	ldrpl	r0, [pc, #196]	; (8007568 <acc_cpd_supply_test+0x2e4>)
 80074a4:	4a31      	ldr	r2, [pc, #196]	; (800756c <acc_cpd_supply_test+0x2e8>)
 80074a6:	9006      	str	r0, [sp, #24]
 80074a8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80074ac:	9103      	str	r1, [sp, #12]
 80074ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b2:	492f      	ldr	r1, [pc, #188]	; (8007570 <acc_cpd_supply_test+0x2ec>)
 80074b4:	ed8d 7a02 	vstr	s14, [sp, #8]
 80074b8:	ed8d 6a01 	vstr	s12, [sp, #4]
 80074bc:	edcd 6a07 	vstr	s13, [sp, #28]
 80074c0:	edcd 7a08 	vstr	s15, [sp, #32]
 80074c4:	2000      	movs	r0, #0
 80074c6:	47b8      	blx	r7
 80074c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074ca:	2303      	movs	r3, #3
 80074cc:	5513      	strb	r3, [r2, r4]
 80074ce:	3401      	adds	r4, #1
 80074d0:	2c06      	cmp	r4, #6
 80074d2:	d17b      	bne.n	80075cc <acc_cpd_supply_test+0x348>
 80074d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80074d6:	682d      	ldr	r5, [r5, #0]
 80074d8:	2138      	movs	r1, #56	; 0x38
 80074da:	4628      	mov	r0, r5
 80074dc:	f7fd fea0 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 80074e0:	4604      	mov	r4, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f040 812a 	bne.w	800773c <acc_cpd_supply_test+0x4b8>
 80074e8:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <acc_cpd_supply_test+0x2dc>)
 80074ea:	4a22      	ldr	r2, [pc, #136]	; (8007574 <acc_cpd_supply_test+0x2f0>)
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	4920      	ldr	r1, [pc, #128]	; (8007570 <acc_cpd_supply_test+0x2ec>)
 80074f0:	4798      	blx	r3
 80074f2:	4620      	mov	r0, r4
 80074f4:	b011      	add	sp, #68	; 0x44
 80074f6:	ecbd 8b06 	vpop	{d8-d10}
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	682e      	ldr	r6, [r5, #0]
 8007500:	2119      	movs	r1, #25
 8007502:	4630      	mov	r0, r6
 8007504:	f7fd fe8c 	bl	8005220 <acc_sensor_protocol_r2_run_program>
 8007508:	4604      	mov	r4, r0
 800750a:	b950      	cbnz	r0, 8007522 <acc_cpd_supply_test+0x29e>
 800750c:	4b14      	ldr	r3, [pc, #80]	; (8007560 <acc_cpd_supply_test+0x2dc>)
 800750e:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <acc_cpd_supply_test+0x2f4>)
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	4917      	ldr	r1, [pc, #92]	; (8007570 <acc_cpd_supply_test+0x2ec>)
 8007514:	4798      	blx	r3
 8007516:	4620      	mov	r0, r4
 8007518:	b011      	add	sp, #68	; 0x44
 800751a:	ecbd 8b06 	vpop	{d8-d10}
 800751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007522:	f7fd f99f 	bl	8004864 <acc_rss_integration_log_level>
 8007526:	2803      	cmp	r0, #3
 8007528:	d905      	bls.n	8007536 <acc_cpd_supply_test+0x2b2>
 800752a:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <acc_cpd_supply_test+0x2dc>)
 800752c:	4a13      	ldr	r2, [pc, #76]	; (800757c <acc_cpd_supply_test+0x2f8>)
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	490f      	ldr	r1, [pc, #60]	; (8007570 <acc_cpd_supply_test+0x2ec>)
 8007532:	2004      	movs	r0, #4
 8007534:	4798      	blx	r3
 8007536:	4630      	mov	r0, r6
 8007538:	2301      	movs	r3, #1
 800753a:	2202      	movs	r2, #2
 800753c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007540:	f7fd fff2 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 8007544:	b9f0      	cbnz	r0, 8007584 <acc_cpd_supply_test+0x300>
 8007546:	2400      	movs	r4, #0
 8007548:	4620      	mov	r0, r4
 800754a:	b011      	add	sp, #68	; 0x44
 800754c:	ecbd 8b06 	vpop	{d8-d10}
 8007550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007554:	0800c40c 	.word	0x0800c40c
 8007558:	0800b064 	.word	0x0800b064
 800755c:	0800d690 	.word	0x0800d690
 8007560:	200003c8 	.word	0x200003c8
 8007564:	0800b748 	.word	0x0800b748
 8007568:	0800ba44 	.word	0x0800ba44
 800756c:	0800c738 	.word	0x0800c738
 8007570:	0800c408 	.word	0x0800c408
 8007574:	0800c7ec 	.word	0x0800c7ec
 8007578:	0800c618 	.word	0x0800c618
 800757c:	0800c648 	.word	0x0800c648
 8007580:	0800a914 	.word	0x0800a914
 8007584:	f7fd f96e 	bl	8004864 <acc_rss_integration_log_level>
 8007588:	2803      	cmp	r0, #3
 800758a:	d905      	bls.n	8007598 <acc_cpd_supply_test+0x314>
 800758c:	4b9b      	ldr	r3, [pc, #620]	; (80077fc <acc_cpd_supply_test+0x578>)
 800758e:	4a9c      	ldr	r2, [pc, #624]	; (8007800 <acc_cpd_supply_test+0x57c>)
 8007590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007592:	499c      	ldr	r1, [pc, #624]	; (8007804 <acc_cpd_supply_test+0x580>)
 8007594:	2004      	movs	r0, #4
 8007596:	4798      	blx	r3
 8007598:	f8b5 8010 	ldrh.w	r8, [r5, #16]
 800759c:	f8d5 a000 	ldr.w	sl, [r5]
 80075a0:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 80075a4:	f1b8 0f00 	cmp.w	r8, #0
 80075a8:	f000 8097 	beq.w	80076da <acc_cpd_supply_test+0x456>
 80075ac:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
 80075b0:	f200 80e5 	bhi.w	800777e <acc_cpd_supply_test+0x4fa>
 80075b4:	950b      	str	r5, [sp, #44]	; 0x2c
 80075b6:	ed9f 9a94 	vldr	s18, [pc, #592]	; 8007808 <acc_cpd_supply_test+0x584>
 80075ba:	eddf 8a94 	vldr	s17, [pc, #592]	; 800780c <acc_cpd_supply_test+0x588>
 80075be:	ed9f 8a94 	vldr	s16, [pc, #592]	; 8007810 <acc_cpd_supply_test+0x58c>
 80075c2:	eddf 9a94 	vldr	s19, [pc, #592]	; 8007814 <acc_cpd_supply_test+0x590>
 80075c6:	ee1a 5a10 	vmov	r5, s20
 80075ca:	2400      	movs	r4, #0
 80075cc:	2e00      	cmp	r6, #0
 80075ce:	d07e      	beq.n	80076ce <acc_cpd_supply_test+0x44a>
 80075d0:	5d33      	ldrb	r3, [r6, r4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f47f af7b 	bne.w	80074ce <acc_cpd_supply_test+0x24a>
 80075d8:	1e63      	subs	r3, r4, #1
 80075da:	4f8f      	ldr	r7, [pc, #572]	; (8007818 <acc_cpd_supply_test+0x594>)
 80075dc:	ed8d 9a0f 	vstr	s18, [sp, #60]	; 0x3c
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	f200 80f3 	bhi.w	80077cc <acc_cpd_supply_test+0x548>
 80075e6:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <acc_cpd_supply_test+0x368>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007601 	.word	0x08007601
 80075f0:	0800766f 	.word	0x0800766f
 80075f4:	08007637 	.word	0x08007637
 80075f8:	0800769f 	.word	0x0800769f
 80075fc:	080073b7 	.word	0x080073b7
 8007600:	ab0f      	add	r3, sp, #60	; 0x3c
 8007602:	211f      	movs	r1, #31
 8007604:	2207      	movs	r2, #7
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	f8cd 8008 	str.w	r8, [sp, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4650      	mov	r0, sl
 8007610:	e9cd 2100 	strd	r2, r1, [sp]
 8007614:	462a      	mov	r2, r5
 8007616:	4659      	mov	r1, fp
 8007618:	f7ff fc84 	bl	8006f24 <measure>
 800761c:	2800      	cmp	r0, #0
 800761e:	f000 80ce 	beq.w	80077be <acc_cpd_supply_test+0x53a>
 8007622:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8007626:	f1b9 0f00 	cmp.w	r9, #0
 800762a:	f47f aee3 	bne.w	80073f4 <acc_cpd_supply_test+0x170>
 800762e:	4b7b      	ldr	r3, [pc, #492]	; (800781c <acc_cpd_supply_test+0x598>)
 8007630:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007634:	e6e0      	b.n	80073f8 <acc_cpd_supply_test+0x174>
 8007636:	ab0f      	add	r3, sp, #60	; 0x3c
 8007638:	211a      	movs	r1, #26
 800763a:	2207      	movs	r2, #7
 800763c:	9303      	str	r3, [sp, #12]
 800763e:	f8cd 8008 	str.w	r8, [sp, #8]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4650      	mov	r0, sl
 8007646:	e9cd 2100 	strd	r2, r1, [sp]
 800764a:	462a      	mov	r2, r5
 800764c:	4659      	mov	r1, fp
 800764e:	f7ff fc69 	bl	8006f24 <measure>
 8007652:	2800      	cmp	r0, #0
 8007654:	f000 80ac 	beq.w	80077b0 <acc_cpd_supply_test+0x52c>
 8007658:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800765c:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8007660:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007668:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 800766c:	e6be      	b.n	80073ec <acc_cpd_supply_test+0x168>
 800766e:	ab0f      	add	r3, sp, #60	; 0x3c
 8007670:	210f      	movs	r1, #15
 8007672:	2204      	movs	r2, #4
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	f8cd 8008 	str.w	r8, [sp, #8]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4650      	mov	r0, sl
 800767e:	e9cd 2100 	strd	r2, r1, [sp]
 8007682:	462a      	mov	r2, r5
 8007684:	4659      	mov	r1, fp
 8007686:	f7ff fc4d 	bl	8006f24 <measure>
 800768a:	2800      	cmp	r0, #0
 800768c:	f47f aea4 	bne.w	80073d8 <acc_cpd_supply_test+0x154>
 8007690:	4a5a      	ldr	r2, [pc, #360]	; (80077fc <acc_cpd_supply_test+0x578>)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007696:	495b      	ldr	r1, [pc, #364]	; (8007804 <acc_cpd_supply_test+0x580>)
 8007698:	4a61      	ldr	r2, [pc, #388]	; (8007820 <acc_cpd_supply_test+0x59c>)
 800769a:	47a0      	blx	r4
 800769c:	e753      	b.n	8007546 <acc_cpd_supply_test+0x2c2>
 800769e:	ab0f      	add	r3, sp, #60	; 0x3c
 80076a0:	210f      	movs	r1, #15
 80076a2:	2205      	movs	r2, #5
 80076a4:	9303      	str	r3, [sp, #12]
 80076a6:	f8cd 8008 	str.w	r8, [sp, #8]
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4650      	mov	r0, sl
 80076ae:	e9cd 2100 	strd	r2, r1, [sp]
 80076b2:	462a      	mov	r2, r5
 80076b4:	4659      	mov	r1, fp
 80076b6:	f7ff fc35 	bl	8006f24 <measure>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f47f ae8c 	bne.w	80073d8 <acc_cpd_supply_test+0x154>
 80076c0:	4a4e      	ldr	r2, [pc, #312]	; (80077fc <acc_cpd_supply_test+0x578>)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80076c6:	494f      	ldr	r1, [pc, #316]	; (8007804 <acc_cpd_supply_test+0x580>)
 80076c8:	4a55      	ldr	r2, [pc, #340]	; (8007820 <acc_cpd_supply_test+0x59c>)
 80076ca:	47a0      	blx	r4
 80076cc:	e73b      	b.n	8007546 <acc_cpd_supply_test+0x2c2>
 80076ce:	4b55      	ldr	r3, [pc, #340]	; (8007824 <acc_cpd_supply_test+0x5a0>)
 80076d0:	5ce3      	ldrb	r3, [r4, r3]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f47f aefb 	bne.w	80074ce <acc_cpd_supply_test+0x24a>
 80076d8:	e77e      	b.n	80075d8 <acc_cpd_supply_test+0x354>
 80076da:	f04f 0880 	mov.w	r8, #128	; 0x80
 80076de:	e769      	b.n	80075b4 <acc_cpd_supply_test+0x330>
 80076e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076e2:	2300      	movs	r3, #0
 80076e4:	5513      	strb	r3, [r2, r4]
 80076e6:	f7fd f8bd 	bl	8004864 <acc_rss_integration_log_level>
 80076ea:	2801      	cmp	r0, #1
 80076ec:	f67f aeef 	bls.w	80074ce <acc_cpd_supply_test+0x24a>
 80076f0:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80076f4:	4a41      	ldr	r2, [pc, #260]	; (80077fc <acc_cpd_supply_test+0x578>)
 80076f6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 80076fa:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80076fc:	4941      	ldr	r1, [pc, #260]	; (8007804 <acc_cpd_supply_test+0x580>)
 80076fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007706:	bf48      	it	mi
 8007708:	eef1 7a67 	vnegmi.f32	s15, s15
 800770c:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8007710:	bf4c      	ite	mi
 8007712:	4a45      	ldrmi	r2, [pc, #276]	; (8007828 <acc_cpd_supply_test+0x5a4>)
 8007714:	4a45      	ldrpl	r2, [pc, #276]	; (800782c <acc_cpd_supply_test+0x5a8>)
 8007716:	9200      	str	r2, [sp, #0]
 8007718:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800771c:	4a44      	ldr	r2, [pc, #272]	; (8007830 <acc_cpd_supply_test+0x5ac>)
 800771e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007722:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007726:	2002      	movs	r0, #2
 8007728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800772c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8007730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007734:	edcd 7a02 	vstr	s15, [sp, #8]
 8007738:	47b8      	blx	r7
 800773a:	e6c8      	b.n	80074ce <acc_cpd_supply_test+0x24a>
 800773c:	f7fd f892 	bl	8004864 <acc_rss_integration_log_level>
 8007740:	2803      	cmp	r0, #3
 8007742:	d905      	bls.n	8007750 <acc_cpd_supply_test+0x4cc>
 8007744:	4b2d      	ldr	r3, [pc, #180]	; (80077fc <acc_cpd_supply_test+0x578>)
 8007746:	4a3b      	ldr	r2, [pc, #236]	; (8007834 <acc_cpd_supply_test+0x5b0>)
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	492e      	ldr	r1, [pc, #184]	; (8007804 <acc_cpd_supply_test+0x580>)
 800774c:	2004      	movs	r0, #4
 800774e:	4798      	blx	r3
 8007750:	4628      	mov	r0, r5
 8007752:	2301      	movs	r3, #1
 8007754:	2202      	movs	r2, #2
 8007756:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800775a:	f7fd fee5 	bl	8005528 <acc_sensor_protocol_r2_wait_for_specific_event>
 800775e:	4604      	mov	r4, r0
 8007760:	2800      	cmp	r0, #0
 8007762:	f43f aef0 	beq.w	8007546 <acc_cpd_supply_test+0x2c2>
 8007766:	f7fd f87d 	bl	8004864 <acc_rss_integration_log_level>
 800776a:	2803      	cmp	r0, #3
 800776c:	f67f aec1 	bls.w	80074f2 <acc_cpd_supply_test+0x26e>
 8007770:	4b22      	ldr	r3, [pc, #136]	; (80077fc <acc_cpd_supply_test+0x578>)
 8007772:	4a31      	ldr	r2, [pc, #196]	; (8007838 <acc_cpd_supply_test+0x5b4>)
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	4923      	ldr	r1, [pc, #140]	; (8007804 <acc_cpd_supply_test+0x580>)
 8007778:	2004      	movs	r0, #4
 800777a:	4798      	blx	r3
 800777c:	e6b9      	b.n	80074f2 <acc_cpd_supply_test+0x26e>
 800777e:	f7fd f871 	bl	8004864 <acc_rss_integration_log_level>
 8007782:	b158      	cbz	r0, 800779c <acc_cpd_supply_test+0x518>
 8007784:	4b1d      	ldr	r3, [pc, #116]	; (80077fc <acc_cpd_supply_test+0x578>)
 8007786:	4a2d      	ldr	r2, [pc, #180]	; (800783c <acc_cpd_supply_test+0x5b8>)
 8007788:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800778a:	491e      	ldr	r1, [pc, #120]	; (8007804 <acc_cpd_supply_test+0x580>)
 800778c:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8007790:	4643      	mov	r3, r8
 8007792:	9700      	str	r7, [sp, #0]
 8007794:	2001      	movs	r0, #1
 8007796:	46b8      	mov	r8, r7
 8007798:	47a0      	blx	r4
 800779a:	e70b      	b.n	80075b4 <acc_cpd_supply_test+0x330>
 800779c:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80077a0:	e708      	b.n	80075b4 <acc_cpd_supply_test+0x330>
 80077a2:	4a16      	ldr	r2, [pc, #88]	; (80077fc <acc_cpd_supply_test+0x578>)
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077a8:	4916      	ldr	r1, [pc, #88]	; (8007804 <acc_cpd_supply_test+0x580>)
 80077aa:	4a1d      	ldr	r2, [pc, #116]	; (8007820 <acc_cpd_supply_test+0x59c>)
 80077ac:	47a0      	blx	r4
 80077ae:	e6ca      	b.n	8007546 <acc_cpd_supply_test+0x2c2>
 80077b0:	4a12      	ldr	r2, [pc, #72]	; (80077fc <acc_cpd_supply_test+0x578>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077b6:	4913      	ldr	r1, [pc, #76]	; (8007804 <acc_cpd_supply_test+0x580>)
 80077b8:	4a19      	ldr	r2, [pc, #100]	; (8007820 <acc_cpd_supply_test+0x59c>)
 80077ba:	47a0      	blx	r4
 80077bc:	e6c3      	b.n	8007546 <acc_cpd_supply_test+0x2c2>
 80077be:	4a0f      	ldr	r2, [pc, #60]	; (80077fc <acc_cpd_supply_test+0x578>)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077c4:	490f      	ldr	r1, [pc, #60]	; (8007804 <acc_cpd_supply_test+0x580>)
 80077c6:	4a16      	ldr	r2, [pc, #88]	; (8007820 <acc_cpd_supply_test+0x59c>)
 80077c8:	47a0      	blx	r4
 80077ca:	e6bc      	b.n	8007546 <acc_cpd_supply_test+0x2c2>
 80077cc:	ab0f      	add	r3, sp, #60	; 0x3c
 80077ce:	210f      	movs	r1, #15
 80077d0:	2207      	movs	r2, #7
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	4650      	mov	r0, sl
 80077dc:	e9cd 2100 	strd	r2, r1, [sp]
 80077e0:	462a      	mov	r2, r5
 80077e2:	4659      	mov	r1, fp
 80077e4:	f7ff fb9e 	bl	8006f24 <measure>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f47f af1a 	bne.w	8007622 <acc_cpd_supply_test+0x39e>
 80077ee:	4a03      	ldr	r2, [pc, #12]	; (80077fc <acc_cpd_supply_test+0x578>)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077f4:	4903      	ldr	r1, [pc, #12]	; (8007804 <acc_cpd_supply_test+0x580>)
 80077f6:	4a0a      	ldr	r2, [pc, #40]	; (8007820 <acc_cpd_supply_test+0x59c>)
 80077f8:	47a0      	blx	r4
 80077fa:	e6a4      	b.n	8007546 <acc_cpd_supply_test+0x2c2>
 80077fc:	200003c8 	.word	0x200003c8
 8007800:	0800c670 	.word	0x0800c670
 8007804:	0800c408 	.word	0x0800c408
 8007808:	7fc00000 	.word	0x7fc00000
 800780c:	350637bd 	.word	0x350637bd
 8007810:	49742400 	.word	0x49742400
 8007814:	3f19999a 	.word	0x3f19999a
 8007818:	2000012c 	.word	0x2000012c
 800781c:	0800c8b8 	.word	0x0800c8b8
 8007820:	0800c714 	.word	0x0800c714
 8007824:	0800c8b0 	.word	0x0800c8b0
 8007828:	0800b748 	.word	0x0800b748
 800782c:	0800ba44 	.word	0x0800ba44
 8007830:	0800c7c8 	.word	0x0800c7c8
 8007834:	0800c81c 	.word	0x0800c81c
 8007838:	0800c844 	.word	0x0800c844
 800783c:	0800c69c 	.word	0x0800c69c

08007840 <acc_sensor_diagnostics_r2_sensor_status>:
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	b094      	sub	sp, #80	; 0x50
 8007846:	4604      	mov	r4, r0
 8007848:	f7fd f80c 	bl	8004864 <acc_rss_integration_log_level>
 800784c:	2801      	cmp	r0, #1
 800784e:	d905      	bls.n	800785c <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 8007850:	4b9c      	ldr	r3, [pc, #624]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8007852:	4a9d      	ldr	r2, [pc, #628]	; (8007ac8 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	499d      	ldr	r1, [pc, #628]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007858:	2002      	movs	r0, #2
 800785a:	4798      	blx	r3
 800785c:	2201      	movs	r2, #1
 800785e:	21b2      	movs	r1, #178	; 0xb2
 8007860:	4620      	mov	r0, r4
 8007862:	f7fd ffeb 	bl	800583c <acc_sensor_reg_write>
 8007866:	2300      	movs	r3, #0
 8007868:	f8df a258 	ldr.w	sl, [pc, #600]	; 8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800786c:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8007af8 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 8007870:	4f96      	ldr	r7, [pc, #600]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007872:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8007876:	2564      	movs	r5, #100	; 0x64
 8007878:	e013      	b.n	80078a2 <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800787a:	f7fc fff3 	bl	8004864 <acc_rss_integration_log_level>
 800787e:	2801      	cmp	r0, #1
 8007880:	4623      	mov	r3, r4
 8007882:	464a      	mov	r2, r9
 8007884:	4639      	mov	r1, r7
 8007886:	f04f 0002 	mov.w	r0, #2
 800788a:	d907      	bls.n	800789c <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800788c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 8007890:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007894:	9600      	str	r6, [sp, #0]
 8007896:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800789a:	47b0      	blx	r6
 800789c:	3d01      	subs	r5, #1
 800789e:	b2ad      	uxth	r5, r5
 80078a0:	b1c5      	cbz	r5, 80078d4 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 80078a2:	aa0c      	add	r2, sp, #48	; 0x30
 80078a4:	2111      	movs	r1, #17
 80078a6:	4620      	mov	r0, r4
 80078a8:	f7fd ffb2 	bl	8005810 <acc_sensor_reg_read>
 80078ac:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80078b0:	055b      	lsls	r3, r3, #21
 80078b2:	d4e2      	bmi.n	800787a <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 80078b4:	f7fc ffd6 	bl	8004864 <acc_rss_integration_log_level>
 80078b8:	2801      	cmp	r0, #1
 80078ba:	d90b      	bls.n	80078d4 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 80078bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80078c0:	4980      	ldr	r1, [pc, #512]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 80078c2:	4a83      	ldr	r2, [pc, #524]	; (8007ad0 <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 80078c4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80078c6:	4981      	ldr	r1, [pc, #516]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 80078c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	2002      	movs	r0, #2
 80078d0:	4623      	mov	r3, r4
 80078d2:	47a8      	blx	r5
 80078d4:	2600      	movs	r6, #0
 80078d6:	4631      	mov	r1, r6
 80078d8:	aa09      	add	r2, sp, #36	; 0x24
 80078da:	4620      	mov	r0, r4
 80078dc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80078e0:	4d7c      	ldr	r5, [pc, #496]	; (8007ad4 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 80078e2:	f7fd ff95 	bl	8005810 <acc_sensor_reg_read>
 80078e6:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 80078ea:	212a      	movs	r1, #42	; 0x2a
 80078ec:	4620      	mov	r0, r4
 80078ee:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80078f2:	f7fd ff8d 	bl	8005810 <acc_sensor_reg_read>
 80078f6:	2128      	movs	r1, #40	; 0x28
 80078f8:	aa0a      	add	r2, sp, #40	; 0x28
 80078fa:	4620      	mov	r0, r4
 80078fc:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8007900:	f105 071e 	add.w	r7, r5, #30
 8007904:	f7fd ff84 	bl	8005810 <acc_sensor_reg_read>
 8007908:	ae0c      	add	r6, sp, #48	; 0x30
 800790a:	2163      	movs	r1, #99	; 0x63
 800790c:	e001      	b.n	8007912 <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800790e:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 8007912:	4632      	mov	r2, r6
 8007914:	4620      	mov	r0, r4
 8007916:	f7fd ff7b 	bl	8005810 <acc_sensor_reg_read>
 800791a:	42af      	cmp	r7, r5
 800791c:	f106 0602 	add.w	r6, r6, #2
 8007920:	d1f5      	bne.n	800790e <acc_sensor_diagnostics_r2_sensor_status+0xce>
 8007922:	f7fc ff9f 	bl	8004864 <acc_rss_integration_log_level>
 8007926:	2801      	cmp	r0, #1
 8007928:	d91e      	bls.n	8007968 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800792a:	4d66      	ldr	r5, [pc, #408]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800792c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 8007930:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8007934:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8007936:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800793a:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800793e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8007942:	9107      	str	r1, [sp, #28]
 8007944:	9206      	str	r2, [sp, #24]
 8007946:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800794a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800795a:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800795e:	4a5e      	ldr	r2, [pc, #376]	; (8007ad8 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 8007960:	495a      	ldr	r1, [pc, #360]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007962:	4623      	mov	r3, r4
 8007964:	2002      	movs	r0, #2
 8007966:	47a8      	blx	r5
 8007968:	f7fc ff7c 	bl	8004864 <acc_rss_integration_log_level>
 800796c:	2801      	cmp	r0, #1
 800796e:	d91e      	bls.n	80079ae <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 8007970:	4d54      	ldr	r5, [pc, #336]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8007972:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 8007976:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800797a:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800797c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8007980:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 8007984:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 8007988:	9107      	str	r1, [sp, #28]
 800798a:	9206      	str	r2, [sp, #24]
 800798c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8007990:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8007994:	9305      	str	r3, [sp, #20]
 8007996:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80079a0:	e9cd 0603 	strd	r0, r6, [sp, #12]
 80079a4:	4a4d      	ldr	r2, [pc, #308]	; (8007adc <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 80079a6:	4949      	ldr	r1, [pc, #292]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 80079a8:	4623      	mov	r3, r4
 80079aa:	2002      	movs	r0, #2
 80079ac:	47a8      	blx	r5
 80079ae:	aa0c      	add	r2, sp, #48	; 0x30
 80079b0:	2168      	movs	r1, #104	; 0x68
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7fd ff2c 	bl	8005810 <acc_sensor_reg_read>
 80079b8:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80079bc:	2167      	movs	r1, #103	; 0x67
 80079be:	4620      	mov	r0, r4
 80079c0:	f7fd ff26 	bl	8005810 <acc_sensor_reg_read>
 80079c4:	aa0d      	add	r2, sp, #52	; 0x34
 80079c6:	2166      	movs	r1, #102	; 0x66
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7fd ff21 	bl	8005810 <acc_sensor_reg_read>
 80079ce:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 80079d2:	2165      	movs	r1, #101	; 0x65
 80079d4:	4620      	mov	r0, r4
 80079d6:	f7fd ff1b 	bl	8005810 <acc_sensor_reg_read>
 80079da:	f7fc ff43 	bl	8004864 <acc_rss_integration_log_level>
 80079de:	2801      	cmp	r0, #1
 80079e0:	d912      	bls.n	8007a08 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 80079e2:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80079e6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80079ea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80079ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80079f2:	4d34      	ldr	r5, [pc, #208]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 80079f4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80079f6:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80079fa:	e9cd 3200 	strd	r3, r2, [sp]
 80079fe:	4933      	ldr	r1, [pc, #204]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007a00:	4a37      	ldr	r2, [pc, #220]	; (8007ae0 <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 8007a02:	4623      	mov	r3, r4
 8007a04:	2002      	movs	r0, #2
 8007a06:	47a8      	blx	r5
 8007a08:	2500      	movs	r5, #0
 8007a0a:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 8007a0e:	2153      	movs	r1, #83	; 0x53
 8007a10:	4620      	mov	r0, r4
 8007a12:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 8007a16:	f7fd fefb 	bl	8005810 <acc_sensor_reg_read>
 8007a1a:	aa0c      	add	r2, sp, #48	; 0x30
 8007a1c:	2140      	movs	r1, #64	; 0x40
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8007a24:	f7fd fef4 	bl	8005810 <acc_sensor_reg_read>
 8007a28:	f7fc ff1c 	bl	8004864 <acc_rss_integration_log_level>
 8007a2c:	2801      	cmp	r0, #1
 8007a2e:	d909      	bls.n	8007a44 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 8007a30:	4a24      	ldr	r2, [pc, #144]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8007a32:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8007a36:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007a38:	4924      	ldr	r1, [pc, #144]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 8007a3e:	4623      	mov	r3, r4
 8007a40:	2002      	movs	r0, #2
 8007a42:	47a8      	blx	r5
 8007a44:	f7fc ff0e 	bl	8004864 <acc_rss_integration_log_level>
 8007a48:	2801      	cmp	r0, #1
 8007a4a:	d90e      	bls.n	8007a6a <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 8007a4c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8007a50:	491c      	ldr	r1, [pc, #112]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8007a52:	4a25      	ldr	r2, [pc, #148]	; (8007ae8 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 8007a54:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8007a56:	491d      	ldr	r1, [pc, #116]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007a58:	f003 0040 	and.w	r0, r3, #64	; 0x40
 8007a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a60:	e9cd 3000 	strd	r3, r0, [sp]
 8007a64:	4623      	mov	r3, r4
 8007a66:	2002      	movs	r0, #2
 8007a68:	47a8      	blx	r5
 8007a6a:	f7fc fefb 	bl	8004864 <acc_rss_integration_log_level>
 8007a6e:	2801      	cmp	r0, #1
 8007a70:	d90e      	bls.n	8007a90 <acc_sensor_diagnostics_r2_sensor_status+0x250>
 8007a72:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8007a76:	4913      	ldr	r1, [pc, #76]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8007a78:	4a1c      	ldr	r2, [pc, #112]	; (8007aec <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 8007a7a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8007a7c:	4913      	ldr	r1, [pc, #76]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007a7e:	f003 0010 	and.w	r0, r3, #16
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	e9cd 3000 	strd	r3, r0, [sp]
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	2002      	movs	r0, #2
 8007a8e:	47a8      	blx	r5
 8007a90:	f7fc fee8 	bl	8004864 <acc_rss_integration_log_level>
 8007a94:	2801      	cmp	r0, #1
 8007a96:	d90e      	bls.n	8007ab6 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 8007a98:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8007a9c:	4909      	ldr	r1, [pc, #36]	; (8007ac4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 8007a9e:	4a14      	ldr	r2, [pc, #80]	; (8007af0 <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 8007aa0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8007aa2:	490a      	ldr	r1, [pc, #40]	; (8007acc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 8007aa4:	f003 0004 	and.w	r0, r3, #4
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	e9cd 3000 	strd	r3, r0, [sp]
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	2002      	movs	r0, #2
 8007ab4:	47a8      	blx	r5
 8007ab6:	4d0f      	ldr	r5, [pc, #60]	; (8007af4 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 8007ab8:	ae0c      	add	r6, sp, #48	; 0x30
 8007aba:	f105 071e 	add.w	r7, r5, #30
 8007abe:	21f0      	movs	r1, #240	; 0xf0
 8007ac0:	e01e      	b.n	8007b00 <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 8007ac2:	bf00      	nop
 8007ac4:	200003c8 	.word	0x200003c8
 8007ac8:	0800c8e8 	.word	0x0800c8e8
 8007acc:	0800c928 	.word	0x0800c928
 8007ad0:	0800c960 	.word	0x0800c960
 8007ad4:	0800cc70 	.word	0x0800cc70
 8007ad8:	0800c980 	.word	0x0800c980
 8007adc:	0800c9c8 	.word	0x0800c9c8
 8007ae0:	0800ca14 	.word	0x0800ca14
 8007ae4:	0800ca48 	.word	0x0800ca48
 8007ae8:	0800ca68 	.word	0x0800ca68
 8007aec:	0800ca94 	.word	0x0800ca94
 8007af0:	0800cac8 	.word	0x0800cac8
 8007af4:	0800cc90 	.word	0x0800cc90
 8007af8:	0800c940 	.word	0x0800c940
 8007afc:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 8007b00:	4632      	mov	r2, r6
 8007b02:	4620      	mov	r0, r4
 8007b04:	f7fd fe84 	bl	8005810 <acc_sensor_reg_read>
 8007b08:	42bd      	cmp	r5, r7
 8007b0a:	f106 0602 	add.w	r6, r6, #2
 8007b0e:	d1f5      	bne.n	8007afc <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 8007b10:	f7fc fea8 	bl	8004864 <acc_rss_integration_log_level>
 8007b14:	2801      	cmp	r0, #1
 8007b16:	f240 80b6 	bls.w	8007c86 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 8007b1a:	4a5c      	ldr	r2, [pc, #368]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007b1c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8007b20:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007b22:	495b      	ldr	r1, [pc, #364]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4a5b      	ldr	r2, [pc, #364]	; (8007c94 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 8007b28:	4623      	mov	r3, r4
 8007b2a:	2002      	movs	r0, #2
 8007b2c:	47a8      	blx	r5
 8007b2e:	2501      	movs	r5, #1
 8007b30:	f7fc fe98 	bl	8004864 <acc_rss_integration_log_level>
 8007b34:	2801      	cmp	r0, #1
 8007b36:	d90e      	bls.n	8007b56 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 8007b38:	ab14      	add	r3, sp, #80	; 0x50
 8007b3a:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 8007b3e:	4b53      	ldr	r3, [pc, #332]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007b40:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 8007b44:	9200      	str	r2, [sp, #0]
 8007b46:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007b48:	4a53      	ldr	r2, [pc, #332]	; (8007c98 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 8007b4a:	4951      	ldr	r1, [pc, #324]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007b4c:	3501      	adds	r5, #1
 8007b4e:	4623      	mov	r3, r4
 8007b50:	2002      	movs	r0, #2
 8007b52:	b2ed      	uxtb	r5, r5
 8007b54:	47b0      	blx	r6
 8007b56:	f8df a134 	ldr.w	sl, [pc, #308]	; 8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 8007b5a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007cb4 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 8007b5e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>
 8007b62:	2601      	movs	r6, #1
 8007b64:	f7fc fe7e 	bl	8004864 <acc_rss_integration_log_level>
 8007b68:	ab14      	add	r3, sp, #80	; 0x50
 8007b6a:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 8007b6e:	2801      	cmp	r0, #1
 8007b70:	4667      	mov	r7, ip
 8007b72:	4623      	mov	r3, r4
 8007b74:	464a      	mov	r2, r9
 8007b76:	4641      	mov	r1, r8
 8007b78:	f04f 0002 	mov.w	r0, #2
 8007b7c:	d909      	bls.n	8007b92 <acc_sensor_diagnostics_r2_sensor_status+0x352>
 8007b7e:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 8007b82:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 8007b86:	9600      	str	r6, [sp, #0]
 8007b88:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8007b8c:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 8007b90:	47b8      	blx	r7
 8007b92:	3601      	adds	r6, #1
 8007b94:	3502      	adds	r5, #2
 8007b96:	2e08      	cmp	r6, #8
 8007b98:	b2ed      	uxtb	r5, r5
 8007b9a:	d1e3      	bne.n	8007b64 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 8007b9c:	2500      	movs	r5, #0
 8007b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ba0:	219d      	movs	r1, #157	; 0x9d
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8007ba8:	f7fd fe32 	bl	8005810 <acc_sensor_reg_read>
 8007bac:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8007bb0:	2199      	movs	r1, #153	; 0x99
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 8007bb8:	f7fd fe2a 	bl	8005810 <acc_sensor_reg_read>
 8007bbc:	aa0c      	add	r2, sp, #48	; 0x30
 8007bbe:	2196      	movs	r1, #150	; 0x96
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8007bc6:	f7fd fe23 	bl	8005810 <acc_sensor_reg_read>
 8007bca:	462a      	mov	r2, r5
 8007bcc:	21b2      	movs	r1, #178	; 0xb2
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f7fd fe34 	bl	800583c <acc_sensor_reg_write>
 8007bd4:	f7fc fe46 	bl	8004864 <acc_rss_integration_log_level>
 8007bd8:	2801      	cmp	r0, #1
 8007bda:	d90f      	bls.n	8007bfc <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 8007bdc:	482b      	ldr	r0, [pc, #172]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007bde:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8007be2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8007be6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8007bea:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007bf2:	4623      	mov	r3, r4
 8007bf4:	4a29      	ldr	r2, [pc, #164]	; (8007c9c <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 8007bf6:	4926      	ldr	r1, [pc, #152]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007bf8:	2002      	movs	r0, #2
 8007bfa:	47a8      	blx	r5
 8007bfc:	f7fc fe32 	bl	8004864 <acc_rss_integration_log_level>
 8007c00:	2801      	cmp	r0, #1
 8007c02:	d909      	bls.n	8007c18 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 8007c04:	4a21      	ldr	r2, [pc, #132]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007c06:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8007c0a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007c0c:	4920      	ldr	r1, [pc, #128]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4a23      	ldr	r2, [pc, #140]	; (8007ca0 <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 8007c12:	4623      	mov	r3, r4
 8007c14:	2002      	movs	r0, #2
 8007c16:	47a8      	blx	r5
 8007c18:	f7fc fe24 	bl	8004864 <acc_rss_integration_log_level>
 8007c1c:	2801      	cmp	r0, #1
 8007c1e:	d909      	bls.n	8007c34 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 8007c20:	4a1a      	ldr	r2, [pc, #104]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007c22:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8007c26:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007c28:	4919      	ldr	r1, [pc, #100]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 8007c2e:	4623      	mov	r3, r4
 8007c30:	2002      	movs	r0, #2
 8007c32:	47a8      	blx	r5
 8007c34:	f7fc fe16 	bl	8004864 <acc_rss_integration_log_level>
 8007c38:	2801      	cmp	r0, #1
 8007c3a:	d909      	bls.n	8007c50 <acc_sensor_diagnostics_r2_sensor_status+0x410>
 8007c3c:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007c3e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8007c42:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007c44:	4912      	ldr	r1, [pc, #72]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	2002      	movs	r0, #2
 8007c4e:	47a8      	blx	r5
 8007c50:	f7fc fe08 	bl	8004864 <acc_rss_integration_log_level>
 8007c54:	2801      	cmp	r0, #1
 8007c56:	d909      	bls.n	8007c6c <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 8007c58:	4a0c      	ldr	r2, [pc, #48]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007c5a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8007c5e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007c60:	490b      	ldr	r1, [pc, #44]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4a11      	ldr	r2, [pc, #68]	; (8007cac <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 8007c66:	4623      	mov	r3, r4
 8007c68:	2002      	movs	r0, #2
 8007c6a:	47a8      	blx	r5
 8007c6c:	f7fc fdfa 	bl	8004864 <acc_rss_integration_log_level>
 8007c70:	2801      	cmp	r0, #1
 8007c72:	d905      	bls.n	8007c80 <acc_sensor_diagnostics_r2_sensor_status+0x440>
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 8007c76:	4a0e      	ldr	r2, [pc, #56]	; (8007cb0 <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	4905      	ldr	r1, [pc, #20]	; (8007c90 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 8007c7c:	2002      	movs	r0, #2
 8007c7e:	4798      	blx	r3
 8007c80:	b014      	add	sp, #80	; 0x50
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	2500      	movs	r5, #0
 8007c88:	e752      	b.n	8007b30 <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 8007c8a:	bf00      	nop
 8007c8c:	200003c8 	.word	0x200003c8
 8007c90:	0800c928 	.word	0x0800c928
 8007c94:	0800caf8 	.word	0x0800caf8
 8007c98:	0800cb20 	.word	0x0800cb20
 8007c9c:	0800cb68 	.word	0x0800cb68
 8007ca0:	0800cbbc 	.word	0x0800cbbc
 8007ca4:	0800cbe0 	.word	0x0800cbe0
 8007ca8:	0800cbfc 	.word	0x0800cbfc
 8007cac:	0800cc14 	.word	0x0800cc14
 8007cb0:	0800cc30 	.word	0x0800cc30
 8007cb4:	0800cb40 	.word	0x0800cb40

08007cb8 <acc_confprogram_modify_bin_sensor>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007cc2:	2501      	movs	r5, #1
 8007cc4:	409d      	lsls	r5, r3
 8007cc6:	42b5      	cmp	r5, r6
 8007cc8:	4688      	mov	r8, r1
 8007cca:	d917      	bls.n	8007cfc <acc_confprogram_modify_bin_sensor+0x44>
 8007ccc:	461c      	mov	r4, r3
 8007cce:	4692      	mov	sl, r2
 8007cd0:	4681      	mov	r9, r0
 8007cd2:	f1c4 0420 	rsb	r4, r4, #32
 8007cd6:	f7fd fdef 	bl	80058b8 <acc_sensor_conf_read_instr>
 8007cda:	f04f 35ff 	mov.w	r5, #4294967295
 8007cde:	40e5      	lsrs	r5, r4
 8007ce0:	fa05 f40a 	lsl.w	r4, r5, sl
 8007ce4:	ea20 0404 	bic.w	r4, r0, r4
 8007ce8:	fa06 f20a 	lsl.w	r2, r6, sl
 8007cec:	4641      	mov	r1, r8
 8007cee:	4648      	mov	r0, r9
 8007cf0:	4322      	orrs	r2, r4
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	b002      	add	sp, #8
 8007cf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfa:	4718      	bx	r3
 8007cfc:	4a06      	ldr	r2, [pc, #24]	; (8007d18 <acc_confprogram_modify_bin_sensor+0x60>)
 8007cfe:	9600      	str	r6, [sp, #0]
 8007d00:	3d01      	subs	r5, #1
 8007d02:	9501      	str	r5, [sp, #4]
 8007d04:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007d06:	4a05      	ldr	r2, [pc, #20]	; (8007d1c <acc_confprogram_modify_bin_sensor+0x64>)
 8007d08:	460b      	mov	r3, r1
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	4904      	ldr	r1, [pc, #16]	; (8007d20 <acc_confprogram_modify_bin_sensor+0x68>)
 8007d0e:	47a0      	blx	r4
 8007d10:	4803      	ldr	r0, [pc, #12]	; (8007d20 <acc_confprogram_modify_bin_sensor+0x68>)
 8007d12:	213f      	movs	r1, #63	; 0x3f
 8007d14:	f7fd fd0e 	bl	8005734 <acc_assert_fail>
 8007d18:	200003c8 	.word	0x200003c8
 8007d1c:	0800ccb0 	.word	0x0800ccb0
 8007d20:	0800cce8 	.word	0x0800cce8

08007d24 <acc_confprogram_modify_bin>:
 8007d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	2701      	movs	r7, #1
 8007d2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007d2e:	fa07 f503 	lsl.w	r5, r7, r3
 8007d32:	42b5      	cmp	r5, r6
 8007d34:	d91e      	bls.n	8007d74 <acc_confprogram_modify_bin+0x50>
 8007d36:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 8007d3a:	4690      	mov	r8, r2
 8007d3c:	461c      	mov	r4, r3
 8007d3e:	4628      	mov	r0, r5
 8007d40:	463a      	mov	r2, r7
 8007d42:	a902      	add	r1, sp, #8
 8007d44:	f7fd fe7a 	bl	8005a3c <acc_utils_transfer_buffer_to_uint32>
 8007d48:	f1c4 0420 	rsb	r4, r4, #32
 8007d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d50:	9902      	ldr	r1, [sp, #8]
 8007d52:	40e3      	lsrs	r3, r4
 8007d54:	fa03 f308 	lsl.w	r3, r3, r8
 8007d58:	fa06 f608 	lsl.w	r6, r6, r8
 8007d5c:	ea21 0303 	bic.w	r3, r1, r3
 8007d60:	4333      	orrs	r3, r6
 8007d62:	4629      	mov	r1, r5
 8007d64:	463a      	mov	r2, r7
 8007d66:	a803      	add	r0, sp, #12
 8007d68:	9303      	str	r3, [sp, #12]
 8007d6a:	f7fd fe59 	bl	8005a20 <acc_utils_uint32_to_transfer_buffer>
 8007d6e:	b004      	add	sp, #16
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <acc_confprogram_modify_bin+0x6c>)
 8007d76:	9600      	str	r6, [sp, #0]
 8007d78:	3d01      	subs	r5, #1
 8007d7a:	9501      	str	r5, [sp, #4]
 8007d7c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007d7e:	4a05      	ldr	r2, [pc, #20]	; (8007d94 <acc_confprogram_modify_bin+0x70>)
 8007d80:	460b      	mov	r3, r1
 8007d82:	2000      	movs	r0, #0
 8007d84:	4904      	ldr	r1, [pc, #16]	; (8007d98 <acc_confprogram_modify_bin+0x74>)
 8007d86:	47a0      	blx	r4
 8007d88:	4803      	ldr	r0, [pc, #12]	; (8007d98 <acc_confprogram_modify_bin+0x74>)
 8007d8a:	214f      	movs	r1, #79	; 0x4f
 8007d8c:	f7fd fcd2 	bl	8005734 <acc_assert_fail>
 8007d90:	200003c8 	.word	0x200003c8
 8007d94:	0800ccf4 	.word	0x0800ccf4
 8007d98:	0800cce8 	.word	0x0800cce8

08007d9c <acc_confprogram_modify_runif_sensor>:
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	4614      	mov	r4, r2
 8007da2:	b082      	sub	sp, #8
 8007da4:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8007da8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8007dac:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007db0:	f025 050f 	bic.w	r5, r5, #15
 8007db4:	4606      	mov	r6, r0
 8007db6:	b1b2      	cbz	r2, 8007de6 <acc_confprogram_modify_runif_sensor+0x4a>
 8007db8:	461f      	mov	r7, r3
 8007dba:	f7fc fd53 	bl	8004864 <acc_rss_integration_log_level>
 8007dbe:	2803      	cmp	r0, #3
 8007dc0:	ea45 0507 	orr.w	r5, r5, r7
 8007dc4:	d907      	bls.n	8007dd6 <acc_confprogram_modify_runif_sensor+0x3a>
 8007dc6:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <acc_confprogram_modify_runif_sensor+0x64>)
 8007dc8:	9700      	str	r7, [sp, #0]
 8007dca:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8007dcc:	4a0d      	ldr	r2, [pc, #52]	; (8007e04 <acc_confprogram_modify_runif_sensor+0x68>)
 8007dce:	490e      	ldr	r1, [pc, #56]	; (8007e08 <acc_confprogram_modify_runif_sensor+0x6c>)
 8007dd0:	4623      	mov	r3, r4
 8007dd2:	2004      	movs	r0, #4
 8007dd4:	47b8      	blx	r7
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4630      	mov	r0, r6
 8007ddc:	4643      	mov	r3, r8
 8007dde:	b002      	add	sp, #8
 8007de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007de4:	4718      	bx	r3
 8007de6:	f7fc fd3d 	bl	8004864 <acc_rss_integration_log_level>
 8007dea:	2803      	cmp	r0, #3
 8007dec:	d9f3      	bls.n	8007dd6 <acc_confprogram_modify_runif_sensor+0x3a>
 8007dee:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <acc_confprogram_modify_runif_sensor+0x64>)
 8007df0:	4a06      	ldr	r2, [pc, #24]	; (8007e0c <acc_confprogram_modify_runif_sensor+0x70>)
 8007df2:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8007df4:	4904      	ldr	r1, [pc, #16]	; (8007e08 <acc_confprogram_modify_runif_sensor+0x6c>)
 8007df6:	4623      	mov	r3, r4
 8007df8:	2004      	movs	r0, #4
 8007dfa:	47b8      	blx	r7
 8007dfc:	e7eb      	b.n	8007dd6 <acc_confprogram_modify_runif_sensor+0x3a>
 8007dfe:	bf00      	nop
 8007e00:	200003c8 	.word	0x200003c8
 8007e04:	0800cd2c 	.word	0x0800cd2c
 8007e08:	0800cce8 	.word	0x0800cce8
 8007e0c:	0800cd64 	.word	0x0800cd64

08007e10 <acc_confprogram_modify_runif>:
 8007e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 8007e18:	b084      	sub	sp, #16
 8007e1a:	4616      	mov	r6, r2
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	4628      	mov	r0, r5
 8007e20:	2201      	movs	r2, #1
 8007e22:	a902      	add	r1, sp, #8
 8007e24:	4698      	mov	r8, r3
 8007e26:	f7fd fe09 	bl	8005a3c <acc_utils_transfer_buffer_to_uint32>
 8007e2a:	9c02      	ldr	r4, [sp, #8]
 8007e2c:	f024 040f 	bic.w	r4, r4, #15
 8007e30:	9403      	str	r4, [sp, #12]
 8007e32:	f1b8 0f00 	cmp.w	r8, #0
 8007e36:	d015      	beq.n	8007e64 <acc_confprogram_modify_runif+0x54>
 8007e38:	433c      	orrs	r4, r7
 8007e3a:	9403      	str	r4, [sp, #12]
 8007e3c:	f7fc fd12 	bl	8004864 <acc_rss_integration_log_level>
 8007e40:	2803      	cmp	r0, #3
 8007e42:	d907      	bls.n	8007e54 <acc_confprogram_modify_runif+0x44>
 8007e44:	4a0e      	ldr	r2, [pc, #56]	; (8007e80 <acc_confprogram_modify_runif+0x70>)
 8007e46:	9700      	str	r7, [sp, #0]
 8007e48:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007e4a:	490e      	ldr	r1, [pc, #56]	; (8007e84 <acc_confprogram_modify_runif+0x74>)
 8007e4c:	4a0e      	ldr	r2, [pc, #56]	; (8007e88 <acc_confprogram_modify_runif+0x78>)
 8007e4e:	0873      	lsrs	r3, r6, #1
 8007e50:	2004      	movs	r0, #4
 8007e52:	47a0      	blx	r4
 8007e54:	4629      	mov	r1, r5
 8007e56:	2201      	movs	r2, #1
 8007e58:	a803      	add	r0, sp, #12
 8007e5a:	f7fd fde1 	bl	8005a20 <acc_utils_uint32_to_transfer_buffer>
 8007e5e:	b004      	add	sp, #16
 8007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e64:	f7fc fcfe 	bl	8004864 <acc_rss_integration_log_level>
 8007e68:	2803      	cmp	r0, #3
 8007e6a:	d9f3      	bls.n	8007e54 <acc_confprogram_modify_runif+0x44>
 8007e6c:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <acc_confprogram_modify_runif+0x70>)
 8007e6e:	9700      	str	r7, [sp, #0]
 8007e70:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007e72:	4904      	ldr	r1, [pc, #16]	; (8007e84 <acc_confprogram_modify_runif+0x74>)
 8007e74:	4a05      	ldr	r2, [pc, #20]	; (8007e8c <acc_confprogram_modify_runif+0x7c>)
 8007e76:	0873      	lsrs	r3, r6, #1
 8007e78:	2004      	movs	r0, #4
 8007e7a:	47a0      	blx	r4
 8007e7c:	e7ea      	b.n	8007e54 <acc_confprogram_modify_runif+0x44>
 8007e7e:	bf00      	nop
 8007e80:	200003c8 	.word	0x200003c8
 8007e84:	0800cce8 	.word	0x0800cce8
 8007e88:	0800cd2c 	.word	0x0800cd2c
 8007e8c:	0800cd94 	.word	0x0800cd94

08007e90 <acc_confprogram_patch_offset>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	b083      	sub	sp, #12
 8007e96:	4680      	mov	r8, r0
 8007e98:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	4617      	mov	r7, r2
 8007ea0:	461d      	mov	r5, r3
 8007ea2:	f7fc fcdf 	bl	8004864 <acc_rss_integration_log_level>
 8007ea6:	2803      	cmp	r0, #3
 8007ea8:	d909      	bls.n	8007ebe <acc_confprogram_patch_offset+0x2e>
 8007eaa:	4b38      	ldr	r3, [pc, #224]	; (8007f8c <acc_confprogram_patch_offset+0xfc>)
 8007eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eae:	9200      	str	r2, [sp, #0]
 8007eb0:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8007eb4:	4a36      	ldr	r2, [pc, #216]	; (8007f90 <acc_confprogram_patch_offset+0x100>)
 8007eb6:	4937      	ldr	r1, [pc, #220]	; (8007f94 <acc_confprogram_patch_offset+0x104>)
 8007eb8:	4623      	mov	r3, r4
 8007eba:	2004      	movs	r0, #4
 8007ebc:	47c8      	blx	r9
 8007ebe:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007ec2:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8007ec6:	f1bc 0f00 	cmp.w	ip, #0
 8007eca:	d036      	beq.n	8007f3a <acc_confprogram_patch_offset+0xaa>
 8007ecc:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8007f8c <acc_confprogram_patch_offset+0xfc>
 8007ed0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f98 <acc_confprogram_patch_offset+0x108>
 8007ed4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8007f94 <acc_confprogram_patch_offset+0x104>
 8007ed8:	2400      	movs	r4, #0
 8007eda:	e017      	b.n	8007f0c <acc_confprogram_patch_offset+0x7c>
 8007edc:	f10e 33ff 	add.w	r3, lr, #4294967295
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d81f      	bhi.n	8007f24 <acc_confprogram_patch_offset+0x94>
 8007ee4:	8881      	ldrh	r1, [r0, #4]
 8007ee6:	0049      	lsls	r1, r1, #1
 8007ee8:	b289      	uxth	r1, r1
 8007eea:	42b1      	cmp	r1, r6
 8007eec:	d30b      	bcc.n	8007f06 <acc_confprogram_patch_offset+0x76>
 8007eee:	19f3      	adds	r3, r6, r7
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	da08      	bge.n	8007f06 <acc_confprogram_patch_offset+0x76>
 8007ef4:	f1be 0f01 	cmp.w	lr, #1
 8007ef8:	d03b      	beq.n	8007f72 <acc_confprogram_patch_offset+0xe2>
 8007efa:	f1be 0f02 	cmp.w	lr, #2
 8007efe:	d02b      	beq.n	8007f58 <acc_confprogram_patch_offset+0xc8>
 8007f00:	f1be 0f00 	cmp.w	lr, #0
 8007f04:	d01c      	beq.n	8007f40 <acc_confprogram_patch_offset+0xb0>
 8007f06:	3401      	adds	r4, #1
 8007f08:	45a4      	cmp	ip, r4
 8007f0a:	d916      	bls.n	8007f3a <acc_confprogram_patch_offset+0xaa>
 8007f0c:	6868      	ldr	r0, [r5, #4]
 8007f0e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007f12:	f810 e013 	ldrb.w	lr, [r0, r3, lsl #1]
 8007f16:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8007f1a:	f1be 0f00 	cmp.w	lr, #0
 8007f1e:	d1dd      	bne.n	8007edc <acc_confprogram_patch_offset+0x4c>
 8007f20:	8841      	ldrh	r1, [r0, #2]
 8007f22:	e7e0      	b.n	8007ee6 <acc_confprogram_patch_offset+0x56>
 8007f24:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8007f28:	4652      	mov	r2, sl
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	4798      	blx	r3
 8007f30:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8007f34:	3401      	adds	r4, #1
 8007f36:	45a4      	cmp	ip, r4
 8007f38:	d8e8      	bhi.n	8007f0c <acc_confprogram_patch_offset+0x7c>
 8007f3a:	b003      	add	sp, #12
 8007f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f40:	7943      	ldrb	r3, [r0, #5]
 8007f42:	7902      	ldrb	r2, [r0, #4]
 8007f44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f46:	9000      	str	r0, [sp, #0]
 8007f48:	1b89      	subs	r1, r1, r6
 8007f4a:	b289      	uxth	r1, r1
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	f7ff fee9 	bl	8007d24 <acc_confprogram_modify_bin>
 8007f52:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8007f56:	e7d6      	b.n	8007f06 <acc_confprogram_patch_offset+0x76>
 8007f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f5a:	1b8a      	subs	r2, r1, r6
 8007f5c:	fab3 f383 	clz	r3, r3
 8007f60:	8841      	ldrh	r1, [r0, #2]
 8007f62:	b292      	uxth	r2, r2
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	4640      	mov	r0, r8
 8007f68:	f7ff ff52 	bl	8007e10 <acc_confprogram_modify_runif>
 8007f6c:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8007f70:	e7c9      	b.n	8007f06 <acc_confprogram_patch_offset+0x76>
 8007f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f74:	1b8a      	subs	r2, r1, r6
 8007f76:	3b00      	subs	r3, #0
 8007f78:	8841      	ldrh	r1, [r0, #2]
 8007f7a:	b292      	uxth	r2, r2
 8007f7c:	bf18      	it	ne
 8007f7e:	2301      	movne	r3, #1
 8007f80:	4640      	mov	r0, r8
 8007f82:	f7ff ff45 	bl	8007e10 <acc_confprogram_modify_runif>
 8007f86:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8007f8a:	e7bc      	b.n	8007f06 <acc_confprogram_patch_offset+0x76>
 8007f8c:	200003c8 	.word	0x200003c8
 8007f90:	0800cdf0 	.word	0x0800cdf0
 8007f94:	0800cce8 	.word	0x0800cce8
 8007f98:	0800cdc8 	.word	0x0800cdc8

08007f9c <acc_confprogram_live_patch>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
 8007fa6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8007faa:	4607      	mov	r7, r0
 8007fac:	468b      	mov	fp, r1
 8007fae:	4690      	mov	r8, r2
 8007fb0:	461e      	mov	r6, r3
 8007fb2:	f7fc fc57 	bl	8004864 <acc_rss_integration_log_level>
 8007fb6:	2803      	cmp	r0, #3
 8007fb8:	d908      	bls.n	8007fcc <acc_confprogram_live_patch+0x30>
 8007fba:	4b2a      	ldr	r3, [pc, #168]	; (8008064 <acc_confprogram_live_patch+0xc8>)
 8007fbc:	f8cd 9000 	str.w	r9, [sp]
 8007fc0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007fc2:	4a29      	ldr	r2, [pc, #164]	; (8008068 <acc_confprogram_live_patch+0xcc>)
 8007fc4:	4929      	ldr	r1, [pc, #164]	; (800806c <acc_confprogram_live_patch+0xd0>)
 8007fc6:	4623      	mov	r3, r4
 8007fc8:	2004      	movs	r0, #4
 8007fca:	47a8      	blx	r5
 8007fcc:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8007fd0:	8873      	ldrh	r3, [r6, #2]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d043      	beq.n	800805e <acc_confprogram_live_patch+0xc2>
 8007fd6:	2500      	movs	r5, #0
 8007fd8:	e011      	b.n	8007ffe <acc_confprogram_live_patch+0x62>
 8007fda:	88a2      	ldrh	r2, [r4, #4]
 8007fdc:	8863      	ldrh	r3, [r4, #2]
 8007fde:	f8cd a004 	str.w	sl, [sp, #4]
 8007fe2:	fab9 f189 	clz	r1, r9
 8007fe6:	4442      	add	r2, r8
 8007fe8:	0949      	lsrs	r1, r1, #5
 8007fea:	9100      	str	r1, [sp, #0]
 8007fec:	b292      	uxth	r2, r2
 8007fee:	4659      	mov	r1, fp
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff fed3 	bl	8007d9c <acc_confprogram_modify_runif_sensor>
 8007ff6:	8873      	ldrh	r3, [r6, #2]
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	42ab      	cmp	r3, r5
 8007ffc:	d92f      	bls.n	800805e <acc_confprogram_live_patch+0xc2>
 8007ffe:	6873      	ldr	r3, [r6, #4]
 8008000:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8008004:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
 8008008:	2a01      	cmp	r2, #1
 800800a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800800e:	d00c      	beq.n	800802a <acc_confprogram_live_patch+0x8e>
 8008010:	2a02      	cmp	r2, #2
 8008012:	d0e2      	beq.n	8007fda <acc_confprogram_live_patch+0x3e>
 8008014:	b19a      	cbz	r2, 800803e <acc_confprogram_live_patch+0xa2>
 8008016:	4b13      	ldr	r3, [pc, #76]	; (8008064 <acc_confprogram_live_patch+0xc8>)
 8008018:	4914      	ldr	r1, [pc, #80]	; (800806c <acc_confprogram_live_patch+0xd0>)
 800801a:	4a15      	ldr	r2, [pc, #84]	; (8008070 <acc_confprogram_live_patch+0xd4>)
 800801c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801e:	2000      	movs	r0, #0
 8008020:	4798      	blx	r3
 8008022:	4812      	ldr	r0, [pc, #72]	; (800806c <acc_confprogram_live_patch+0xd0>)
 8008024:	21ed      	movs	r1, #237	; 0xed
 8008026:	f7fd fb85 	bl	8005734 <acc_assert_fail>
 800802a:	88a2      	ldrh	r2, [r4, #4]
 800802c:	8863      	ldrh	r3, [r4, #2]
 800802e:	f8cd a004 	str.w	sl, [sp, #4]
 8008032:	f1b9 0100 	subs.w	r1, r9, #0
 8008036:	4442      	add	r2, r8
 8008038:	bf18      	it	ne
 800803a:	2101      	movne	r1, #1
 800803c:	e7d5      	b.n	8007fea <acc_confprogram_live_patch+0x4e>
 800803e:	8861      	ldrh	r1, [r4, #2]
 8008040:	7963      	ldrb	r3, [r4, #5]
 8008042:	7922      	ldrb	r2, [r4, #4]
 8008044:	f8cd a004 	str.w	sl, [sp, #4]
 8008048:	4441      	add	r1, r8
 800804a:	b289      	uxth	r1, r1
 800804c:	f8cd 9000 	str.w	r9, [sp]
 8008050:	4638      	mov	r0, r7
 8008052:	f7ff fe31 	bl	8007cb8 <acc_confprogram_modify_bin_sensor>
 8008056:	8873      	ldrh	r3, [r6, #2]
 8008058:	3501      	adds	r5, #1
 800805a:	42ab      	cmp	r3, r5
 800805c:	d8cf      	bhi.n	8007ffe <acc_confprogram_live_patch+0x62>
 800805e:	b003      	add	sp, #12
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	200003c8 	.word	0x200003c8
 8008068:	0800cdec 	.word	0x0800cdec
 800806c:	0800cce8 	.word	0x0800cce8
 8008070:	0800ce10 	.word	0x0800ce10

08008074 <acc_confprogram_copy>:
 8008074:	b152      	cbz	r2, 800808c <acc_confprogram_copy+0x18>
 8008076:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800807a:	3804      	subs	r0, #4
 800807c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8008080:	804b      	strh	r3, [r1, #2]
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	800b      	strh	r3, [r1, #0]
 8008086:	3104      	adds	r1, #4
 8008088:	4291      	cmp	r1, r2
 800808a:	d1f7      	bne.n	800807c <acc_confprogram_copy+0x8>
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	; (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000144 	.word	0x20000144

0800809c <__sflush_r>:
 800809c:	898a      	ldrh	r2, [r1, #12]
 800809e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a2:	4605      	mov	r5, r0
 80080a4:	0710      	lsls	r0, r2, #28
 80080a6:	460c      	mov	r4, r1
 80080a8:	d458      	bmi.n	800815c <__sflush_r+0xc0>
 80080aa:	684b      	ldr	r3, [r1, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dc05      	bgt.n	80080bc <__sflush_r+0x20>
 80080b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	dc02      	bgt.n	80080bc <__sflush_r+0x20>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080be:	2e00      	cmp	r6, #0
 80080c0:	d0f9      	beq.n	80080b6 <__sflush_r+0x1a>
 80080c2:	2300      	movs	r3, #0
 80080c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080c8:	682f      	ldr	r7, [r5, #0]
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	d032      	beq.n	8008134 <__sflush_r+0x98>
 80080ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	075a      	lsls	r2, r3, #29
 80080d4:	d505      	bpl.n	80080e2 <__sflush_r+0x46>
 80080d6:	6863      	ldr	r3, [r4, #4]
 80080d8:	1ac0      	subs	r0, r0, r3
 80080da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080dc:	b10b      	cbz	r3, 80080e2 <__sflush_r+0x46>
 80080de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080e0:	1ac0      	subs	r0, r0, r3
 80080e2:	2300      	movs	r3, #0
 80080e4:	4602      	mov	r2, r0
 80080e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080e8:	6a21      	ldr	r1, [r4, #32]
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b0      	blx	r6
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	d106      	bne.n	8008102 <__sflush_r+0x66>
 80080f4:	6829      	ldr	r1, [r5, #0]
 80080f6:	291d      	cmp	r1, #29
 80080f8:	d82c      	bhi.n	8008154 <__sflush_r+0xb8>
 80080fa:	4a2a      	ldr	r2, [pc, #168]	; (80081a4 <__sflush_r+0x108>)
 80080fc:	40ca      	lsrs	r2, r1
 80080fe:	07d6      	lsls	r6, r2, #31
 8008100:	d528      	bpl.n	8008154 <__sflush_r+0xb8>
 8008102:	2200      	movs	r2, #0
 8008104:	6062      	str	r2, [r4, #4]
 8008106:	04d9      	lsls	r1, r3, #19
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	6022      	str	r2, [r4, #0]
 800810c:	d504      	bpl.n	8008118 <__sflush_r+0x7c>
 800810e:	1c42      	adds	r2, r0, #1
 8008110:	d101      	bne.n	8008116 <__sflush_r+0x7a>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	b903      	cbnz	r3, 8008118 <__sflush_r+0x7c>
 8008116:	6560      	str	r0, [r4, #84]	; 0x54
 8008118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811a:	602f      	str	r7, [r5, #0]
 800811c:	2900      	cmp	r1, #0
 800811e:	d0ca      	beq.n	80080b6 <__sflush_r+0x1a>
 8008120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008124:	4299      	cmp	r1, r3
 8008126:	d002      	beq.n	800812e <__sflush_r+0x92>
 8008128:	4628      	mov	r0, r5
 800812a:	f000 f9e9 	bl	8008500 <_free_r>
 800812e:	2000      	movs	r0, #0
 8008130:	6360      	str	r0, [r4, #52]	; 0x34
 8008132:	e7c1      	b.n	80080b8 <__sflush_r+0x1c>
 8008134:	6a21      	ldr	r1, [r4, #32]
 8008136:	2301      	movs	r3, #1
 8008138:	4628      	mov	r0, r5
 800813a:	47b0      	blx	r6
 800813c:	1c41      	adds	r1, r0, #1
 800813e:	d1c7      	bne.n	80080d0 <__sflush_r+0x34>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0c4      	beq.n	80080d0 <__sflush_r+0x34>
 8008146:	2b1d      	cmp	r3, #29
 8008148:	d001      	beq.n	800814e <__sflush_r+0xb2>
 800814a:	2b16      	cmp	r3, #22
 800814c:	d101      	bne.n	8008152 <__sflush_r+0xb6>
 800814e:	602f      	str	r7, [r5, #0]
 8008150:	e7b1      	b.n	80080b6 <__sflush_r+0x1a>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	e7ad      	b.n	80080b8 <__sflush_r+0x1c>
 800815c:	690f      	ldr	r7, [r1, #16]
 800815e:	2f00      	cmp	r7, #0
 8008160:	d0a9      	beq.n	80080b6 <__sflush_r+0x1a>
 8008162:	0793      	lsls	r3, r2, #30
 8008164:	680e      	ldr	r6, [r1, #0]
 8008166:	bf08      	it	eq
 8008168:	694b      	ldreq	r3, [r1, #20]
 800816a:	600f      	str	r7, [r1, #0]
 800816c:	bf18      	it	ne
 800816e:	2300      	movne	r3, #0
 8008170:	eba6 0807 	sub.w	r8, r6, r7
 8008174:	608b      	str	r3, [r1, #8]
 8008176:	f1b8 0f00 	cmp.w	r8, #0
 800817a:	dd9c      	ble.n	80080b6 <__sflush_r+0x1a>
 800817c:	6a21      	ldr	r1, [r4, #32]
 800817e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008180:	4643      	mov	r3, r8
 8008182:	463a      	mov	r2, r7
 8008184:	4628      	mov	r0, r5
 8008186:	47b0      	blx	r6
 8008188:	2800      	cmp	r0, #0
 800818a:	dc06      	bgt.n	800819a <__sflush_r+0xfe>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	e78e      	b.n	80080b8 <__sflush_r+0x1c>
 800819a:	4407      	add	r7, r0
 800819c:	eba8 0800 	sub.w	r8, r8, r0
 80081a0:	e7e9      	b.n	8008176 <__sflush_r+0xda>
 80081a2:	bf00      	nop
 80081a4:	20400001 	.word	0x20400001

080081a8 <_fflush_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	690b      	ldr	r3, [r1, #16]
 80081ac:	4605      	mov	r5, r0
 80081ae:	460c      	mov	r4, r1
 80081b0:	b913      	cbnz	r3, 80081b8 <_fflush_r+0x10>
 80081b2:	2500      	movs	r5, #0
 80081b4:	4628      	mov	r0, r5
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	b118      	cbz	r0, 80081c2 <_fflush_r+0x1a>
 80081ba:	6983      	ldr	r3, [r0, #24]
 80081bc:	b90b      	cbnz	r3, 80081c2 <_fflush_r+0x1a>
 80081be:	f000 f899 	bl	80082f4 <__sinit>
 80081c2:	4b14      	ldr	r3, [pc, #80]	; (8008214 <_fflush_r+0x6c>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d11b      	bne.n	8008200 <_fflush_r+0x58>
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0ef      	beq.n	80081b2 <_fflush_r+0xa>
 80081d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081d4:	07d0      	lsls	r0, r2, #31
 80081d6:	d404      	bmi.n	80081e2 <_fflush_r+0x3a>
 80081d8:	0599      	lsls	r1, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_fflush_r+0x3a>
 80081dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081de:	f000 f94c 	bl	800847a <__retarget_lock_acquire_recursive>
 80081e2:	4628      	mov	r0, r5
 80081e4:	4621      	mov	r1, r4
 80081e6:	f7ff ff59 	bl	800809c <__sflush_r>
 80081ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ec:	07da      	lsls	r2, r3, #31
 80081ee:	4605      	mov	r5, r0
 80081f0:	d4e0      	bmi.n	80081b4 <_fflush_r+0xc>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	059b      	lsls	r3, r3, #22
 80081f6:	d4dd      	bmi.n	80081b4 <_fflush_r+0xc>
 80081f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fa:	f000 f93f 	bl	800847c <__retarget_lock_release_recursive>
 80081fe:	e7d9      	b.n	80081b4 <_fflush_r+0xc>
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <_fflush_r+0x70>)
 8008202:	429c      	cmp	r4, r3
 8008204:	d101      	bne.n	800820a <_fflush_r+0x62>
 8008206:	68ac      	ldr	r4, [r5, #8]
 8008208:	e7df      	b.n	80081ca <_fflush_r+0x22>
 800820a:	4b04      	ldr	r3, [pc, #16]	; (800821c <_fflush_r+0x74>)
 800820c:	429c      	cmp	r4, r3
 800820e:	bf08      	it	eq
 8008210:	68ec      	ldreq	r4, [r5, #12]
 8008212:	e7da      	b.n	80081ca <_fflush_r+0x22>
 8008214:	0800d7f0 	.word	0x0800d7f0
 8008218:	0800d810 	.word	0x0800d810
 800821c:	0800d7d0 	.word	0x0800d7d0

08008220 <fflush>:
 8008220:	4601      	mov	r1, r0
 8008222:	b920      	cbnz	r0, 800822e <fflush+0xe>
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <fflush+0x18>)
 8008226:	4905      	ldr	r1, [pc, #20]	; (800823c <fflush+0x1c>)
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f000 b8e1 	b.w	80083f0 <_fwalk_reent>
 800822e:	4b04      	ldr	r3, [pc, #16]	; (8008240 <fflush+0x20>)
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f7ff bfb9 	b.w	80081a8 <_fflush_r>
 8008236:	bf00      	nop
 8008238:	0800d830 	.word	0x0800d830
 800823c:	080081a9 	.word	0x080081a9
 8008240:	20000144 	.word	0x20000144

08008244 <std>:
 8008244:	2300      	movs	r3, #0
 8008246:	b510      	push	{r4, lr}
 8008248:	4604      	mov	r4, r0
 800824a:	e9c0 3300 	strd	r3, r3, [r0]
 800824e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008252:	6083      	str	r3, [r0, #8]
 8008254:	8181      	strh	r1, [r0, #12]
 8008256:	6643      	str	r3, [r0, #100]	; 0x64
 8008258:	81c2      	strh	r2, [r0, #14]
 800825a:	6183      	str	r3, [r0, #24]
 800825c:	4619      	mov	r1, r3
 800825e:	2208      	movs	r2, #8
 8008260:	305c      	adds	r0, #92	; 0x5c
 8008262:	f000 f945 	bl	80084f0 <memset>
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <std+0x38>)
 8008268:	6263      	str	r3, [r4, #36]	; 0x24
 800826a:	4b05      	ldr	r3, [pc, #20]	; (8008280 <std+0x3c>)
 800826c:	62a3      	str	r3, [r4, #40]	; 0x28
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <std+0x40>)
 8008270:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <std+0x44>)
 8008274:	6224      	str	r4, [r4, #32]
 8008276:	6323      	str	r3, [r4, #48]	; 0x30
 8008278:	bd10      	pop	{r4, pc}
 800827a:	bf00      	nop
 800827c:	080087fd 	.word	0x080087fd
 8008280:	0800881f 	.word	0x0800881f
 8008284:	08008857 	.word	0x08008857
 8008288:	0800887b 	.word	0x0800887b

0800828c <_cleanup_r>:
 800828c:	4901      	ldr	r1, [pc, #4]	; (8008294 <_cleanup_r+0x8>)
 800828e:	f000 b8af 	b.w	80083f0 <_fwalk_reent>
 8008292:	bf00      	nop
 8008294:	080081a9 	.word	0x080081a9

08008298 <__sfmoreglue>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	2268      	movs	r2, #104	; 0x68
 800829c:	1e4d      	subs	r5, r1, #1
 800829e:	4355      	muls	r5, r2
 80082a0:	460e      	mov	r6, r1
 80082a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082a6:	f000 f997 	bl	80085d8 <_malloc_r>
 80082aa:	4604      	mov	r4, r0
 80082ac:	b140      	cbz	r0, 80082c0 <__sfmoreglue+0x28>
 80082ae:	2100      	movs	r1, #0
 80082b0:	e9c0 1600 	strd	r1, r6, [r0]
 80082b4:	300c      	adds	r0, #12
 80082b6:	60a0      	str	r0, [r4, #8]
 80082b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082bc:	f000 f918 	bl	80084f0 <memset>
 80082c0:	4620      	mov	r0, r4
 80082c2:	bd70      	pop	{r4, r5, r6, pc}

080082c4 <__sfp_lock_acquire>:
 80082c4:	4801      	ldr	r0, [pc, #4]	; (80082cc <__sfp_lock_acquire+0x8>)
 80082c6:	f000 b8d8 	b.w	800847a <__retarget_lock_acquire_recursive>
 80082ca:	bf00      	nop
 80082cc:	200003b9 	.word	0x200003b9

080082d0 <__sfp_lock_release>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__sfp_lock_release+0x8>)
 80082d2:	f000 b8d3 	b.w	800847c <__retarget_lock_release_recursive>
 80082d6:	bf00      	nop
 80082d8:	200003b9 	.word	0x200003b9

080082dc <__sinit_lock_acquire>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__sinit_lock_acquire+0x8>)
 80082de:	f000 b8cc 	b.w	800847a <__retarget_lock_acquire_recursive>
 80082e2:	bf00      	nop
 80082e4:	200003ba 	.word	0x200003ba

080082e8 <__sinit_lock_release>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__sinit_lock_release+0x8>)
 80082ea:	f000 b8c7 	b.w	800847c <__retarget_lock_release_recursive>
 80082ee:	bf00      	nop
 80082f0:	200003ba 	.word	0x200003ba

080082f4 <__sinit>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	4604      	mov	r4, r0
 80082f8:	f7ff fff0 	bl	80082dc <__sinit_lock_acquire>
 80082fc:	69a3      	ldr	r3, [r4, #24]
 80082fe:	b11b      	cbz	r3, 8008308 <__sinit+0x14>
 8008300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008304:	f7ff bff0 	b.w	80082e8 <__sinit_lock_release>
 8008308:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800830c:	6523      	str	r3, [r4, #80]	; 0x50
 800830e:	4b13      	ldr	r3, [pc, #76]	; (800835c <__sinit+0x68>)
 8008310:	4a13      	ldr	r2, [pc, #76]	; (8008360 <__sinit+0x6c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	62a2      	str	r2, [r4, #40]	; 0x28
 8008316:	42a3      	cmp	r3, r4
 8008318:	bf04      	itt	eq
 800831a:	2301      	moveq	r3, #1
 800831c:	61a3      	streq	r3, [r4, #24]
 800831e:	4620      	mov	r0, r4
 8008320:	f000 f820 	bl	8008364 <__sfp>
 8008324:	6060      	str	r0, [r4, #4]
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f81c 	bl	8008364 <__sfp>
 800832c:	60a0      	str	r0, [r4, #8]
 800832e:	4620      	mov	r0, r4
 8008330:	f000 f818 	bl	8008364 <__sfp>
 8008334:	2200      	movs	r2, #0
 8008336:	60e0      	str	r0, [r4, #12]
 8008338:	2104      	movs	r1, #4
 800833a:	6860      	ldr	r0, [r4, #4]
 800833c:	f7ff ff82 	bl	8008244 <std>
 8008340:	68a0      	ldr	r0, [r4, #8]
 8008342:	2201      	movs	r2, #1
 8008344:	2109      	movs	r1, #9
 8008346:	f7ff ff7d 	bl	8008244 <std>
 800834a:	68e0      	ldr	r0, [r4, #12]
 800834c:	2202      	movs	r2, #2
 800834e:	2112      	movs	r1, #18
 8008350:	f7ff ff78 	bl	8008244 <std>
 8008354:	2301      	movs	r3, #1
 8008356:	61a3      	str	r3, [r4, #24]
 8008358:	e7d2      	b.n	8008300 <__sinit+0xc>
 800835a:	bf00      	nop
 800835c:	0800d830 	.word	0x0800d830
 8008360:	0800828d 	.word	0x0800828d

08008364 <__sfp>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	4607      	mov	r7, r0
 8008368:	f7ff ffac 	bl	80082c4 <__sfp_lock_acquire>
 800836c:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <__sfp+0x84>)
 800836e:	681e      	ldr	r6, [r3, #0]
 8008370:	69b3      	ldr	r3, [r6, #24]
 8008372:	b913      	cbnz	r3, 800837a <__sfp+0x16>
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff ffbd 	bl	80082f4 <__sinit>
 800837a:	3648      	adds	r6, #72	; 0x48
 800837c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008380:	3b01      	subs	r3, #1
 8008382:	d503      	bpl.n	800838c <__sfp+0x28>
 8008384:	6833      	ldr	r3, [r6, #0]
 8008386:	b30b      	cbz	r3, 80083cc <__sfp+0x68>
 8008388:	6836      	ldr	r6, [r6, #0]
 800838a:	e7f7      	b.n	800837c <__sfp+0x18>
 800838c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008390:	b9d5      	cbnz	r5, 80083c8 <__sfp+0x64>
 8008392:	4b16      	ldr	r3, [pc, #88]	; (80083ec <__sfp+0x88>)
 8008394:	60e3      	str	r3, [r4, #12]
 8008396:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800839a:	6665      	str	r5, [r4, #100]	; 0x64
 800839c:	f000 f86c 	bl	8008478 <__retarget_lock_init_recursive>
 80083a0:	f7ff ff96 	bl	80082d0 <__sfp_lock_release>
 80083a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083ac:	6025      	str	r5, [r4, #0]
 80083ae:	61a5      	str	r5, [r4, #24]
 80083b0:	2208      	movs	r2, #8
 80083b2:	4629      	mov	r1, r5
 80083b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083b8:	f000 f89a 	bl	80084f0 <memset>
 80083bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083c4:	4620      	mov	r0, r4
 80083c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c8:	3468      	adds	r4, #104	; 0x68
 80083ca:	e7d9      	b.n	8008380 <__sfp+0x1c>
 80083cc:	2104      	movs	r1, #4
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff ff62 	bl	8008298 <__sfmoreglue>
 80083d4:	4604      	mov	r4, r0
 80083d6:	6030      	str	r0, [r6, #0]
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1d5      	bne.n	8008388 <__sfp+0x24>
 80083dc:	f7ff ff78 	bl	80082d0 <__sfp_lock_release>
 80083e0:	230c      	movs	r3, #12
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	e7ee      	b.n	80083c4 <__sfp+0x60>
 80083e6:	bf00      	nop
 80083e8:	0800d830 	.word	0x0800d830
 80083ec:	ffff0001 	.word	0xffff0001

080083f0 <_fwalk_reent>:
 80083f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	4606      	mov	r6, r0
 80083f6:	4688      	mov	r8, r1
 80083f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083fc:	2700      	movs	r7, #0
 80083fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008402:	f1b9 0901 	subs.w	r9, r9, #1
 8008406:	d505      	bpl.n	8008414 <_fwalk_reent+0x24>
 8008408:	6824      	ldr	r4, [r4, #0]
 800840a:	2c00      	cmp	r4, #0
 800840c:	d1f7      	bne.n	80083fe <_fwalk_reent+0xe>
 800840e:	4638      	mov	r0, r7
 8008410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008414:	89ab      	ldrh	r3, [r5, #12]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d907      	bls.n	800842a <_fwalk_reent+0x3a>
 800841a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800841e:	3301      	adds	r3, #1
 8008420:	d003      	beq.n	800842a <_fwalk_reent+0x3a>
 8008422:	4629      	mov	r1, r5
 8008424:	4630      	mov	r0, r6
 8008426:	47c0      	blx	r8
 8008428:	4307      	orrs	r7, r0
 800842a:	3568      	adds	r5, #104	; 0x68
 800842c:	e7e9      	b.n	8008402 <_fwalk_reent+0x12>
	...

08008430 <__libc_init_array>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	4d0d      	ldr	r5, [pc, #52]	; (8008468 <__libc_init_array+0x38>)
 8008434:	4c0d      	ldr	r4, [pc, #52]	; (800846c <__libc_init_array+0x3c>)
 8008436:	1b64      	subs	r4, r4, r5
 8008438:	10a4      	asrs	r4, r4, #2
 800843a:	2600      	movs	r6, #0
 800843c:	42a6      	cmp	r6, r4
 800843e:	d109      	bne.n	8008454 <__libc_init_array+0x24>
 8008440:	4d0b      	ldr	r5, [pc, #44]	; (8008470 <__libc_init_array+0x40>)
 8008442:	4c0c      	ldr	r4, [pc, #48]	; (8008474 <__libc_init_array+0x44>)
 8008444:	f001 f872 	bl	800952c <_init>
 8008448:	1b64      	subs	r4, r4, r5
 800844a:	10a4      	asrs	r4, r4, #2
 800844c:	2600      	movs	r6, #0
 800844e:	42a6      	cmp	r6, r4
 8008450:	d105      	bne.n	800845e <__libc_init_array+0x2e>
 8008452:	bd70      	pop	{r4, r5, r6, pc}
 8008454:	f855 3b04 	ldr.w	r3, [r5], #4
 8008458:	4798      	blx	r3
 800845a:	3601      	adds	r6, #1
 800845c:	e7ee      	b.n	800843c <__libc_init_array+0xc>
 800845e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008462:	4798      	blx	r3
 8008464:	3601      	adds	r6, #1
 8008466:	e7f2      	b.n	800844e <__libc_init_array+0x1e>
 8008468:	0800d868 	.word	0x0800d868
 800846c:	0800d868 	.word	0x0800d868
 8008470:	0800d868 	.word	0x0800d868
 8008474:	0800d86c 	.word	0x0800d86c

08008478 <__retarget_lock_init_recursive>:
 8008478:	4770      	bx	lr

0800847a <__retarget_lock_acquire_recursive>:
 800847a:	4770      	bx	lr

0800847c <__retarget_lock_release_recursive>:
 800847c:	4770      	bx	lr
	...

08008480 <malloc>:
 8008480:	4b02      	ldr	r3, [pc, #8]	; (800848c <malloc+0xc>)
 8008482:	4601      	mov	r1, r0
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	f000 b8a7 	b.w	80085d8 <_malloc_r>
 800848a:	bf00      	nop
 800848c:	20000144 	.word	0x20000144

08008490 <free>:
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <free+0xc>)
 8008492:	4601      	mov	r1, r0
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f000 b833 	b.w	8008500 <_free_r>
 800849a:	bf00      	nop
 800849c:	20000144 	.word	0x20000144

080084a0 <memcpy>:
 80084a0:	440a      	add	r2, r1
 80084a2:	4291      	cmp	r1, r2
 80084a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a8:	d100      	bne.n	80084ac <memcpy+0xc>
 80084aa:	4770      	bx	lr
 80084ac:	b510      	push	{r4, lr}
 80084ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b6:	4291      	cmp	r1, r2
 80084b8:	d1f9      	bne.n	80084ae <memcpy+0xe>
 80084ba:	bd10      	pop	{r4, pc}

080084bc <memmove>:
 80084bc:	4288      	cmp	r0, r1
 80084be:	b510      	push	{r4, lr}
 80084c0:	eb01 0402 	add.w	r4, r1, r2
 80084c4:	d902      	bls.n	80084cc <memmove+0x10>
 80084c6:	4284      	cmp	r4, r0
 80084c8:	4623      	mov	r3, r4
 80084ca:	d807      	bhi.n	80084dc <memmove+0x20>
 80084cc:	1e43      	subs	r3, r0, #1
 80084ce:	42a1      	cmp	r1, r4
 80084d0:	d008      	beq.n	80084e4 <memmove+0x28>
 80084d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084da:	e7f8      	b.n	80084ce <memmove+0x12>
 80084dc:	4402      	add	r2, r0
 80084de:	4601      	mov	r1, r0
 80084e0:	428a      	cmp	r2, r1
 80084e2:	d100      	bne.n	80084e6 <memmove+0x2a>
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ee:	e7f7      	b.n	80084e0 <memmove+0x24>

080084f0 <memset>:
 80084f0:	4402      	add	r2, r0
 80084f2:	4603      	mov	r3, r0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d100      	bne.n	80084fa <memset+0xa>
 80084f8:	4770      	bx	lr
 80084fa:	f803 1b01 	strb.w	r1, [r3], #1
 80084fe:	e7f9      	b.n	80084f4 <memset+0x4>

08008500 <_free_r>:
 8008500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008502:	2900      	cmp	r1, #0
 8008504:	d044      	beq.n	8008590 <_free_r+0x90>
 8008506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800850a:	9001      	str	r0, [sp, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f1a1 0404 	sub.w	r4, r1, #4
 8008512:	bfb8      	it	lt
 8008514:	18e4      	addlt	r4, r4, r3
 8008516:	f000 fb47 	bl	8008ba8 <__malloc_lock>
 800851a:	4a1e      	ldr	r2, [pc, #120]	; (8008594 <_free_r+0x94>)
 800851c:	9801      	ldr	r0, [sp, #4]
 800851e:	6813      	ldr	r3, [r2, #0]
 8008520:	b933      	cbnz	r3, 8008530 <_free_r+0x30>
 8008522:	6063      	str	r3, [r4, #4]
 8008524:	6014      	str	r4, [r2, #0]
 8008526:	b003      	add	sp, #12
 8008528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800852c:	f000 bb42 	b.w	8008bb4 <__malloc_unlock>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d908      	bls.n	8008546 <_free_r+0x46>
 8008534:	6825      	ldr	r5, [r4, #0]
 8008536:	1961      	adds	r1, r4, r5
 8008538:	428b      	cmp	r3, r1
 800853a:	bf01      	itttt	eq
 800853c:	6819      	ldreq	r1, [r3, #0]
 800853e:	685b      	ldreq	r3, [r3, #4]
 8008540:	1949      	addeq	r1, r1, r5
 8008542:	6021      	streq	r1, [r4, #0]
 8008544:	e7ed      	b.n	8008522 <_free_r+0x22>
 8008546:	461a      	mov	r2, r3
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	b10b      	cbz	r3, 8008550 <_free_r+0x50>
 800854c:	42a3      	cmp	r3, r4
 800854e:	d9fa      	bls.n	8008546 <_free_r+0x46>
 8008550:	6811      	ldr	r1, [r2, #0]
 8008552:	1855      	adds	r5, r2, r1
 8008554:	42a5      	cmp	r5, r4
 8008556:	d10b      	bne.n	8008570 <_free_r+0x70>
 8008558:	6824      	ldr	r4, [r4, #0]
 800855a:	4421      	add	r1, r4
 800855c:	1854      	adds	r4, r2, r1
 800855e:	42a3      	cmp	r3, r4
 8008560:	6011      	str	r1, [r2, #0]
 8008562:	d1e0      	bne.n	8008526 <_free_r+0x26>
 8008564:	681c      	ldr	r4, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	6053      	str	r3, [r2, #4]
 800856a:	4421      	add	r1, r4
 800856c:	6011      	str	r1, [r2, #0]
 800856e:	e7da      	b.n	8008526 <_free_r+0x26>
 8008570:	d902      	bls.n	8008578 <_free_r+0x78>
 8008572:	230c      	movs	r3, #12
 8008574:	6003      	str	r3, [r0, #0]
 8008576:	e7d6      	b.n	8008526 <_free_r+0x26>
 8008578:	6825      	ldr	r5, [r4, #0]
 800857a:	1961      	adds	r1, r4, r5
 800857c:	428b      	cmp	r3, r1
 800857e:	bf04      	itt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	bf04      	itt	eq
 8008588:	1949      	addeq	r1, r1, r5
 800858a:	6021      	streq	r1, [r4, #0]
 800858c:	6054      	str	r4, [r2, #4]
 800858e:	e7ca      	b.n	8008526 <_free_r+0x26>
 8008590:	b003      	add	sp, #12
 8008592:	bd30      	pop	{r4, r5, pc}
 8008594:	200003bc 	.word	0x200003bc

08008598 <sbrk_aligned>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4e0e      	ldr	r6, [pc, #56]	; (80085d4 <sbrk_aligned+0x3c>)
 800859c:	460c      	mov	r4, r1
 800859e:	6831      	ldr	r1, [r6, #0]
 80085a0:	4605      	mov	r5, r0
 80085a2:	b911      	cbnz	r1, 80085aa <sbrk_aligned+0x12>
 80085a4:	f000 f91a 	bl	80087dc <_sbrk_r>
 80085a8:	6030      	str	r0, [r6, #0]
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f915 	bl	80087dc <_sbrk_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d00a      	beq.n	80085cc <sbrk_aligned+0x34>
 80085b6:	1cc4      	adds	r4, r0, #3
 80085b8:	f024 0403 	bic.w	r4, r4, #3
 80085bc:	42a0      	cmp	r0, r4
 80085be:	d007      	beq.n	80085d0 <sbrk_aligned+0x38>
 80085c0:	1a21      	subs	r1, r4, r0
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 f90a 	bl	80087dc <_sbrk_r>
 80085c8:	3001      	adds	r0, #1
 80085ca:	d101      	bne.n	80085d0 <sbrk_aligned+0x38>
 80085cc:	f04f 34ff 	mov.w	r4, #4294967295
 80085d0:	4620      	mov	r0, r4
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	200003c0 	.word	0x200003c0

080085d8 <_malloc_r>:
 80085d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085dc:	1ccd      	adds	r5, r1, #3
 80085de:	f025 0503 	bic.w	r5, r5, #3
 80085e2:	3508      	adds	r5, #8
 80085e4:	2d0c      	cmp	r5, #12
 80085e6:	bf38      	it	cc
 80085e8:	250c      	movcc	r5, #12
 80085ea:	2d00      	cmp	r5, #0
 80085ec:	4607      	mov	r7, r0
 80085ee:	db01      	blt.n	80085f4 <_malloc_r+0x1c>
 80085f0:	42a9      	cmp	r1, r5
 80085f2:	d905      	bls.n	8008600 <_malloc_r+0x28>
 80085f4:	230c      	movs	r3, #12
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	2600      	movs	r6, #0
 80085fa:	4630      	mov	r0, r6
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	4e2e      	ldr	r6, [pc, #184]	; (80086bc <_malloc_r+0xe4>)
 8008602:	f000 fad1 	bl	8008ba8 <__malloc_lock>
 8008606:	6833      	ldr	r3, [r6, #0]
 8008608:	461c      	mov	r4, r3
 800860a:	bb34      	cbnz	r4, 800865a <_malloc_r+0x82>
 800860c:	4629      	mov	r1, r5
 800860e:	4638      	mov	r0, r7
 8008610:	f7ff ffc2 	bl	8008598 <sbrk_aligned>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	4604      	mov	r4, r0
 8008618:	d14d      	bne.n	80086b6 <_malloc_r+0xde>
 800861a:	6834      	ldr	r4, [r6, #0]
 800861c:	4626      	mov	r6, r4
 800861e:	2e00      	cmp	r6, #0
 8008620:	d140      	bne.n	80086a4 <_malloc_r+0xcc>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	4631      	mov	r1, r6
 8008626:	4638      	mov	r0, r7
 8008628:	eb04 0803 	add.w	r8, r4, r3
 800862c:	f000 f8d6 	bl	80087dc <_sbrk_r>
 8008630:	4580      	cmp	r8, r0
 8008632:	d13a      	bne.n	80086aa <_malloc_r+0xd2>
 8008634:	6821      	ldr	r1, [r4, #0]
 8008636:	3503      	adds	r5, #3
 8008638:	1a6d      	subs	r5, r5, r1
 800863a:	f025 0503 	bic.w	r5, r5, #3
 800863e:	3508      	adds	r5, #8
 8008640:	2d0c      	cmp	r5, #12
 8008642:	bf38      	it	cc
 8008644:	250c      	movcc	r5, #12
 8008646:	4629      	mov	r1, r5
 8008648:	4638      	mov	r0, r7
 800864a:	f7ff ffa5 	bl	8008598 <sbrk_aligned>
 800864e:	3001      	adds	r0, #1
 8008650:	d02b      	beq.n	80086aa <_malloc_r+0xd2>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	442b      	add	r3, r5
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	e00e      	b.n	8008678 <_malloc_r+0xa0>
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	1b52      	subs	r2, r2, r5
 800865e:	d41e      	bmi.n	800869e <_malloc_r+0xc6>
 8008660:	2a0b      	cmp	r2, #11
 8008662:	d916      	bls.n	8008692 <_malloc_r+0xba>
 8008664:	1961      	adds	r1, r4, r5
 8008666:	42a3      	cmp	r3, r4
 8008668:	6025      	str	r5, [r4, #0]
 800866a:	bf18      	it	ne
 800866c:	6059      	strne	r1, [r3, #4]
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	bf08      	it	eq
 8008672:	6031      	streq	r1, [r6, #0]
 8008674:	5162      	str	r2, [r4, r5]
 8008676:	604b      	str	r3, [r1, #4]
 8008678:	4638      	mov	r0, r7
 800867a:	f104 060b 	add.w	r6, r4, #11
 800867e:	f000 fa99 	bl	8008bb4 <__malloc_unlock>
 8008682:	f026 0607 	bic.w	r6, r6, #7
 8008686:	1d23      	adds	r3, r4, #4
 8008688:	1af2      	subs	r2, r6, r3
 800868a:	d0b6      	beq.n	80085fa <_malloc_r+0x22>
 800868c:	1b9b      	subs	r3, r3, r6
 800868e:	50a3      	str	r3, [r4, r2]
 8008690:	e7b3      	b.n	80085fa <_malloc_r+0x22>
 8008692:	6862      	ldr	r2, [r4, #4]
 8008694:	42a3      	cmp	r3, r4
 8008696:	bf0c      	ite	eq
 8008698:	6032      	streq	r2, [r6, #0]
 800869a:	605a      	strne	r2, [r3, #4]
 800869c:	e7ec      	b.n	8008678 <_malloc_r+0xa0>
 800869e:	4623      	mov	r3, r4
 80086a0:	6864      	ldr	r4, [r4, #4]
 80086a2:	e7b2      	b.n	800860a <_malloc_r+0x32>
 80086a4:	4634      	mov	r4, r6
 80086a6:	6876      	ldr	r6, [r6, #4]
 80086a8:	e7b9      	b.n	800861e <_malloc_r+0x46>
 80086aa:	230c      	movs	r3, #12
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	4638      	mov	r0, r7
 80086b0:	f000 fa80 	bl	8008bb4 <__malloc_unlock>
 80086b4:	e7a1      	b.n	80085fa <_malloc_r+0x22>
 80086b6:	6025      	str	r5, [r4, #0]
 80086b8:	e7de      	b.n	8008678 <_malloc_r+0xa0>
 80086ba:	bf00      	nop
 80086bc:	200003bc 	.word	0x200003bc

080086c0 <iprintf>:
 80086c0:	b40f      	push	{r0, r1, r2, r3}
 80086c2:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <iprintf+0x2c>)
 80086c4:	b513      	push	{r0, r1, r4, lr}
 80086c6:	681c      	ldr	r4, [r3, #0]
 80086c8:	b124      	cbz	r4, 80086d4 <iprintf+0x14>
 80086ca:	69a3      	ldr	r3, [r4, #24]
 80086cc:	b913      	cbnz	r3, 80086d4 <iprintf+0x14>
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7ff fe10 	bl	80082f4 <__sinit>
 80086d4:	ab05      	add	r3, sp, #20
 80086d6:	9a04      	ldr	r2, [sp, #16]
 80086d8:	68a1      	ldr	r1, [r4, #8]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fbf5 	bl	8008ecc <_vfiprintf_r>
 80086e2:	b002      	add	sp, #8
 80086e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e8:	b004      	add	sp, #16
 80086ea:	4770      	bx	lr
 80086ec:	20000144 	.word	0x20000144

080086f0 <_puts_r>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	460e      	mov	r6, r1
 80086f4:	4605      	mov	r5, r0
 80086f6:	b118      	cbz	r0, 8008700 <_puts_r+0x10>
 80086f8:	6983      	ldr	r3, [r0, #24]
 80086fa:	b90b      	cbnz	r3, 8008700 <_puts_r+0x10>
 80086fc:	f7ff fdfa 	bl	80082f4 <__sinit>
 8008700:	69ab      	ldr	r3, [r5, #24]
 8008702:	68ac      	ldr	r4, [r5, #8]
 8008704:	b913      	cbnz	r3, 800870c <_puts_r+0x1c>
 8008706:	4628      	mov	r0, r5
 8008708:	f7ff fdf4 	bl	80082f4 <__sinit>
 800870c:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <_puts_r+0xd0>)
 800870e:	429c      	cmp	r4, r3
 8008710:	d120      	bne.n	8008754 <_puts_r+0x64>
 8008712:	686c      	ldr	r4, [r5, #4]
 8008714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008716:	07db      	lsls	r3, r3, #31
 8008718:	d405      	bmi.n	8008726 <_puts_r+0x36>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	0598      	lsls	r0, r3, #22
 800871e:	d402      	bmi.n	8008726 <_puts_r+0x36>
 8008720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008722:	f7ff feaa 	bl	800847a <__retarget_lock_acquire_recursive>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	0719      	lsls	r1, r3, #28
 800872a:	d51d      	bpl.n	8008768 <_puts_r+0x78>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	b1db      	cbz	r3, 8008768 <_puts_r+0x78>
 8008730:	3e01      	subs	r6, #1
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008738:	3b01      	subs	r3, #1
 800873a:	60a3      	str	r3, [r4, #8]
 800873c:	bb39      	cbnz	r1, 800878e <_puts_r+0x9e>
 800873e:	2b00      	cmp	r3, #0
 8008740:	da38      	bge.n	80087b4 <_puts_r+0xc4>
 8008742:	4622      	mov	r2, r4
 8008744:	210a      	movs	r1, #10
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f8d4 	bl	80088f4 <__swbuf_r>
 800874c:	3001      	adds	r0, #1
 800874e:	d011      	beq.n	8008774 <_puts_r+0x84>
 8008750:	250a      	movs	r5, #10
 8008752:	e011      	b.n	8008778 <_puts_r+0x88>
 8008754:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <_puts_r+0xd4>)
 8008756:	429c      	cmp	r4, r3
 8008758:	d101      	bne.n	800875e <_puts_r+0x6e>
 800875a:	68ac      	ldr	r4, [r5, #8]
 800875c:	e7da      	b.n	8008714 <_puts_r+0x24>
 800875e:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <_puts_r+0xd8>)
 8008760:	429c      	cmp	r4, r3
 8008762:	bf08      	it	eq
 8008764:	68ec      	ldreq	r4, [r5, #12]
 8008766:	e7d5      	b.n	8008714 <_puts_r+0x24>
 8008768:	4621      	mov	r1, r4
 800876a:	4628      	mov	r0, r5
 800876c:	f000 f926 	bl	80089bc <__swsetup_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	d0dd      	beq.n	8008730 <_puts_r+0x40>
 8008774:	f04f 35ff 	mov.w	r5, #4294967295
 8008778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800877a:	07da      	lsls	r2, r3, #31
 800877c:	d405      	bmi.n	800878a <_puts_r+0x9a>
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	059b      	lsls	r3, r3, #22
 8008782:	d402      	bmi.n	800878a <_puts_r+0x9a>
 8008784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008786:	f7ff fe79 	bl	800847c <__retarget_lock_release_recursive>
 800878a:	4628      	mov	r0, r5
 800878c:	bd70      	pop	{r4, r5, r6, pc}
 800878e:	2b00      	cmp	r3, #0
 8008790:	da04      	bge.n	800879c <_puts_r+0xac>
 8008792:	69a2      	ldr	r2, [r4, #24]
 8008794:	429a      	cmp	r2, r3
 8008796:	dc06      	bgt.n	80087a6 <_puts_r+0xb6>
 8008798:	290a      	cmp	r1, #10
 800879a:	d004      	beq.n	80087a6 <_puts_r+0xb6>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	6022      	str	r2, [r4, #0]
 80087a2:	7019      	strb	r1, [r3, #0]
 80087a4:	e7c5      	b.n	8008732 <_puts_r+0x42>
 80087a6:	4622      	mov	r2, r4
 80087a8:	4628      	mov	r0, r5
 80087aa:	f000 f8a3 	bl	80088f4 <__swbuf_r>
 80087ae:	3001      	adds	r0, #1
 80087b0:	d1bf      	bne.n	8008732 <_puts_r+0x42>
 80087b2:	e7df      	b.n	8008774 <_puts_r+0x84>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	250a      	movs	r5, #10
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	701d      	strb	r5, [r3, #0]
 80087be:	e7db      	b.n	8008778 <_puts_r+0x88>
 80087c0:	0800d7f0 	.word	0x0800d7f0
 80087c4:	0800d810 	.word	0x0800d810
 80087c8:	0800d7d0 	.word	0x0800d7d0

080087cc <puts>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <puts+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f7ff bf8d 	b.w	80086f0 <_puts_r>
 80087d6:	bf00      	nop
 80087d8:	20000144 	.word	0x20000144

080087dc <_sbrk_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_sbrk_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f8 fb02 	bl	8000df0 <_sbrk>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_sbrk_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_sbrk_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	200003c4 	.word	0x200003c4

080087fc <__sread>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	460c      	mov	r4, r1
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	f000 fe26 	bl	8009454 <_read_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	bfab      	itete	ge
 800880c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800880e:	89a3      	ldrhlt	r3, [r4, #12]
 8008810:	181b      	addge	r3, r3, r0
 8008812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008816:	bfac      	ite	ge
 8008818:	6563      	strge	r3, [r4, #84]	; 0x54
 800881a:	81a3      	strhlt	r3, [r4, #12]
 800881c:	bd10      	pop	{r4, pc}

0800881e <__swrite>:
 800881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	461f      	mov	r7, r3
 8008824:	898b      	ldrh	r3, [r1, #12]
 8008826:	05db      	lsls	r3, r3, #23
 8008828:	4605      	mov	r5, r0
 800882a:	460c      	mov	r4, r1
 800882c:	4616      	mov	r6, r2
 800882e:	d505      	bpl.n	800883c <__swrite+0x1e>
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	2302      	movs	r3, #2
 8008836:	2200      	movs	r2, #0
 8008838:	f000 f93e 	bl	8008ab8 <_lseek_r>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	4628      	mov	r0, r5
 800884e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008852:	f000 b8a1 	b.w	8008998 <_write_r>

08008856 <__sseek>:
 8008856:	b510      	push	{r4, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	f000 f92b 	bl	8008ab8 <_lseek_r>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	bf15      	itete	ne
 8008868:	6560      	strne	r0, [r4, #84]	; 0x54
 800886a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800886e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008872:	81a3      	strheq	r3, [r4, #12]
 8008874:	bf18      	it	ne
 8008876:	81a3      	strhne	r3, [r4, #12]
 8008878:	bd10      	pop	{r4, pc}

0800887a <__sclose>:
 800887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887e:	f000 b90b 	b.w	8008a98 <_close_r>

08008882 <_vsniprintf_r>:
 8008882:	b530      	push	{r4, r5, lr}
 8008884:	4614      	mov	r4, r2
 8008886:	2c00      	cmp	r4, #0
 8008888:	b09b      	sub	sp, #108	; 0x6c
 800888a:	4605      	mov	r5, r0
 800888c:	461a      	mov	r2, r3
 800888e:	da05      	bge.n	800889c <_vsniprintf_r+0x1a>
 8008890:	238b      	movs	r3, #139	; 0x8b
 8008892:	6003      	str	r3, [r0, #0]
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	b01b      	add	sp, #108	; 0x6c
 800889a:	bd30      	pop	{r4, r5, pc}
 800889c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80088a4:	bf14      	ite	ne
 80088a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80088aa:	4623      	moveq	r3, r4
 80088ac:	9302      	str	r3, [sp, #8]
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088b4:	9100      	str	r1, [sp, #0]
 80088b6:	9104      	str	r1, [sp, #16]
 80088b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80088bc:	4669      	mov	r1, sp
 80088be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088c0:	f000 f9da 	bl	8008c78 <_svfiprintf_r>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	bfbc      	itt	lt
 80088c8:	238b      	movlt	r3, #139	; 0x8b
 80088ca:	602b      	strlt	r3, [r5, #0]
 80088cc:	2c00      	cmp	r4, #0
 80088ce:	d0e3      	beq.n	8008898 <_vsniprintf_r+0x16>
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e7df      	b.n	8008898 <_vsniprintf_r+0x16>

080088d8 <vsniprintf>:
 80088d8:	b507      	push	{r0, r1, r2, lr}
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	460a      	mov	r2, r1
 80088e0:	4601      	mov	r1, r0
 80088e2:	4803      	ldr	r0, [pc, #12]	; (80088f0 <vsniprintf+0x18>)
 80088e4:	6800      	ldr	r0, [r0, #0]
 80088e6:	f7ff ffcc 	bl	8008882 <_vsniprintf_r>
 80088ea:	b003      	add	sp, #12
 80088ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80088f0:	20000144 	.word	0x20000144

080088f4 <__swbuf_r>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	460e      	mov	r6, r1
 80088f8:	4614      	mov	r4, r2
 80088fa:	4605      	mov	r5, r0
 80088fc:	b118      	cbz	r0, 8008906 <__swbuf_r+0x12>
 80088fe:	6983      	ldr	r3, [r0, #24]
 8008900:	b90b      	cbnz	r3, 8008906 <__swbuf_r+0x12>
 8008902:	f7ff fcf7 	bl	80082f4 <__sinit>
 8008906:	4b21      	ldr	r3, [pc, #132]	; (800898c <__swbuf_r+0x98>)
 8008908:	429c      	cmp	r4, r3
 800890a:	d12b      	bne.n	8008964 <__swbuf_r+0x70>
 800890c:	686c      	ldr	r4, [r5, #4]
 800890e:	69a3      	ldr	r3, [r4, #24]
 8008910:	60a3      	str	r3, [r4, #8]
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	071a      	lsls	r2, r3, #28
 8008916:	d52f      	bpl.n	8008978 <__swbuf_r+0x84>
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	b36b      	cbz	r3, 8008978 <__swbuf_r+0x84>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	1ac0      	subs	r0, r0, r3
 8008922:	6963      	ldr	r3, [r4, #20]
 8008924:	b2f6      	uxtb	r6, r6
 8008926:	4283      	cmp	r3, r0
 8008928:	4637      	mov	r7, r6
 800892a:	dc04      	bgt.n	8008936 <__swbuf_r+0x42>
 800892c:	4621      	mov	r1, r4
 800892e:	4628      	mov	r0, r5
 8008930:	f7ff fc3a 	bl	80081a8 <_fflush_r>
 8008934:	bb30      	cbnz	r0, 8008984 <__swbuf_r+0x90>
 8008936:	68a3      	ldr	r3, [r4, #8]
 8008938:	3b01      	subs	r3, #1
 800893a:	60a3      	str	r3, [r4, #8]
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	6022      	str	r2, [r4, #0]
 8008942:	701e      	strb	r6, [r3, #0]
 8008944:	6963      	ldr	r3, [r4, #20]
 8008946:	3001      	adds	r0, #1
 8008948:	4283      	cmp	r3, r0
 800894a:	d004      	beq.n	8008956 <__swbuf_r+0x62>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	07db      	lsls	r3, r3, #31
 8008950:	d506      	bpl.n	8008960 <__swbuf_r+0x6c>
 8008952:	2e0a      	cmp	r6, #10
 8008954:	d104      	bne.n	8008960 <__swbuf_r+0x6c>
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f7ff fc25 	bl	80081a8 <_fflush_r>
 800895e:	b988      	cbnz	r0, 8008984 <__swbuf_r+0x90>
 8008960:	4638      	mov	r0, r7
 8008962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008964:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <__swbuf_r+0x9c>)
 8008966:	429c      	cmp	r4, r3
 8008968:	d101      	bne.n	800896e <__swbuf_r+0x7a>
 800896a:	68ac      	ldr	r4, [r5, #8]
 800896c:	e7cf      	b.n	800890e <__swbuf_r+0x1a>
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <__swbuf_r+0xa0>)
 8008970:	429c      	cmp	r4, r3
 8008972:	bf08      	it	eq
 8008974:	68ec      	ldreq	r4, [r5, #12]
 8008976:	e7ca      	b.n	800890e <__swbuf_r+0x1a>
 8008978:	4621      	mov	r1, r4
 800897a:	4628      	mov	r0, r5
 800897c:	f000 f81e 	bl	80089bc <__swsetup_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	d0cb      	beq.n	800891c <__swbuf_r+0x28>
 8008984:	f04f 37ff 	mov.w	r7, #4294967295
 8008988:	e7ea      	b.n	8008960 <__swbuf_r+0x6c>
 800898a:	bf00      	nop
 800898c:	0800d7f0 	.word	0x0800d7f0
 8008990:	0800d810 	.word	0x0800d810
 8008994:	0800d7d0 	.word	0x0800d7d0

08008998 <_write_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d07      	ldr	r5, [pc, #28]	; (80089b8 <_write_r+0x20>)
 800899c:	4604      	mov	r4, r0
 800899e:	4608      	mov	r0, r1
 80089a0:	4611      	mov	r1, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7f8 f89e 	bl	8000ae8 <_write>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_write_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_write_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200003c4 	.word	0x200003c4

080089bc <__swsetup_r>:
 80089bc:	4b32      	ldr	r3, [pc, #200]	; (8008a88 <__swsetup_r+0xcc>)
 80089be:	b570      	push	{r4, r5, r6, lr}
 80089c0:	681d      	ldr	r5, [r3, #0]
 80089c2:	4606      	mov	r6, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	b125      	cbz	r5, 80089d2 <__swsetup_r+0x16>
 80089c8:	69ab      	ldr	r3, [r5, #24]
 80089ca:	b913      	cbnz	r3, 80089d2 <__swsetup_r+0x16>
 80089cc:	4628      	mov	r0, r5
 80089ce:	f7ff fc91 	bl	80082f4 <__sinit>
 80089d2:	4b2e      	ldr	r3, [pc, #184]	; (8008a8c <__swsetup_r+0xd0>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	d10f      	bne.n	80089f8 <__swsetup_r+0x3c>
 80089d8:	686c      	ldr	r4, [r5, #4]
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e0:	0719      	lsls	r1, r3, #28
 80089e2:	d42c      	bmi.n	8008a3e <__swsetup_r+0x82>
 80089e4:	06dd      	lsls	r5, r3, #27
 80089e6:	d411      	bmi.n	8008a0c <__swsetup_r+0x50>
 80089e8:	2309      	movs	r3, #9
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295
 80089f6:	e03e      	b.n	8008a76 <__swsetup_r+0xba>
 80089f8:	4b25      	ldr	r3, [pc, #148]	; (8008a90 <__swsetup_r+0xd4>)
 80089fa:	429c      	cmp	r4, r3
 80089fc:	d101      	bne.n	8008a02 <__swsetup_r+0x46>
 80089fe:	68ac      	ldr	r4, [r5, #8]
 8008a00:	e7eb      	b.n	80089da <__swsetup_r+0x1e>
 8008a02:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <__swsetup_r+0xd8>)
 8008a04:	429c      	cmp	r4, r3
 8008a06:	bf08      	it	eq
 8008a08:	68ec      	ldreq	r4, [r5, #12]
 8008a0a:	e7e6      	b.n	80089da <__swsetup_r+0x1e>
 8008a0c:	0758      	lsls	r0, r3, #29
 8008a0e:	d512      	bpl.n	8008a36 <__swsetup_r+0x7a>
 8008a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a12:	b141      	cbz	r1, 8008a26 <__swsetup_r+0x6a>
 8008a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a18:	4299      	cmp	r1, r3
 8008a1a:	d002      	beq.n	8008a22 <__swsetup_r+0x66>
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff fd6f 	bl	8008500 <_free_r>
 8008a22:	2300      	movs	r3, #0
 8008a24:	6363      	str	r3, [r4, #52]	; 0x34
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6063      	str	r3, [r4, #4]
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f043 0308 	orr.w	r3, r3, #8
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	6923      	ldr	r3, [r4, #16]
 8008a40:	b94b      	cbnz	r3, 8008a56 <__swsetup_r+0x9a>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4c:	d003      	beq.n	8008a56 <__swsetup_r+0x9a>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 f869 	bl	8008b28 <__smakebuf_r>
 8008a56:	89a0      	ldrh	r0, [r4, #12]
 8008a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a5c:	f010 0301 	ands.w	r3, r0, #1
 8008a60:	d00a      	beq.n	8008a78 <__swsetup_r+0xbc>
 8008a62:	2300      	movs	r3, #0
 8008a64:	60a3      	str	r3, [r4, #8]
 8008a66:	6963      	ldr	r3, [r4, #20]
 8008a68:	425b      	negs	r3, r3
 8008a6a:	61a3      	str	r3, [r4, #24]
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	b943      	cbnz	r3, 8008a82 <__swsetup_r+0xc6>
 8008a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a74:	d1ba      	bne.n	80089ec <__swsetup_r+0x30>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	0781      	lsls	r1, r0, #30
 8008a7a:	bf58      	it	pl
 8008a7c:	6963      	ldrpl	r3, [r4, #20]
 8008a7e:	60a3      	str	r3, [r4, #8]
 8008a80:	e7f4      	b.n	8008a6c <__swsetup_r+0xb0>
 8008a82:	2000      	movs	r0, #0
 8008a84:	e7f7      	b.n	8008a76 <__swsetup_r+0xba>
 8008a86:	bf00      	nop
 8008a88:	20000144 	.word	0x20000144
 8008a8c:	0800d7f0 	.word	0x0800d7f0
 8008a90:	0800d810 	.word	0x0800d810
 8008a94:	0800d7d0 	.word	0x0800d7d0

08008a98 <_close_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d06      	ldr	r5, [pc, #24]	; (8008ab4 <_close_r+0x1c>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7f8 f96f 	bl	8000d86 <_close>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_close_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_close_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	200003c4 	.word	0x200003c4

08008ab8 <_lseek_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d07      	ldr	r5, [pc, #28]	; (8008ad8 <_lseek_r+0x20>)
 8008abc:	4604      	mov	r4, r0
 8008abe:	4608      	mov	r0, r1
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7f8 f984 	bl	8000dd4 <_lseek>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_lseek_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_lseek_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	200003c4 	.word	0x200003c4

08008adc <__swhatbuf_r>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	460e      	mov	r6, r1
 8008ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	b096      	sub	sp, #88	; 0x58
 8008ae8:	4614      	mov	r4, r2
 8008aea:	461d      	mov	r5, r3
 8008aec:	da08      	bge.n	8008b00 <__swhatbuf_r+0x24>
 8008aee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	602a      	str	r2, [r5, #0]
 8008af6:	061a      	lsls	r2, r3, #24
 8008af8:	d410      	bmi.n	8008b1c <__swhatbuf_r+0x40>
 8008afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008afe:	e00e      	b.n	8008b1e <__swhatbuf_r+0x42>
 8008b00:	466a      	mov	r2, sp
 8008b02:	f000 fcb9 	bl	8009478 <_fstat_r>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	dbf1      	blt.n	8008aee <__swhatbuf_r+0x12>
 8008b0a:	9a01      	ldr	r2, [sp, #4]
 8008b0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b14:	425a      	negs	r2, r3
 8008b16:	415a      	adcs	r2, r3
 8008b18:	602a      	str	r2, [r5, #0]
 8008b1a:	e7ee      	b.n	8008afa <__swhatbuf_r+0x1e>
 8008b1c:	2340      	movs	r3, #64	; 0x40
 8008b1e:	2000      	movs	r0, #0
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	b016      	add	sp, #88	; 0x58
 8008b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b28 <__smakebuf_r>:
 8008b28:	898b      	ldrh	r3, [r1, #12]
 8008b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b2c:	079d      	lsls	r5, r3, #30
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	d507      	bpl.n	8008b44 <__smakebuf_r+0x1c>
 8008b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	6163      	str	r3, [r4, #20]
 8008b40:	b002      	add	sp, #8
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	ab01      	add	r3, sp, #4
 8008b46:	466a      	mov	r2, sp
 8008b48:	f7ff ffc8 	bl	8008adc <__swhatbuf_r>
 8008b4c:	9900      	ldr	r1, [sp, #0]
 8008b4e:	4605      	mov	r5, r0
 8008b50:	4630      	mov	r0, r6
 8008b52:	f7ff fd41 	bl	80085d8 <_malloc_r>
 8008b56:	b948      	cbnz	r0, 8008b6c <__smakebuf_r+0x44>
 8008b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b5c:	059a      	lsls	r2, r3, #22
 8008b5e:	d4ef      	bmi.n	8008b40 <__smakebuf_r+0x18>
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	f043 0302 	orr.w	r3, r3, #2
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	e7e3      	b.n	8008b34 <__smakebuf_r+0xc>
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <__smakebuf_r+0x7c>)
 8008b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b78:	81a3      	strh	r3, [r4, #12]
 8008b7a:	9b00      	ldr	r3, [sp, #0]
 8008b7c:	6163      	str	r3, [r4, #20]
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	6120      	str	r0, [r4, #16]
 8008b82:	b15b      	cbz	r3, 8008b9c <__smakebuf_r+0x74>
 8008b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 fc87 	bl	800949c <_isatty_r>
 8008b8e:	b128      	cbz	r0, 8008b9c <__smakebuf_r+0x74>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	89a0      	ldrh	r0, [r4, #12]
 8008b9e:	4305      	orrs	r5, r0
 8008ba0:	81a5      	strh	r5, [r4, #12]
 8008ba2:	e7cd      	b.n	8008b40 <__smakebuf_r+0x18>
 8008ba4:	0800828d 	.word	0x0800828d

08008ba8 <__malloc_lock>:
 8008ba8:	4801      	ldr	r0, [pc, #4]	; (8008bb0 <__malloc_lock+0x8>)
 8008baa:	f7ff bc66 	b.w	800847a <__retarget_lock_acquire_recursive>
 8008bae:	bf00      	nop
 8008bb0:	200003b8 	.word	0x200003b8

08008bb4 <__malloc_unlock>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	; (8008bbc <__malloc_unlock+0x8>)
 8008bb6:	f7ff bc61 	b.w	800847c <__retarget_lock_release_recursive>
 8008bba:	bf00      	nop
 8008bbc:	200003b8 	.word	0x200003b8

08008bc0 <__ssputs_r>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	688e      	ldr	r6, [r1, #8]
 8008bc6:	429e      	cmp	r6, r3
 8008bc8:	4682      	mov	sl, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	4690      	mov	r8, r2
 8008bce:	461f      	mov	r7, r3
 8008bd0:	d838      	bhi.n	8008c44 <__ssputs_r+0x84>
 8008bd2:	898a      	ldrh	r2, [r1, #12]
 8008bd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bd8:	d032      	beq.n	8008c40 <__ssputs_r+0x80>
 8008bda:	6825      	ldr	r5, [r4, #0]
 8008bdc:	6909      	ldr	r1, [r1, #16]
 8008bde:	eba5 0901 	sub.w	r9, r5, r1
 8008be2:	6965      	ldr	r5, [r4, #20]
 8008be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bec:	3301      	adds	r3, #1
 8008bee:	444b      	add	r3, r9
 8008bf0:	106d      	asrs	r5, r5, #1
 8008bf2:	429d      	cmp	r5, r3
 8008bf4:	bf38      	it	cc
 8008bf6:	461d      	movcc	r5, r3
 8008bf8:	0553      	lsls	r3, r2, #21
 8008bfa:	d531      	bpl.n	8008c60 <__ssputs_r+0xa0>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f7ff fceb 	bl	80085d8 <_malloc_r>
 8008c02:	4606      	mov	r6, r0
 8008c04:	b950      	cbnz	r0, 8008c1c <__ssputs_r+0x5c>
 8008c06:	230c      	movs	r3, #12
 8008c08:	f8ca 3000 	str.w	r3, [sl]
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1c:	6921      	ldr	r1, [r4, #16]
 8008c1e:	464a      	mov	r2, r9
 8008c20:	f7ff fc3e 	bl	80084a0 <memcpy>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	6126      	str	r6, [r4, #16]
 8008c32:	6165      	str	r5, [r4, #20]
 8008c34:	444e      	add	r6, r9
 8008c36:	eba5 0509 	sub.w	r5, r5, r9
 8008c3a:	6026      	str	r6, [r4, #0]
 8008c3c:	60a5      	str	r5, [r4, #8]
 8008c3e:	463e      	mov	r6, r7
 8008c40:	42be      	cmp	r6, r7
 8008c42:	d900      	bls.n	8008c46 <__ssputs_r+0x86>
 8008c44:	463e      	mov	r6, r7
 8008c46:	6820      	ldr	r0, [r4, #0]
 8008c48:	4632      	mov	r2, r6
 8008c4a:	4641      	mov	r1, r8
 8008c4c:	f7ff fc36 	bl	80084bc <memmove>
 8008c50:	68a3      	ldr	r3, [r4, #8]
 8008c52:	1b9b      	subs	r3, r3, r6
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	4433      	add	r3, r6
 8008c5a:	6023      	str	r3, [r4, #0]
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e7db      	b.n	8008c18 <__ssputs_r+0x58>
 8008c60:	462a      	mov	r2, r5
 8008c62:	f000 fc2b 	bl	80094bc <_realloc_r>
 8008c66:	4606      	mov	r6, r0
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d1e1      	bne.n	8008c30 <__ssputs_r+0x70>
 8008c6c:	6921      	ldr	r1, [r4, #16]
 8008c6e:	4650      	mov	r0, sl
 8008c70:	f7ff fc46 	bl	8008500 <_free_r>
 8008c74:	e7c7      	b.n	8008c06 <__ssputs_r+0x46>
	...

08008c78 <_svfiprintf_r>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	4698      	mov	r8, r3
 8008c7e:	898b      	ldrh	r3, [r1, #12]
 8008c80:	061b      	lsls	r3, r3, #24
 8008c82:	b09d      	sub	sp, #116	; 0x74
 8008c84:	4607      	mov	r7, r0
 8008c86:	460d      	mov	r5, r1
 8008c88:	4614      	mov	r4, r2
 8008c8a:	d50e      	bpl.n	8008caa <_svfiprintf_r+0x32>
 8008c8c:	690b      	ldr	r3, [r1, #16]
 8008c8e:	b963      	cbnz	r3, 8008caa <_svfiprintf_r+0x32>
 8008c90:	2140      	movs	r1, #64	; 0x40
 8008c92:	f7ff fca1 	bl	80085d8 <_malloc_r>
 8008c96:	6028      	str	r0, [r5, #0]
 8008c98:	6128      	str	r0, [r5, #16]
 8008c9a:	b920      	cbnz	r0, 8008ca6 <_svfiprintf_r+0x2e>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e0d1      	b.n	8008e4a <_svfiprintf_r+0x1d2>
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	616b      	str	r3, [r5, #20]
 8008caa:	2300      	movs	r3, #0
 8008cac:	9309      	str	r3, [sp, #36]	; 0x24
 8008cae:	2320      	movs	r3, #32
 8008cb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cb8:	2330      	movs	r3, #48	; 0x30
 8008cba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e64 <_svfiprintf_r+0x1ec>
 8008cbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc2:	f04f 0901 	mov.w	r9, #1
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	469a      	mov	sl, r3
 8008cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cce:	b10a      	cbz	r2, 8008cd4 <_svfiprintf_r+0x5c>
 8008cd0:	2a25      	cmp	r2, #37	; 0x25
 8008cd2:	d1f9      	bne.n	8008cc8 <_svfiprintf_r+0x50>
 8008cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cd8:	d00b      	beq.n	8008cf2 <_svfiprintf_r+0x7a>
 8008cda:	465b      	mov	r3, fp
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7ff ff6d 	bl	8008bc0 <__ssputs_r>
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	f000 80aa 	beq.w	8008e40 <_svfiprintf_r+0x1c8>
 8008cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cee:	445a      	add	r2, fp
 8008cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80a2 	beq.w	8008e40 <_svfiprintf_r+0x1c8>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d06:	f10a 0a01 	add.w	sl, sl, #1
 8008d0a:	9304      	str	r3, [sp, #16]
 8008d0c:	9307      	str	r3, [sp, #28]
 8008d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d12:	931a      	str	r3, [sp, #104]	; 0x68
 8008d14:	4654      	mov	r4, sl
 8008d16:	2205      	movs	r2, #5
 8008d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1c:	4851      	ldr	r0, [pc, #324]	; (8008e64 <_svfiprintf_r+0x1ec>)
 8008d1e:	f7f7 fa5f 	bl	80001e0 <memchr>
 8008d22:	9a04      	ldr	r2, [sp, #16]
 8008d24:	b9d8      	cbnz	r0, 8008d5e <_svfiprintf_r+0xe6>
 8008d26:	06d0      	lsls	r0, r2, #27
 8008d28:	bf44      	itt	mi
 8008d2a:	2320      	movmi	r3, #32
 8008d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d30:	0711      	lsls	r1, r2, #28
 8008d32:	bf44      	itt	mi
 8008d34:	232b      	movmi	r3, #43	; 0x2b
 8008d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d40:	d015      	beq.n	8008d6e <_svfiprintf_r+0xf6>
 8008d42:	9a07      	ldr	r2, [sp, #28]
 8008d44:	4654      	mov	r4, sl
 8008d46:	2000      	movs	r0, #0
 8008d48:	f04f 0c0a 	mov.w	ip, #10
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d52:	3b30      	subs	r3, #48	; 0x30
 8008d54:	2b09      	cmp	r3, #9
 8008d56:	d94e      	bls.n	8008df6 <_svfiprintf_r+0x17e>
 8008d58:	b1b0      	cbz	r0, 8008d88 <_svfiprintf_r+0x110>
 8008d5a:	9207      	str	r2, [sp, #28]
 8008d5c:	e014      	b.n	8008d88 <_svfiprintf_r+0x110>
 8008d5e:	eba0 0308 	sub.w	r3, r0, r8
 8008d62:	fa09 f303 	lsl.w	r3, r9, r3
 8008d66:	4313      	orrs	r3, r2
 8008d68:	9304      	str	r3, [sp, #16]
 8008d6a:	46a2      	mov	sl, r4
 8008d6c:	e7d2      	b.n	8008d14 <_svfiprintf_r+0x9c>
 8008d6e:	9b03      	ldr	r3, [sp, #12]
 8008d70:	1d19      	adds	r1, r3, #4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	9103      	str	r1, [sp, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bfbb      	ittet	lt
 8008d7a:	425b      	neglt	r3, r3
 8008d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d80:	9307      	strge	r3, [sp, #28]
 8008d82:	9307      	strlt	r3, [sp, #28]
 8008d84:	bfb8      	it	lt
 8008d86:	9204      	strlt	r2, [sp, #16]
 8008d88:	7823      	ldrb	r3, [r4, #0]
 8008d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8c:	d10c      	bne.n	8008da8 <_svfiprintf_r+0x130>
 8008d8e:	7863      	ldrb	r3, [r4, #1]
 8008d90:	2b2a      	cmp	r3, #42	; 0x2a
 8008d92:	d135      	bne.n	8008e00 <_svfiprintf_r+0x188>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	1d1a      	adds	r2, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	9203      	str	r2, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfb8      	it	lt
 8008da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008da4:	3402      	adds	r4, #2
 8008da6:	9305      	str	r3, [sp, #20]
 8008da8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e74 <_svfiprintf_r+0x1fc>
 8008dac:	7821      	ldrb	r1, [r4, #0]
 8008dae:	2203      	movs	r2, #3
 8008db0:	4650      	mov	r0, sl
 8008db2:	f7f7 fa15 	bl	80001e0 <memchr>
 8008db6:	b140      	cbz	r0, 8008dca <_svfiprintf_r+0x152>
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	eba0 000a 	sub.w	r0, r0, sl
 8008dbe:	fa03 f000 	lsl.w	r0, r3, r0
 8008dc2:	9b04      	ldr	r3, [sp, #16]
 8008dc4:	4303      	orrs	r3, r0
 8008dc6:	3401      	adds	r4, #1
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dce:	4826      	ldr	r0, [pc, #152]	; (8008e68 <_svfiprintf_r+0x1f0>)
 8008dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dd4:	2206      	movs	r2, #6
 8008dd6:	f7f7 fa03 	bl	80001e0 <memchr>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d038      	beq.n	8008e50 <_svfiprintf_r+0x1d8>
 8008dde:	4b23      	ldr	r3, [pc, #140]	; (8008e6c <_svfiprintf_r+0x1f4>)
 8008de0:	bb1b      	cbnz	r3, 8008e2a <_svfiprintf_r+0x1b2>
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	3307      	adds	r3, #7
 8008de6:	f023 0307 	bic.w	r3, r3, #7
 8008dea:	3308      	adds	r3, #8
 8008dec:	9303      	str	r3, [sp, #12]
 8008dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df0:	4433      	add	r3, r6
 8008df2:	9309      	str	r3, [sp, #36]	; 0x24
 8008df4:	e767      	b.n	8008cc6 <_svfiprintf_r+0x4e>
 8008df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2001      	movs	r0, #1
 8008dfe:	e7a5      	b.n	8008d4c <_svfiprintf_r+0xd4>
 8008e00:	2300      	movs	r3, #0
 8008e02:	3401      	adds	r4, #1
 8008e04:	9305      	str	r3, [sp, #20]
 8008e06:	4619      	mov	r1, r3
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e12:	3a30      	subs	r2, #48	; 0x30
 8008e14:	2a09      	cmp	r2, #9
 8008e16:	d903      	bls.n	8008e20 <_svfiprintf_r+0x1a8>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0c5      	beq.n	8008da8 <_svfiprintf_r+0x130>
 8008e1c:	9105      	str	r1, [sp, #20]
 8008e1e:	e7c3      	b.n	8008da8 <_svfiprintf_r+0x130>
 8008e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e24:	4604      	mov	r4, r0
 8008e26:	2301      	movs	r3, #1
 8008e28:	e7f0      	b.n	8008e0c <_svfiprintf_r+0x194>
 8008e2a:	ab03      	add	r3, sp, #12
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	462a      	mov	r2, r5
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <_svfiprintf_r+0x1f8>)
 8008e32:	a904      	add	r1, sp, #16
 8008e34:	4638      	mov	r0, r7
 8008e36:	f3af 8000 	nop.w
 8008e3a:	1c42      	adds	r2, r0, #1
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	d1d6      	bne.n	8008dee <_svfiprintf_r+0x176>
 8008e40:	89ab      	ldrh	r3, [r5, #12]
 8008e42:	065b      	lsls	r3, r3, #25
 8008e44:	f53f af2c 	bmi.w	8008ca0 <_svfiprintf_r+0x28>
 8008e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e4a:	b01d      	add	sp, #116	; 0x74
 8008e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e50:	ab03      	add	r3, sp, #12
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	462a      	mov	r2, r5
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <_svfiprintf_r+0x1f8>)
 8008e58:	a904      	add	r1, sp, #16
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f000 f9d4 	bl	8009208 <_printf_i>
 8008e60:	e7eb      	b.n	8008e3a <_svfiprintf_r+0x1c2>
 8008e62:	bf00      	nop
 8008e64:	0800d834 	.word	0x0800d834
 8008e68:	0800d83e 	.word	0x0800d83e
 8008e6c:	00000000 	.word	0x00000000
 8008e70:	08008bc1 	.word	0x08008bc1
 8008e74:	0800d83a 	.word	0x0800d83a

08008e78 <__sfputc_r>:
 8008e78:	6893      	ldr	r3, [r2, #8]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	b410      	push	{r4}
 8008e80:	6093      	str	r3, [r2, #8]
 8008e82:	da08      	bge.n	8008e96 <__sfputc_r+0x1e>
 8008e84:	6994      	ldr	r4, [r2, #24]
 8008e86:	42a3      	cmp	r3, r4
 8008e88:	db01      	blt.n	8008e8e <__sfputc_r+0x16>
 8008e8a:	290a      	cmp	r1, #10
 8008e8c:	d103      	bne.n	8008e96 <__sfputc_r+0x1e>
 8008e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e92:	f7ff bd2f 	b.w	80088f4 <__swbuf_r>
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	1c58      	adds	r0, r3, #1
 8008e9a:	6010      	str	r0, [r2, #0]
 8008e9c:	7019      	strb	r1, [r3, #0]
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <__sfputs_r>:
 8008ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	460f      	mov	r7, r1
 8008eac:	4614      	mov	r4, r2
 8008eae:	18d5      	adds	r5, r2, r3
 8008eb0:	42ac      	cmp	r4, r5
 8008eb2:	d101      	bne.n	8008eb8 <__sfputs_r+0x12>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e007      	b.n	8008ec8 <__sfputs_r+0x22>
 8008eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ebc:	463a      	mov	r2, r7
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff ffda 	bl	8008e78 <__sfputc_r>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d1f3      	bne.n	8008eb0 <__sfputs_r+0xa>
 8008ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ecc <_vfiprintf_r>:
 8008ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	b09d      	sub	sp, #116	; 0x74
 8008ed4:	4614      	mov	r4, r2
 8008ed6:	4698      	mov	r8, r3
 8008ed8:	4606      	mov	r6, r0
 8008eda:	b118      	cbz	r0, 8008ee4 <_vfiprintf_r+0x18>
 8008edc:	6983      	ldr	r3, [r0, #24]
 8008ede:	b90b      	cbnz	r3, 8008ee4 <_vfiprintf_r+0x18>
 8008ee0:	f7ff fa08 	bl	80082f4 <__sinit>
 8008ee4:	4b89      	ldr	r3, [pc, #548]	; (800910c <_vfiprintf_r+0x240>)
 8008ee6:	429d      	cmp	r5, r3
 8008ee8:	d11b      	bne.n	8008f22 <_vfiprintf_r+0x56>
 8008eea:	6875      	ldr	r5, [r6, #4]
 8008eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eee:	07d9      	lsls	r1, r3, #31
 8008ef0:	d405      	bmi.n	8008efe <_vfiprintf_r+0x32>
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	059a      	lsls	r2, r3, #22
 8008ef6:	d402      	bmi.n	8008efe <_vfiprintf_r+0x32>
 8008ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008efa:	f7ff fabe 	bl	800847a <__retarget_lock_acquire_recursive>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	071b      	lsls	r3, r3, #28
 8008f02:	d501      	bpl.n	8008f08 <_vfiprintf_r+0x3c>
 8008f04:	692b      	ldr	r3, [r5, #16]
 8008f06:	b9eb      	cbnz	r3, 8008f44 <_vfiprintf_r+0x78>
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff fd56 	bl	80089bc <__swsetup_r>
 8008f10:	b1c0      	cbz	r0, 8008f44 <_vfiprintf_r+0x78>
 8008f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f14:	07dc      	lsls	r4, r3, #31
 8008f16:	d50e      	bpl.n	8008f36 <_vfiprintf_r+0x6a>
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1c:	b01d      	add	sp, #116	; 0x74
 8008f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f22:	4b7b      	ldr	r3, [pc, #492]	; (8009110 <_vfiprintf_r+0x244>)
 8008f24:	429d      	cmp	r5, r3
 8008f26:	d101      	bne.n	8008f2c <_vfiprintf_r+0x60>
 8008f28:	68b5      	ldr	r5, [r6, #8]
 8008f2a:	e7df      	b.n	8008eec <_vfiprintf_r+0x20>
 8008f2c:	4b79      	ldr	r3, [pc, #484]	; (8009114 <_vfiprintf_r+0x248>)
 8008f2e:	429d      	cmp	r5, r3
 8008f30:	bf08      	it	eq
 8008f32:	68f5      	ldreq	r5, [r6, #12]
 8008f34:	e7da      	b.n	8008eec <_vfiprintf_r+0x20>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	0598      	lsls	r0, r3, #22
 8008f3a:	d4ed      	bmi.n	8008f18 <_vfiprintf_r+0x4c>
 8008f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f3e:	f7ff fa9d 	bl	800847c <__retarget_lock_release_recursive>
 8008f42:	e7e9      	b.n	8008f18 <_vfiprintf_r+0x4c>
 8008f44:	2300      	movs	r3, #0
 8008f46:	9309      	str	r3, [sp, #36]	; 0x24
 8008f48:	2320      	movs	r3, #32
 8008f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f52:	2330      	movs	r3, #48	; 0x30
 8008f54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009118 <_vfiprintf_r+0x24c>
 8008f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f5c:	f04f 0901 	mov.w	r9, #1
 8008f60:	4623      	mov	r3, r4
 8008f62:	469a      	mov	sl, r3
 8008f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f68:	b10a      	cbz	r2, 8008f6e <_vfiprintf_r+0xa2>
 8008f6a:	2a25      	cmp	r2, #37	; 0x25
 8008f6c:	d1f9      	bne.n	8008f62 <_vfiprintf_r+0x96>
 8008f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f72:	d00b      	beq.n	8008f8c <_vfiprintf_r+0xc0>
 8008f74:	465b      	mov	r3, fp
 8008f76:	4622      	mov	r2, r4
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff ff93 	bl	8008ea6 <__sfputs_r>
 8008f80:	3001      	adds	r0, #1
 8008f82:	f000 80aa 	beq.w	80090da <_vfiprintf_r+0x20e>
 8008f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f88:	445a      	add	r2, fp
 8008f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80a2 	beq.w	80090da <_vfiprintf_r+0x20e>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa0:	f10a 0a01 	add.w	sl, sl, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	9307      	str	r3, [sp, #28]
 8008fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fac:	931a      	str	r3, [sp, #104]	; 0x68
 8008fae:	4654      	mov	r4, sl
 8008fb0:	2205      	movs	r2, #5
 8008fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb6:	4858      	ldr	r0, [pc, #352]	; (8009118 <_vfiprintf_r+0x24c>)
 8008fb8:	f7f7 f912 	bl	80001e0 <memchr>
 8008fbc:	9a04      	ldr	r2, [sp, #16]
 8008fbe:	b9d8      	cbnz	r0, 8008ff8 <_vfiprintf_r+0x12c>
 8008fc0:	06d1      	lsls	r1, r2, #27
 8008fc2:	bf44      	itt	mi
 8008fc4:	2320      	movmi	r3, #32
 8008fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fca:	0713      	lsls	r3, r2, #28
 8008fcc:	bf44      	itt	mi
 8008fce:	232b      	movmi	r3, #43	; 0x2b
 8008fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fda:	d015      	beq.n	8009008 <_vfiprintf_r+0x13c>
 8008fdc:	9a07      	ldr	r2, [sp, #28]
 8008fde:	4654      	mov	r4, sl
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f04f 0c0a 	mov.w	ip, #10
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fec:	3b30      	subs	r3, #48	; 0x30
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	d94e      	bls.n	8009090 <_vfiprintf_r+0x1c4>
 8008ff2:	b1b0      	cbz	r0, 8009022 <_vfiprintf_r+0x156>
 8008ff4:	9207      	str	r2, [sp, #28]
 8008ff6:	e014      	b.n	8009022 <_vfiprintf_r+0x156>
 8008ff8:	eba0 0308 	sub.w	r3, r0, r8
 8008ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8009000:	4313      	orrs	r3, r2
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	46a2      	mov	sl, r4
 8009006:	e7d2      	b.n	8008fae <_vfiprintf_r+0xe2>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d19      	adds	r1, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9103      	str	r1, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfbb      	ittet	lt
 8009014:	425b      	neglt	r3, r3
 8009016:	f042 0202 	orrlt.w	r2, r2, #2
 800901a:	9307      	strge	r3, [sp, #28]
 800901c:	9307      	strlt	r3, [sp, #28]
 800901e:	bfb8      	it	lt
 8009020:	9204      	strlt	r2, [sp, #16]
 8009022:	7823      	ldrb	r3, [r4, #0]
 8009024:	2b2e      	cmp	r3, #46	; 0x2e
 8009026:	d10c      	bne.n	8009042 <_vfiprintf_r+0x176>
 8009028:	7863      	ldrb	r3, [r4, #1]
 800902a:	2b2a      	cmp	r3, #42	; 0x2a
 800902c:	d135      	bne.n	800909a <_vfiprintf_r+0x1ce>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	1d1a      	adds	r2, r3, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	9203      	str	r2, [sp, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfb8      	it	lt
 800903a:	f04f 33ff 	movlt.w	r3, #4294967295
 800903e:	3402      	adds	r4, #2
 8009040:	9305      	str	r3, [sp, #20]
 8009042:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009128 <_vfiprintf_r+0x25c>
 8009046:	7821      	ldrb	r1, [r4, #0]
 8009048:	2203      	movs	r2, #3
 800904a:	4650      	mov	r0, sl
 800904c:	f7f7 f8c8 	bl	80001e0 <memchr>
 8009050:	b140      	cbz	r0, 8009064 <_vfiprintf_r+0x198>
 8009052:	2340      	movs	r3, #64	; 0x40
 8009054:	eba0 000a 	sub.w	r0, r0, sl
 8009058:	fa03 f000 	lsl.w	r0, r3, r0
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	4303      	orrs	r3, r0
 8009060:	3401      	adds	r4, #1
 8009062:	9304      	str	r3, [sp, #16]
 8009064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009068:	482c      	ldr	r0, [pc, #176]	; (800911c <_vfiprintf_r+0x250>)
 800906a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800906e:	2206      	movs	r2, #6
 8009070:	f7f7 f8b6 	bl	80001e0 <memchr>
 8009074:	2800      	cmp	r0, #0
 8009076:	d03f      	beq.n	80090f8 <_vfiprintf_r+0x22c>
 8009078:	4b29      	ldr	r3, [pc, #164]	; (8009120 <_vfiprintf_r+0x254>)
 800907a:	bb1b      	cbnz	r3, 80090c4 <_vfiprintf_r+0x1f8>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	3307      	adds	r3, #7
 8009080:	f023 0307 	bic.w	r3, r3, #7
 8009084:	3308      	adds	r3, #8
 8009086:	9303      	str	r3, [sp, #12]
 8009088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908a:	443b      	add	r3, r7
 800908c:	9309      	str	r3, [sp, #36]	; 0x24
 800908e:	e767      	b.n	8008f60 <_vfiprintf_r+0x94>
 8009090:	fb0c 3202 	mla	r2, ip, r2, r3
 8009094:	460c      	mov	r4, r1
 8009096:	2001      	movs	r0, #1
 8009098:	e7a5      	b.n	8008fe6 <_vfiprintf_r+0x11a>
 800909a:	2300      	movs	r3, #0
 800909c:	3401      	adds	r4, #1
 800909e:	9305      	str	r3, [sp, #20]
 80090a0:	4619      	mov	r1, r3
 80090a2:	f04f 0c0a 	mov.w	ip, #10
 80090a6:	4620      	mov	r0, r4
 80090a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ac:	3a30      	subs	r2, #48	; 0x30
 80090ae:	2a09      	cmp	r2, #9
 80090b0:	d903      	bls.n	80090ba <_vfiprintf_r+0x1ee>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0c5      	beq.n	8009042 <_vfiprintf_r+0x176>
 80090b6:	9105      	str	r1, [sp, #20]
 80090b8:	e7c3      	b.n	8009042 <_vfiprintf_r+0x176>
 80090ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80090be:	4604      	mov	r4, r0
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7f0      	b.n	80090a6 <_vfiprintf_r+0x1da>
 80090c4:	ab03      	add	r3, sp, #12
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	462a      	mov	r2, r5
 80090ca:	4b16      	ldr	r3, [pc, #88]	; (8009124 <_vfiprintf_r+0x258>)
 80090cc:	a904      	add	r1, sp, #16
 80090ce:	4630      	mov	r0, r6
 80090d0:	f3af 8000 	nop.w
 80090d4:	4607      	mov	r7, r0
 80090d6:	1c78      	adds	r0, r7, #1
 80090d8:	d1d6      	bne.n	8009088 <_vfiprintf_r+0x1bc>
 80090da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090dc:	07d9      	lsls	r1, r3, #31
 80090de:	d405      	bmi.n	80090ec <_vfiprintf_r+0x220>
 80090e0:	89ab      	ldrh	r3, [r5, #12]
 80090e2:	059a      	lsls	r2, r3, #22
 80090e4:	d402      	bmi.n	80090ec <_vfiprintf_r+0x220>
 80090e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e8:	f7ff f9c8 	bl	800847c <__retarget_lock_release_recursive>
 80090ec:	89ab      	ldrh	r3, [r5, #12]
 80090ee:	065b      	lsls	r3, r3, #25
 80090f0:	f53f af12 	bmi.w	8008f18 <_vfiprintf_r+0x4c>
 80090f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f6:	e711      	b.n	8008f1c <_vfiprintf_r+0x50>
 80090f8:	ab03      	add	r3, sp, #12
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	462a      	mov	r2, r5
 80090fe:	4b09      	ldr	r3, [pc, #36]	; (8009124 <_vfiprintf_r+0x258>)
 8009100:	a904      	add	r1, sp, #16
 8009102:	4630      	mov	r0, r6
 8009104:	f000 f880 	bl	8009208 <_printf_i>
 8009108:	e7e4      	b.n	80090d4 <_vfiprintf_r+0x208>
 800910a:	bf00      	nop
 800910c:	0800d7f0 	.word	0x0800d7f0
 8009110:	0800d810 	.word	0x0800d810
 8009114:	0800d7d0 	.word	0x0800d7d0
 8009118:	0800d834 	.word	0x0800d834
 800911c:	0800d83e 	.word	0x0800d83e
 8009120:	00000000 	.word	0x00000000
 8009124:	08008ea7 	.word	0x08008ea7
 8009128:	0800d83a 	.word	0x0800d83a

0800912c <_printf_common>:
 800912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	4616      	mov	r6, r2
 8009132:	4699      	mov	r9, r3
 8009134:	688a      	ldr	r2, [r1, #8]
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800913c:	4293      	cmp	r3, r2
 800913e:	bfb8      	it	lt
 8009140:	4613      	movlt	r3, r2
 8009142:	6033      	str	r3, [r6, #0]
 8009144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009148:	4607      	mov	r7, r0
 800914a:	460c      	mov	r4, r1
 800914c:	b10a      	cbz	r2, 8009152 <_printf_common+0x26>
 800914e:	3301      	adds	r3, #1
 8009150:	6033      	str	r3, [r6, #0]
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	0699      	lsls	r1, r3, #26
 8009156:	bf42      	ittt	mi
 8009158:	6833      	ldrmi	r3, [r6, #0]
 800915a:	3302      	addmi	r3, #2
 800915c:	6033      	strmi	r3, [r6, #0]
 800915e:	6825      	ldr	r5, [r4, #0]
 8009160:	f015 0506 	ands.w	r5, r5, #6
 8009164:	d106      	bne.n	8009174 <_printf_common+0x48>
 8009166:	f104 0a19 	add.w	sl, r4, #25
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	6832      	ldr	r2, [r6, #0]
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	42ab      	cmp	r3, r5
 8009172:	dc26      	bgt.n	80091c2 <_printf_common+0x96>
 8009174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009178:	1e13      	subs	r3, r2, #0
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	bf18      	it	ne
 800917e:	2301      	movne	r3, #1
 8009180:	0692      	lsls	r2, r2, #26
 8009182:	d42b      	bmi.n	80091dc <_printf_common+0xb0>
 8009184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009188:	4649      	mov	r1, r9
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	3001      	adds	r0, #1
 8009190:	d01e      	beq.n	80091d0 <_printf_common+0xa4>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	68e5      	ldr	r5, [r4, #12]
 8009196:	6832      	ldr	r2, [r6, #0]
 8009198:	f003 0306 	and.w	r3, r3, #6
 800919c:	2b04      	cmp	r3, #4
 800919e:	bf08      	it	eq
 80091a0:	1aad      	subeq	r5, r5, r2
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	6922      	ldr	r2, [r4, #16]
 80091a6:	bf0c      	ite	eq
 80091a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091ac:	2500      	movne	r5, #0
 80091ae:	4293      	cmp	r3, r2
 80091b0:	bfc4      	itt	gt
 80091b2:	1a9b      	subgt	r3, r3, r2
 80091b4:	18ed      	addgt	r5, r5, r3
 80091b6:	2600      	movs	r6, #0
 80091b8:	341a      	adds	r4, #26
 80091ba:	42b5      	cmp	r5, r6
 80091bc:	d11a      	bne.n	80091f4 <_printf_common+0xc8>
 80091be:	2000      	movs	r0, #0
 80091c0:	e008      	b.n	80091d4 <_printf_common+0xa8>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4652      	mov	r2, sl
 80091c6:	4649      	mov	r1, r9
 80091c8:	4638      	mov	r0, r7
 80091ca:	47c0      	blx	r8
 80091cc:	3001      	adds	r0, #1
 80091ce:	d103      	bne.n	80091d8 <_printf_common+0xac>
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d8:	3501      	adds	r5, #1
 80091da:	e7c6      	b.n	800916a <_printf_common+0x3e>
 80091dc:	18e1      	adds	r1, r4, r3
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	2030      	movs	r0, #48	; 0x30
 80091e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091e6:	4422      	add	r2, r4
 80091e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091f0:	3302      	adds	r3, #2
 80091f2:	e7c7      	b.n	8009184 <_printf_common+0x58>
 80091f4:	2301      	movs	r3, #1
 80091f6:	4622      	mov	r2, r4
 80091f8:	4649      	mov	r1, r9
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c0      	blx	r8
 80091fe:	3001      	adds	r0, #1
 8009200:	d0e6      	beq.n	80091d0 <_printf_common+0xa4>
 8009202:	3601      	adds	r6, #1
 8009204:	e7d9      	b.n	80091ba <_printf_common+0x8e>
	...

08009208 <_printf_i>:
 8009208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800920c:	7e0f      	ldrb	r7, [r1, #24]
 800920e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009210:	2f78      	cmp	r7, #120	; 0x78
 8009212:	4691      	mov	r9, r2
 8009214:	4680      	mov	r8, r0
 8009216:	460c      	mov	r4, r1
 8009218:	469a      	mov	sl, r3
 800921a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800921e:	d807      	bhi.n	8009230 <_printf_i+0x28>
 8009220:	2f62      	cmp	r7, #98	; 0x62
 8009222:	d80a      	bhi.n	800923a <_printf_i+0x32>
 8009224:	2f00      	cmp	r7, #0
 8009226:	f000 80d8 	beq.w	80093da <_printf_i+0x1d2>
 800922a:	2f58      	cmp	r7, #88	; 0x58
 800922c:	f000 80a3 	beq.w	8009376 <_printf_i+0x16e>
 8009230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009238:	e03a      	b.n	80092b0 <_printf_i+0xa8>
 800923a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800923e:	2b15      	cmp	r3, #21
 8009240:	d8f6      	bhi.n	8009230 <_printf_i+0x28>
 8009242:	a101      	add	r1, pc, #4	; (adr r1, 8009248 <_printf_i+0x40>)
 8009244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009248:	080092a1 	.word	0x080092a1
 800924c:	080092b5 	.word	0x080092b5
 8009250:	08009231 	.word	0x08009231
 8009254:	08009231 	.word	0x08009231
 8009258:	08009231 	.word	0x08009231
 800925c:	08009231 	.word	0x08009231
 8009260:	080092b5 	.word	0x080092b5
 8009264:	08009231 	.word	0x08009231
 8009268:	08009231 	.word	0x08009231
 800926c:	08009231 	.word	0x08009231
 8009270:	08009231 	.word	0x08009231
 8009274:	080093c1 	.word	0x080093c1
 8009278:	080092e5 	.word	0x080092e5
 800927c:	080093a3 	.word	0x080093a3
 8009280:	08009231 	.word	0x08009231
 8009284:	08009231 	.word	0x08009231
 8009288:	080093e3 	.word	0x080093e3
 800928c:	08009231 	.word	0x08009231
 8009290:	080092e5 	.word	0x080092e5
 8009294:	08009231 	.word	0x08009231
 8009298:	08009231 	.word	0x08009231
 800929c:	080093ab 	.word	0x080093ab
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	1d1a      	adds	r2, r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	602a      	str	r2, [r5, #0]
 80092a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0a3      	b.n	80093fc <_printf_i+0x1f4>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	6829      	ldr	r1, [r5, #0]
 80092b8:	0606      	lsls	r6, r0, #24
 80092ba:	f101 0304 	add.w	r3, r1, #4
 80092be:	d50a      	bpl.n	80092d6 <_printf_i+0xce>
 80092c0:	680e      	ldr	r6, [r1, #0]
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	2e00      	cmp	r6, #0
 80092c6:	da03      	bge.n	80092d0 <_printf_i+0xc8>
 80092c8:	232d      	movs	r3, #45	; 0x2d
 80092ca:	4276      	negs	r6, r6
 80092cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d0:	485e      	ldr	r0, [pc, #376]	; (800944c <_printf_i+0x244>)
 80092d2:	230a      	movs	r3, #10
 80092d4:	e019      	b.n	800930a <_printf_i+0x102>
 80092d6:	680e      	ldr	r6, [r1, #0]
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092de:	bf18      	it	ne
 80092e0:	b236      	sxthne	r6, r6
 80092e2:	e7ef      	b.n	80092c4 <_printf_i+0xbc>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	6820      	ldr	r0, [r4, #0]
 80092e8:	1d19      	adds	r1, r3, #4
 80092ea:	6029      	str	r1, [r5, #0]
 80092ec:	0601      	lsls	r1, r0, #24
 80092ee:	d501      	bpl.n	80092f4 <_printf_i+0xec>
 80092f0:	681e      	ldr	r6, [r3, #0]
 80092f2:	e002      	b.n	80092fa <_printf_i+0xf2>
 80092f4:	0646      	lsls	r6, r0, #25
 80092f6:	d5fb      	bpl.n	80092f0 <_printf_i+0xe8>
 80092f8:	881e      	ldrh	r6, [r3, #0]
 80092fa:	4854      	ldr	r0, [pc, #336]	; (800944c <_printf_i+0x244>)
 80092fc:	2f6f      	cmp	r7, #111	; 0x6f
 80092fe:	bf0c      	ite	eq
 8009300:	2308      	moveq	r3, #8
 8009302:	230a      	movne	r3, #10
 8009304:	2100      	movs	r1, #0
 8009306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800930a:	6865      	ldr	r5, [r4, #4]
 800930c:	60a5      	str	r5, [r4, #8]
 800930e:	2d00      	cmp	r5, #0
 8009310:	bfa2      	ittt	ge
 8009312:	6821      	ldrge	r1, [r4, #0]
 8009314:	f021 0104 	bicge.w	r1, r1, #4
 8009318:	6021      	strge	r1, [r4, #0]
 800931a:	b90e      	cbnz	r6, 8009320 <_printf_i+0x118>
 800931c:	2d00      	cmp	r5, #0
 800931e:	d04d      	beq.n	80093bc <_printf_i+0x1b4>
 8009320:	4615      	mov	r5, r2
 8009322:	fbb6 f1f3 	udiv	r1, r6, r3
 8009326:	fb03 6711 	mls	r7, r3, r1, r6
 800932a:	5dc7      	ldrb	r7, [r0, r7]
 800932c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009330:	4637      	mov	r7, r6
 8009332:	42bb      	cmp	r3, r7
 8009334:	460e      	mov	r6, r1
 8009336:	d9f4      	bls.n	8009322 <_printf_i+0x11a>
 8009338:	2b08      	cmp	r3, #8
 800933a:	d10b      	bne.n	8009354 <_printf_i+0x14c>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	07de      	lsls	r6, r3, #31
 8009340:	d508      	bpl.n	8009354 <_printf_i+0x14c>
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	6861      	ldr	r1, [r4, #4]
 8009346:	4299      	cmp	r1, r3
 8009348:	bfde      	ittt	le
 800934a:	2330      	movle	r3, #48	; 0x30
 800934c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009354:	1b52      	subs	r2, r2, r5
 8009356:	6122      	str	r2, [r4, #16]
 8009358:	f8cd a000 	str.w	sl, [sp]
 800935c:	464b      	mov	r3, r9
 800935e:	aa03      	add	r2, sp, #12
 8009360:	4621      	mov	r1, r4
 8009362:	4640      	mov	r0, r8
 8009364:	f7ff fee2 	bl	800912c <_printf_common>
 8009368:	3001      	adds	r0, #1
 800936a:	d14c      	bne.n	8009406 <_printf_i+0x1fe>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	b004      	add	sp, #16
 8009372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009376:	4835      	ldr	r0, [pc, #212]	; (800944c <_printf_i+0x244>)
 8009378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800937c:	6829      	ldr	r1, [r5, #0]
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f851 6b04 	ldr.w	r6, [r1], #4
 8009384:	6029      	str	r1, [r5, #0]
 8009386:	061d      	lsls	r5, r3, #24
 8009388:	d514      	bpl.n	80093b4 <_printf_i+0x1ac>
 800938a:	07df      	lsls	r7, r3, #31
 800938c:	bf44      	itt	mi
 800938e:	f043 0320 	orrmi.w	r3, r3, #32
 8009392:	6023      	strmi	r3, [r4, #0]
 8009394:	b91e      	cbnz	r6, 800939e <_printf_i+0x196>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	f023 0320 	bic.w	r3, r3, #32
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	2310      	movs	r3, #16
 80093a0:	e7b0      	b.n	8009304 <_printf_i+0xfc>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	f043 0320 	orr.w	r3, r3, #32
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	2378      	movs	r3, #120	; 0x78
 80093ac:	4828      	ldr	r0, [pc, #160]	; (8009450 <_printf_i+0x248>)
 80093ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093b2:	e7e3      	b.n	800937c <_printf_i+0x174>
 80093b4:	0659      	lsls	r1, r3, #25
 80093b6:	bf48      	it	mi
 80093b8:	b2b6      	uxthmi	r6, r6
 80093ba:	e7e6      	b.n	800938a <_printf_i+0x182>
 80093bc:	4615      	mov	r5, r2
 80093be:	e7bb      	b.n	8009338 <_printf_i+0x130>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	6826      	ldr	r6, [r4, #0]
 80093c4:	6961      	ldr	r1, [r4, #20]
 80093c6:	1d18      	adds	r0, r3, #4
 80093c8:	6028      	str	r0, [r5, #0]
 80093ca:	0635      	lsls	r5, r6, #24
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	d501      	bpl.n	80093d4 <_printf_i+0x1cc>
 80093d0:	6019      	str	r1, [r3, #0]
 80093d2:	e002      	b.n	80093da <_printf_i+0x1d2>
 80093d4:	0670      	lsls	r0, r6, #25
 80093d6:	d5fb      	bpl.n	80093d0 <_printf_i+0x1c8>
 80093d8:	8019      	strh	r1, [r3, #0]
 80093da:	2300      	movs	r3, #0
 80093dc:	6123      	str	r3, [r4, #16]
 80093de:	4615      	mov	r5, r2
 80093e0:	e7ba      	b.n	8009358 <_printf_i+0x150>
 80093e2:	682b      	ldr	r3, [r5, #0]
 80093e4:	1d1a      	adds	r2, r3, #4
 80093e6:	602a      	str	r2, [r5, #0]
 80093e8:	681d      	ldr	r5, [r3, #0]
 80093ea:	6862      	ldr	r2, [r4, #4]
 80093ec:	2100      	movs	r1, #0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7f6 fef6 	bl	80001e0 <memchr>
 80093f4:	b108      	cbz	r0, 80093fa <_printf_i+0x1f2>
 80093f6:	1b40      	subs	r0, r0, r5
 80093f8:	6060      	str	r0, [r4, #4]
 80093fa:	6863      	ldr	r3, [r4, #4]
 80093fc:	6123      	str	r3, [r4, #16]
 80093fe:	2300      	movs	r3, #0
 8009400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009404:	e7a8      	b.n	8009358 <_printf_i+0x150>
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	462a      	mov	r2, r5
 800940a:	4649      	mov	r1, r9
 800940c:	4640      	mov	r0, r8
 800940e:	47d0      	blx	sl
 8009410:	3001      	adds	r0, #1
 8009412:	d0ab      	beq.n	800936c <_printf_i+0x164>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	079b      	lsls	r3, r3, #30
 8009418:	d413      	bmi.n	8009442 <_printf_i+0x23a>
 800941a:	68e0      	ldr	r0, [r4, #12]
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	4298      	cmp	r0, r3
 8009420:	bfb8      	it	lt
 8009422:	4618      	movlt	r0, r3
 8009424:	e7a4      	b.n	8009370 <_printf_i+0x168>
 8009426:	2301      	movs	r3, #1
 8009428:	4632      	mov	r2, r6
 800942a:	4649      	mov	r1, r9
 800942c:	4640      	mov	r0, r8
 800942e:	47d0      	blx	sl
 8009430:	3001      	adds	r0, #1
 8009432:	d09b      	beq.n	800936c <_printf_i+0x164>
 8009434:	3501      	adds	r5, #1
 8009436:	68e3      	ldr	r3, [r4, #12]
 8009438:	9903      	ldr	r1, [sp, #12]
 800943a:	1a5b      	subs	r3, r3, r1
 800943c:	42ab      	cmp	r3, r5
 800943e:	dcf2      	bgt.n	8009426 <_printf_i+0x21e>
 8009440:	e7eb      	b.n	800941a <_printf_i+0x212>
 8009442:	2500      	movs	r5, #0
 8009444:	f104 0619 	add.w	r6, r4, #25
 8009448:	e7f5      	b.n	8009436 <_printf_i+0x22e>
 800944a:	bf00      	nop
 800944c:	0800d845 	.word	0x0800d845
 8009450:	0800d856 	.word	0x0800d856

08009454 <_read_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d07      	ldr	r5, [pc, #28]	; (8009474 <_read_r+0x20>)
 8009458:	4604      	mov	r4, r0
 800945a:	4608      	mov	r0, r1
 800945c:	4611      	mov	r1, r2
 800945e:	2200      	movs	r2, #0
 8009460:	602a      	str	r2, [r5, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	f7f7 fc72 	bl	8000d4c <_read>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d102      	bne.n	8009472 <_read_r+0x1e>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b103      	cbz	r3, 8009472 <_read_r+0x1e>
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	200003c4 	.word	0x200003c4

08009478 <_fstat_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d07      	ldr	r5, [pc, #28]	; (8009498 <_fstat_r+0x20>)
 800947c:	2300      	movs	r3, #0
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	4611      	mov	r1, r2
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	f7f7 fc8a 	bl	8000d9e <_fstat>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d102      	bne.n	8009494 <_fstat_r+0x1c>
 800948e:	682b      	ldr	r3, [r5, #0]
 8009490:	b103      	cbz	r3, 8009494 <_fstat_r+0x1c>
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	bd38      	pop	{r3, r4, r5, pc}
 8009496:	bf00      	nop
 8009498:	200003c4 	.word	0x200003c4

0800949c <_isatty_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d06      	ldr	r5, [pc, #24]	; (80094b8 <_isatty_r+0x1c>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7f7 fc89 	bl	8000dbe <_isatty>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_isatty_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_isatty_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	200003c4 	.word	0x200003c4

080094bc <_realloc_r>:
 80094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c0:	4680      	mov	r8, r0
 80094c2:	4614      	mov	r4, r2
 80094c4:	460e      	mov	r6, r1
 80094c6:	b921      	cbnz	r1, 80094d2 <_realloc_r+0x16>
 80094c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	4611      	mov	r1, r2
 80094ce:	f7ff b883 	b.w	80085d8 <_malloc_r>
 80094d2:	b92a      	cbnz	r2, 80094e0 <_realloc_r+0x24>
 80094d4:	f7ff f814 	bl	8008500 <_free_r>
 80094d8:	4625      	mov	r5, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e0:	f000 f81b 	bl	800951a <_malloc_usable_size_r>
 80094e4:	4284      	cmp	r4, r0
 80094e6:	4607      	mov	r7, r0
 80094e8:	d802      	bhi.n	80094f0 <_realloc_r+0x34>
 80094ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ee:	d812      	bhi.n	8009516 <_realloc_r+0x5a>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7ff f870 	bl	80085d8 <_malloc_r>
 80094f8:	4605      	mov	r5, r0
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d0ed      	beq.n	80094da <_realloc_r+0x1e>
 80094fe:	42bc      	cmp	r4, r7
 8009500:	4622      	mov	r2, r4
 8009502:	4631      	mov	r1, r6
 8009504:	bf28      	it	cs
 8009506:	463a      	movcs	r2, r7
 8009508:	f7fe ffca 	bl	80084a0 <memcpy>
 800950c:	4631      	mov	r1, r6
 800950e:	4640      	mov	r0, r8
 8009510:	f7fe fff6 	bl	8008500 <_free_r>
 8009514:	e7e1      	b.n	80094da <_realloc_r+0x1e>
 8009516:	4635      	mov	r5, r6
 8009518:	e7df      	b.n	80094da <_realloc_r+0x1e>

0800951a <_malloc_usable_size_r>:
 800951a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800951e:	1f18      	subs	r0, r3, #4
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfbc      	itt	lt
 8009524:	580b      	ldrlt	r3, [r1, r0]
 8009526:	18c0      	addlt	r0, r0, r3
 8009528:	4770      	bx	lr
	...

0800952c <_init>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr

08009538 <_fini>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr
